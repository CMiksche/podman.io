"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[2879],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=m(n),u=a,k=d["".concat(p,".").concat(u)]||d[u]||c[u]||o;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var m=2;m<o;m++)l[m]=n[m];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9639:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var r=n(7462),a=(n(7294),n(3905));const o={},l=void 0,i={unversionedId:"commands/podman-rm",id:"commands/podman-rm",title:"podman-rm",description:"% podman-rm 1",source:"@site/docs/commands/podman-rm.md",sourceDirName:"commands",slug:"/commands/podman-rm",permalink:"/website-new/docs/commands/podman-rm",draft:!1,editUrl:"https://github.com/containers/website-new/docs/commands/podman-rm.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-restart",permalink:"/website-new/docs/commands/podman-restart"},next:{title:"podman-rmi",permalink:"/website-new/docs/commands/podman-rmi"}},p={},m=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--all</strong>, <strong>-a</strong>",id:"--all--a",level:4},{value:"<strong>--depend</strong>",id:"--depend",level:4},{value:"<strong>--filter</strong>=<em>filter</em>",id:"--filterfilter",level:4},{value:"<strong>--force</strong>, <strong>-f</strong>",id:"--force--f",level:4},{value:"<strong>--volumes</strong>, <strong>-v</strong>",id:"--volumes--v",level:4},{value:"EXAMPLE",id:"example",level:2},{value:"Exit Status",id:"exit-status",level:2},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2}],s={toc:m},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"% podman-rm 1"),(0,a.kt)("h2",{id:"name"},"NAME"),(0,a.kt)("p",null,"podman","-","rm - Remove one or more containers"),(0,a.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"podman rm")," ","[",(0,a.kt)("em",{parentName:"p"},"options"),"]"," ",(0,a.kt)("em",{parentName:"p"},"container")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"podman container rm")," ","[",(0,a.kt)("em",{parentName:"p"},"options"),"]"," ",(0,a.kt)("em",{parentName:"p"},"container")),(0,a.kt)("h2",{id:"description"},"DESCRIPTION"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"podman rm")," will remove one or more containers from the host. The container name or ID can be used. This does not remove images.\nRunning or unusable containers will not be removed without the ",(0,a.kt)("strong",{parentName:"p"},"-f")," option."),(0,a.kt)("h2",{id:"options"},"OPTIONS"),(0,a.kt)("h4",{id:"--all--a"},(0,a.kt)("strong",{parentName:"h4"},"--all"),", ",(0,a.kt)("strong",{parentName:"h4"},"-a")),(0,a.kt)("p",null,"Remove all containers. Can be used in conjunction with ",(0,a.kt)("strong",{parentName:"p"},"-f")," as well."),(0,a.kt)("p",null,"@@option cidfile.read"),(0,a.kt)("h4",{id:"--depend"},(0,a.kt)("strong",{parentName:"h4"},"--depend")),(0,a.kt)("p",null,"Remove selected container and recursively remove all containers that depend on it."),(0,a.kt)("h4",{id:"--filterfilter"},(0,a.kt)("strong",{parentName:"h4"},"--filter"),"=",(0,a.kt)("em",{parentName:"h4"},"filter")),(0,a.kt)("p",null,"Filter what containers remove.\nMultiple filters can be given with multiple uses of the --filter flag.\nFilters with the same key work inclusive with the only exception being\n",(0,a.kt)("inlineCode",{parentName:"p"},"label")," which is exclusive. Filters with different keys always work exclusive."),(0,a.kt)("p",null,"Valid filters are listed below:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Filter")),(0,a.kt)("th",{parentName:"tr",align:null},(0,a.kt)("strong",{parentName:"th"},"Description")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"id"),(0,a.kt)("td",{parentName:"tr",align:null},"[ID]"," Container's ID (accepts regex)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"name"),(0,a.kt)("td",{parentName:"tr",align:null},"[Name]"," Container's name (accepts regex)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"label"),(0,a.kt)("td",{parentName:"tr",align:null},"[Key]"," or ","[Key=Value]"," Label assigned to a container")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"exited"),(0,a.kt)("td",{parentName:"tr",align:null},"[Int]"," Container's exit code")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"status"),(0,a.kt)("td",{parentName:"tr",align:null},"[Status]"," Container's status: 'created', 'exited', 'paused', 'running', 'unknown'")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ancestor"),(0,a.kt)("td",{parentName:"tr",align:null},"[ImageName]"," Image or descendant used to create container")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"before"),(0,a.kt)("td",{parentName:"tr",align:null},"[ID]"," or ","[Name]"," Containers created before this container")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"since"),(0,a.kt)("td",{parentName:"tr",align:null},"[ID]"," or ","[Name]"," Containers created since this container")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"volume"),(0,a.kt)("td",{parentName:"tr",align:null},"[VolumeName]"," or ","[MountpointDestination]"," Volume mounted in container")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"health"),(0,a.kt)("td",{parentName:"tr",align:null},"[Status]"," healthy or unhealthy")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"pod"),(0,a.kt)("td",{parentName:"tr",align:null},"[Pod]"," name or full or partial ID of pod")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"network"),(0,a.kt)("td",{parentName:"tr",align:null},"[Network]"," name or full ID of network")))),(0,a.kt)("h4",{id:"--force--f"},(0,a.kt)("strong",{parentName:"h4"},"--force"),", ",(0,a.kt)("strong",{parentName:"h4"},"-f")),(0,a.kt)("p",null,"Force the removal of running and paused containers. Forcing a container removal also\nremoves containers from container storage even if the container is not known to podman.\nContainers could have been created by a different container engine.\nIn addition, forcing can be used to remove unusable containers, e.g. containers\nwhose OCI runtime has become unavailable."),(0,a.kt)("p",null,"@@option ignore\nFurther ignore when the specified ",(0,a.kt)("inlineCode",{parentName:"p"},"--cidfile")," does not exist as it may have\nalready been removed along with the container."),(0,a.kt)("p",null,"@@option latest"),(0,a.kt)("p",null,"@@option time"),(0,a.kt)("p",null,"The --force option must be specified to use the --time option."),(0,a.kt)("h4",{id:"--volumes--v"},(0,a.kt)("strong",{parentName:"h4"},"--volumes"),", ",(0,a.kt)("strong",{parentName:"h4"},"-v")),(0,a.kt)("p",null,"Remove anonymous volumes associated with the container. This does not include named volumes\ncreated with ",(0,a.kt)("strong",{parentName:"p"},"podman volume create"),", or the ",(0,a.kt)("strong",{parentName:"p"},"--volume")," option of ",(0,a.kt)("strong",{parentName:"p"},"podman run")," and ",(0,a.kt)("strong",{parentName:"p"},"podman create"),"."),(0,a.kt)("h2",{id:"example"},"EXAMPLE"),(0,a.kt)("p",null,"Remove container with a given name"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman rm mywebserver\n")),(0,a.kt)("p",null,"Remove container with a given name and all of the containers that depend on it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman rm --depend mywebserver\n")),(0,a.kt)("p",null,"Remove multiple containers with given names or IDs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman rm mywebserver myflaskserver 860a4b23\n")),(0,a.kt)("p",null,"Remove multiple containers with IDs read from files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman rm --cidfile ./cidfile-1 --cidfile /home/user/cidfile-2\n")),(0,a.kt)("p",null,"Forcibly remove container with a given ID"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman rm -f 860a4b23\n")),(0,a.kt)("p",null,"Remove all containers regardless of the run state"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman rm -f -a\n")),(0,a.kt)("p",null,"Forcibly remove the last created container"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman rm -f --latest\n")),(0,a.kt)("h2",{id:"exit-status"},"Exit Status"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"0")," All specified containers removed"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1")," One of the specified containers did not exist, and no other failures"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2")," One of the specified containers is paused or running"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"125")," The command fails for any other reason"),(0,a.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/website-new/docs/podman"},"podman(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/cri-o/cri-o/blob/main/docs/crio.8.md"},"crio(8)"))),(0,a.kt)("h2",{id:"history"},"HISTORY"),(0,a.kt)("p",null,"August 2017, Originally compiled by Ryan Cole ",(0,a.kt)("a",{parentName:"p",href:"mailto:rycole@redhat.com"},"rycole@redhat.com")))}c.isMDXComponent=!0}}]);