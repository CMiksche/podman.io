"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[8214],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4972:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const i={title:"CI, and CI, and CI, oh my! &lpar;then more CI&rpar;",layout:"default",author:"cevich",categories:["blogs"],tags:["podman","ci","automation","test","cloud"]},r=void 0,s={permalink:"/blogs/2019/03/18/CI3",source:"@site/blog/2019-03-18-CI3.md",title:"CI, and CI, and CI, oh my! &lpar;then more CI&rpar;",description:"podman logo",date:"2019-03-18T00:00:00.000Z",formattedDate:"March 18, 2019",tags:[{label:"podman",permalink:"/blogs/tags/podman"},{label:"ci",permalink:"/blogs/tags/ci"},{label:"automation",permalink:"/blogs/tags/automation"},{label:"test",permalink:"/blogs/tags/test"},{label:"cloud",permalink:"/blogs/tags/cloud"}],readingTime:8.455,hasTruncateMarker:!0,authors:[{name:"cevich"}],frontMatter:{title:"CI, and CI, and CI, oh my! &lpar;then more CI&rpar;",layout:"default",author:"cevich",categories:["blogs"],tags:["podman","ci","automation","test","cloud"]},prevItem:{title:"Podman&#58; Linux containers made easy, part 1",permalink:"/blogs/2019/03/22/podman-made-easy"},nextItem:{title:"podman-install",permalink:"/blogs/2019/03/16/podman-install"}},l={authorsImageUrls:[void 0]},u=[{value:"By Chris Evich GitHub",id:"by-chris-evich-github",level:2},{value:"Why Cirrus-CI",id:"why-cirrus-ci",level:3},{value:"GET OFF MY LAWWWWWN!",id:"get-off-my-lawwwwwn",level:3},{value:"VM Image Orchestration",id:"vm-image-orchestration",level:3},{value:"Good looks and clean presentation",id:"good-looks-and-clean-presentation",level:3},{value:"Conclusion",id:"conclusion",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...i}=e;return(0,o.kt)(c,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"podman logo",src:n(1382).Z,width:"228",height:"61"})),(0,o.kt)("h1",{id:"ci-and-ci-and-ci-oh-my-then-more-ci"},"CI, and CI, and CI, oh my! (then more CI)"),(0,o.kt)("h2",{id:"by-chris-evich-github"},"By Chris Evich ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/cevich"},"GitHub")),(0,o.kt)("p",null,"I wanted to write a detailed post about the CI setup we use for exercising proposed\nchanges to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman"},"libpod (podman repo)"),". \xa0Unfortunately\nthis topic (and automation in general)\nis so big, most readers would end up on the floor, sound asleep, in a puddle of their\nown drool. \xa0Instead, I will keep your fidget-spinner twirling, by jumping around\nseveral topics."),(0,o.kt)("p",null,"Starting with an overview on why we chose to use ",(0,o.kt)("a",{parentName:"p",href:"https://cirrus-ci.org/"},"Cirrus CI"),", I'll\nprovide a short 3-step\nwalk-through of how it works, along with lots of links. \xa0Then, we'll go into more detail\nregarding VM Image orchestration, before connecting that back to our Cirrus-CI\nconfiguration."),(0,o.kt)("h3",{id:"why-cirrus-ci"},"Why Cirrus-CI"),(0,o.kt)("p",null,'I once said "testing code is at least 10x harder than writing it". This is especially true when a\nsoftware-engineer believes their code is "perfectly good" (meaning, tons of bugs). At the same\ntime, test automation is generally as reliable, as the inverse of its simplicity (especially when\nit\'s never simple). Which brings me back to around July/August of \'18:'),(0,o.kt)("p",null,'The libpod project was considered by many to be "perfectly good", but its automation was definitely\nnot simple. At least one part or another constantly ',(0,o.kt)("a",{parentName:"p",href:"https://en.wiktionary.org/wiki/jacked_up#English"},"jacked-up"),".\nAt the time, automation was split\nacross two totally different services, operating with incompatible yet duplicate configurations.\nThe third service is a downstream consumer of libpod, but at the time was also under consideration\nto take over pull-request automation from the first two:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Travis"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"With ",(0,o.kt)("a",{parentName:"li",href:"https://lists.ubuntu.com/archives/ubuntu-announce/2014-April/000182.html"},"Ubuntu Trusty only a few years old"),",\nwe ran tests on a platform version nobody was using,\nwith bleeding edge-code jammed on top. \xa0Some OS-X tests ran, and we think at least one person\nlooked at the results, some of the time, every once in a while."),(0,o.kt)("li",{parentName:"ul"},"Required a contrived containerized-environment to workaround host-side limitations. \xa0Fixes for\nfake environments almost never improve reality. e.g. impossible to test or fix AppArmor or\nSELinux problems from inside a container."),(0,o.kt)("li",{parentName:"ul"},"The tests did not represent reality. \xa0Most people would never run container tools within a\ncontainer, and certain security tools like SELinux and AppArmor would not be tested running\ninside this environment."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"PAPR"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'An internal "maintenance mode" service, meaning only bug-fixes, no new features. Supported by a\nsingle, talented engineer, from another group, perfectly happy to be working on something else.'),(0,o.kt)("li",{parentName:"ul"},"Fortunately it does have great support for running things on Atomic Host, which we still use to\nmaintain our insanity...I mean, double-check some things."),(0,o.kt)("li",{parentName:"ul"},"The underlying infrastructure is unpredictably reliable. Mainly due to frequent\n",(0,o.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Eating_your_own_dog_food"},"dog-food poisoning"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"OpenShift"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"An elegant, impressive piece of machinery, with tests so numerous that most other projects would\nhave trouble calling up enough drool."),(0,o.kt)("li",{parentName:"ul"},"Fantastic at testing containers and at-scale orchestration. \xa0However way too complex for our\nlow-level, host-side poking of runtimes, and userspace."),(0,o.kt)("li",{parentName:"ul"},"Downstream from libpod by weeks or months depending on the platform, like RHEL for example."),(0,o.kt)("li",{parentName:"ul"},"Both Travis and PAPR already demonstrated the pain of testing host-side libraries/tools\nwithin a container, no further lessons or reruns required.")))),(0,o.kt)("p",null,"As if this vegetarian sausage wasn't already dripping with liquid goodness. \xa0The smallest little\nnetwork blip, and you have to re-run the entire suite again. \xa0The importance of network speed and\nrobustness can never be overstated. So I set out on a mission against complexity, toward being\nable to reliably and frequently ruin engineer's \"perfectly good\" code before it merges."),(0,o.kt)("h3",{id:"get-off-my-lawwwwwn"},"GET OFF MY LAWWWWWN!"),(0,o.kt)("p",null,"The Cirrus CI killer feature. \xa0You can selfishly\n",(0,o.kt)("a",{parentName:"p",href:"https://cirrus-ci.org/guide/supported-computing-services/"},"bring\xa0your own cloud"),"\nand everything else to make\nit work, and not have to share with Billy Bob's Used tire and doughnut shop. \xa0You're the master of\nthe entire host and runtime environment, OS, kernel, packages, updates, everything! \xa0Then, with\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/marketplace/cirrus-ci"},"the Cirrus CI app"),"\non your code repository, testing follows this simple automated sequence:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create VMs (or containers) in your cloud, using your encrypted credentials."),(0,o.kt)("li",{parentName:"ol"},"Follow ",(0,o.kt)("a",{parentName:"li",href:"https://cirrus-ci.org/guide/writing-tasks/#script-instruction"},"instructions you've spelled out like B-A-S-H"),"."),(0,o.kt)("li",{parentName:"ol"},'Show green on exit(0) - the "pretty" engineer\'s code is properly spoiled (i.e. functional).')),(0,o.kt)("p",null,"So\n",(0,o.kt)("a",{parentName:"p",href:"https://cirrus-ci.org/#comparison-with-popular-ciaas"},"Cirrus CI gives all the power"),"\nfor success, and/or blasting giant, perfectly round, holes in your own two feet!\nOur CI experience can be as simple or complex as we like, and reliability will match that of major\ncloud providers and the inverse of our cleverness. What could possibly go wrong? :D"),(0,o.kt)("h3",{id:"vm-image-orchestration"},"VM Image Orchestration"),(0,o.kt)("p",null,"Implementing the bowels of any CI/Automation stack usually begins with orchestrate the initial\noperating system state. \xa0Therefore, for efficiency-sake, it's handy to cache this work before,\nexercising project-code changes. Otherwise, it's a complete waste of (expensive) engineer-time\nto constantly install, update, and configure all aspects of the system during every test run."),(0,o.kt)("p",null,"As\n",(0,o.kt)("a",{parentName:"p",href:"https://cirrus-ci.org/guide/supported-computing-services/#custom-vm-images"},"recommended by Cirrus CI"),"\n, we utilize a tool by the inventors of Vagrant: ",(0,o.kt)("a",{parentName:"p",href:"https://www.packer.io/"},"Packer"),". \xa0I was able to\nmake it do things in a matter of minutes, as packer is fairly brain-dead-simple. \xa0It accepts a JSON\nfile, which I have simplified as YAML for readability. A simple (non-functional) example will\ndemonstrate the basic ideas:\n{% raw %}"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'---\n\nvariables: \xa0# all up-front, no guessing allowed!\n \xa0\xa0\xa0foo: "bar" # simple\n \xa0\xa0\xa0build_image_suffix: "-libpod-{{env `COMMIT_SHA`}}"# from env. var\n\nbuilders: \xa0# Where to do stuff\n\n \xa0\xa0\xa0- type: "googlecompute" \xa0\xa0# TONS of others supported too\n \xa0\xa0\xa0\xa0\xa0image_name: \'{{build_name}}{{user `build_image_suffix`}}\'\n \xa0\xa0\xa0\xa0\xa0# ... more details ...\n\n \xa0\xa0\xa0- type "googlecompute"\n \xa0\xa0\xa0\xa0\xa0# ...other OSes...\n\nprovisioners: \xa0# How to do stuff\n\n    - type: "shell"\n      script: "/path/to/{{build_name}}_setup.sh" \xa0# macro looks up OS\n\npost-processors: \xa0# Where to stick stuff\n    - - type: \'googlecompute-export\'\n        paths: ... # name of storage bucket where VM Image will rest.\n```{% endraw %}\n\nIn English, the above translates to:\n\n1. Using some provided variables like `foo`, but fill the variable `build_image_suffix`\n   using the env. vars `$COMMIT_SHA`\n2. Spin up some VMs in GCE.\n3. Upload and execute a shell script on each VM (in parallel).\n4. Assuming success, store the resulting VM image into a storage bucket for\n   later use as needed, or will expire and get automatically deleted after a time.\n\nPerhaps that\'s over-simplifying things a little, but\npacker provides mostly [just the bear-necessities](https://www.packer.io/docs/provisioners/index.html)\n(sorry, [song is stuck in my head](https://www.youtube.com/watch?v=08NlhjpVFsU)). Roughly ten\nminutes after running a simple packer build command, the VMs are automatically torn down, and their disks\nsaved. \xa0At a time of our choosing, an image can be imported from the storage bucket,\nthen a small PR tossed up to activate the images for Cirrus.\n\n### Packer &rarr; Cirrus-CI Connection\n\nNext up the stack, we\'ll dig into some basic details of the Cirrus CI system. \xa0If you\'ve used\nservices like Travis before, this example .cirrus.yml file won\'t be too surprising (simplified\nsomewhat for example purposes):\n\n```yaml\n---\n\n# Safely stored details about accessing our cloud\ngcp_credentials: ENCRYPTED[blahblah]\n\nenv: \xa0# environment and behavioral values for all tasks and scripts\n \xa0\xa0\xa0# Where to clone the source code into\n \xa0\xa0\xa0CIRRUS_WORKING_DIR: "/var/tmp/go/src/github.com/containers/libpod"\n \xa0\xa0\xa0SCRIPT_BASE: ./contrib/cirrus \xa0# saves some typing (below)\n\ntesting_task: \xa0# One particular set of things to do\n\n \xa0\xa0\xa0gce_instance: \xa0# What kind of VM to use\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0image_name: \xa0# Same as image_name produced by packer (above)\n\n \xa0\xa0\xa0script: \xa0# Step by step\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0- $SCRIPT_BASE/setup_environment.sh \xa0\xa0# does what it says\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0- $SCRIPT_BASE/unit_test.sh \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0# this too\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0- $SCRIPT_BASE/integration_test.sh \xa0\xa0\xa0# and this\n')),(0,o.kt)("p",null,"With ",(0,o.kt)("a",{parentName:"p",href:"https://cirrus-ci.org/guide/quick-start/"},'Cirrus CI "installed"'),"\non a GitHub repository, upon any pull\nrequest change, Cirrus CI will step\nin to kick things within GCE, then report back results in your pull request."),(0,o.kt)("p",null,"However, we also need to test more than one OS. \xa0This is easily accomplished in Cirrus CI, by\nusing what they call a\n",(0,o.kt)("a",{parentName:"p",href:"https://cirrus-ci.org/guide/writing-tasks/#matrix-modification"},"matrix modification"),'.\nRoughly translated into simple country-folk speak as: "',(0,o.kt)("em",{parentName:"p"},"we done messed up our YAML parser\nto do more fancier things, and stuff"),'". Illustrated in part by looking at an\nexcerpt from our\n',(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/.cirrus.yml"},"actual .cirrus.yml file"),"\nin the libpod repository:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'...cut...\n\ntesting_task:\n\n \xa0\xa0gce_instance:\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0image_project: "libpod-123456"\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0zone: "us-central1-a"\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0cpu: 2\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0memory: "4Gb"\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0disk: 200\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0matrix:\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0image_name: "ubuntu-18-libpod-a250386d" # <-- name from packer\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0image_name: "fedora-28-libpod-a250386d"\n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0image_name: "fedora-29-libpod-a250386d"\n...cut...\n')),(0,o.kt)("p",null,"The above will automatically duplicate the ",(0,o.kt)("inlineCode",{parentName:"p"},"testing_task")," three times, running a different VM image\nfor each. You can run a matrix across other items as well, like environment variables. There are\nalso options for filtering your matrix, and adding dependencies between tasks. I'd spell those\nour for you, but it's liable to suck the lubrication from your fidget-spinner."),(0,o.kt)("h3",{id:"good-looks-and-clean-presentation"},"Good looks and clean presentation"),(0,o.kt)("p",null,"Another Cirrus CI feature we utilize, has to do with the way\n",(0,o.kt)("a",{parentName:"p",href:"https://cirrus-ci.org/guide/writing-tasks/#script-instruction"},"the scripting")," output is\npresented. This\nincludes what you don't see, like extraneous buttons and widgets. The way details are presented\ncan be critical for debugging. Here's how we leverage that simplicity:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"testing_task:\n\n \xa0\xa0\xa0...cut...\n\n \xa0\xa0\xa0setup_environment_script: $SCRIPT_BASE/setup_environment.sh\n\n \xa0\xa0\xa0unit_test_script: $SCRIPT_BASE/unit_test.sh\n \xa0\xa0\xa0integration_test_script: $SCRIPT_BASE/integration_test.sh\n\n \xa0\xa0\xa0...cut...\n")),(0,o.kt)("p",null,"It's possible to have multiple scripts or commands per ","_","script section. \xa0Because we dedicate one\nper, the output is presented in bite-size pieces:"),(0,o.kt)("p",null,"This makes it super easy to find what you're looking for. If the unit-tests fail with a complaint about\nsome invalid environment variable. It's easier to drop down that box than to go scrolling through\na giant\n",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Wikipedia:Wall_of_text"},"wall of text"),"\n(though that's sometimes necessary also). On the other hand, if the output\nwas all jammed into a single ","_","script block, tracking down problems might get too challenging\nfor my old-fogy sensibilities. Mind I've only celebrated my 38th birthday four times so far...and\nremember exactly zero of what happened those nights."),(0,o.kt)("h3",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"There are many other details I could get into, but sadly, my coffee mug is empty and I can see that I\nforgot to wash it (again). \xa0Nevertheless, if you need some simple nuts-and-bolts automation, I\nhighly recommend ",(0,o.kt)("a",{parentName:"p",href:"https://cirrus-ci.org"},"Cirrus-CI"),". It's (beer) free to use for open-source\nprojects. The\n",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com"},"Google Cloud Engine"),"\nis also pseudo-free for quite a while, since they give you a\nvery generous, and substantial startup credit."),(0,o.kt)("p",null,"Other than finding a new mug or my soap, if there are any burning questions here,\nor snide remarks there, please feel free to find me in #podman on Freenode (IRC).\nUnless the question is too-smart, I might even be able to answer it. Until then,\nmay your pretty code keep its bugs well hidden ",(0,o.kt)("em",{parentName:"p"},"and")," out of sight."))}m.isMDXComponent=!0},1382:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/podman-ce586c2894883ad9c353492b5e1893a8.svg"}}]);