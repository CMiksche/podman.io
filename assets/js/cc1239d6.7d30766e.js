"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[8433],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||r;return n?o.createElement(m,i(i({ref:t},d),{},{components:n})):o.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2947:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(7462),a=(n(7294),n(3905));const r={title:"Basic Networking"},i=void 0,s={unversionedId:"tutorials/basic_networking",id:"tutorials/basic_networking",title:"Basic Networking",description:"PODMAN logo",source:"@site/docs/tutorials/basic_networking.md",sourceDirName:"tutorials",slug:"/tutorials/basic_networking",permalink:"/website-new/docs/tutorials/basic_networking",draft:!1,editUrl:"https://github.com/containers/website-new/docs/tutorials/basic_networking.md",tags:[],version:"current",frontMatter:{title:"Basic Networking"},sidebar:"docsSidebar",previous:{title:"Tutorials",permalink:"/website-new/docs/tutorials/"},next:{title:"How to sign and distribute container images using Podman",permalink:"/website-new/docs/tutorials/image_signing"}},l={},c=[{value:"Differences between rootful and rootless container networking",id:"differences-between-rootful-and-rootless-container-networking",level:2},{value:"Firewalls",id:"firewalls",level:2},{value:"Basic Network Setups",id:"basic-network-setups",level:2},{value:"Bridge",id:"bridge",level:3},{value:"Default Network",id:"default-network",level:4},{value:"Example",id:"example",level:4},{value:"Macvlan",id:"macvlan",level:3},{value:"Example",id:"example-1",level:4},{value:"Slirp4netns",id:"slirp4netns",level:3},{value:"Example",id:"example-2",level:4},{value:"Communicating between containers and pods",id:"communicating-between-containers-and-pods",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/containers/common/main/logos/podman-logo-full-vert.png",alt:"PODMAN logo"})),(0,a.kt)("h1",{id:"basic-networking-guide-for-podman"},"Basic Networking Guide for Podman"),(0,a.kt)("p",null,"It seems once people understand the basics of containers, networking is one of the first\naspects they begin experimenting with. And regarding networking, it takes very\nlittle experimentation before ending up on the deep end of the pool. The following\nguide shows the most common network setups for Podman rootful and rootless containers.\nEach setup is supported with an example."),(0,a.kt)("h2",{id:"differences-between-rootful-and-rootless-container-networking"},"Differences between rootful and rootless container networking"),(0,a.kt)("p",null,"One of the guiding factors on networking for containers with Podman is going to\nbe whether or not the container is run by a root user or not. This is because\nunprivileged users cannot create networking interfaces on the host. Therefore,\nfor rootless containers, the default network mode is slirp4netns. Because of the\nlimited privileges, slirp4netns lacks some of the features of networking\ncompared to rootful Podman's networking; for example, slirp4netns cannot give\ncontainers a routable IP address. The default networking mode for rootful\ncontainers on the other side is netavark, which allows a container to have a\nroutable IP address."),(0,a.kt)("h2",{id:"firewalls"},"Firewalls"),(0,a.kt)("p",null,"The role of a firewall will not impact the setup and configuration of networking,\nbut it will impact traffic on those networks. The most obvious is inbound network\ntraffic to the container host, which is being passed onto containers usually with\nport mapping. Depending on the firewall implementation, we have observed firewall\nports being opened automatically due to running a container with a port mapping (for\nexample). If container traffic does not seem to work properly, check the firewall\nand allow traffic on ports the container is using. A common problem is that\nreloading the firewall deletes the netavark iptables rules resulting in a loss of\nnetwork connectivity for rootful containers. Podman v3 provides the podman\nnetwork reload command to restore this without having to restart the container."),(0,a.kt)("h2",{id:"basic-network-setups"},"Basic Network Setups"),(0,a.kt)("p",null,"Most containers and pods being run with Podman adhere to a couple of simple scenarios.\nBy default, rootful Podman will create a bridged network. This is the most straightforward\nand preferred network setup for Podman. Bridge networking creates an interface for\nthe container on an internal bridge network, which is then connected to the internet\nvia Network Address Translation(NAT). We also see users wanting to use ",(0,a.kt)("inlineCode",{parentName:"p"},"macvlan"),"\nfor networking as well. The ",(0,a.kt)("inlineCode",{parentName:"p"},"macvlan")," plugin forwards an entire network interface\nfrom the host into the container, allowing it access to the network the host is connected\nto. And finally, the default network configuration for rootless containers is slirp4netns.\nThe slirp4netns network mode has limited capabilities but can be run on users without\nroot privileges. It creates a tunnel from the host into the container to forward\ntraffic."),(0,a.kt)("h3",{id:"bridge"},"Bridge"),(0,a.kt)("p",null,"A bridge network is defined as an internal network is created where both the\ncontainer and host are attached. Then this network is capable of allowing the containers\nto communicate outside the host."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"bridge_network",src:n(2766).Z,width:"1763",height:"827"})),(0,a.kt)("p",null,"Consider the above illustration. It depicts a laptop user running two containers:\na web and db instance. These two containers are on the virtual network with the\nhost. Additionally, by default, these containers can initiate communications outside\nthe laptop (to the Internet for example). The containers on the virtual network\ntypically have non-routable, also known as private IP addresses."),(0,a.kt)("p",null,"When dealing with communication that is being initiated outside the host, the outside\nclient typically must address the laptop\u2019s external network interface and given port\nnumber. Assuming the host allows incoming traffic, the host will know to forward\nthe incoming traffic on that port to the specific container. To accomplish this,\nfirewall rules are added to forward traffic when a container requests a specific\nport be forwarded."),(0,a.kt)("p",null,"Bridge networking is the default for Podman containers created as root. Podman provides\na default bridge network, but you can create others using the ",(0,a.kt)("inlineCode",{parentName:"p"},"podman network create"),"\ncommand. Containers can be joined to a network when they are created with the\n",(0,a.kt)("inlineCode",{parentName:"p"},"--network")," flag, or after they are created via the ",(0,a.kt)("inlineCode",{parentName:"p"},"podman network connect")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"podman network disconnect")," commands."),(0,a.kt)("p",null,"As mentioned earlier, slirp4netns is the default network configuration for rootless\nusers. But as of Podman version 4.0, rootless users can also use netavark.\nThe user experience of rootless netavark is very akin to a rootful netavark, except that\nthere is no default network configuration provided. You simply need to create a\nnetwork, and the one will be created as a bridge network. If you would like to switch from\nCNI networking to netavark, you must issue the ",(0,a.kt)("inlineCode",{parentName:"p"},"podman system reset --force")," command.\nThis will delete all of your images, containers, and custom networks."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman network create\n")),(0,a.kt)("p",null,"When rootless containers are run, network operations\nwill be executed inside an extra network namespace. To join this namespace, use\n",(0,a.kt)("inlineCode",{parentName:"p"},"podman unshare --rootless-netns"),"."),(0,a.kt)("h4",{id:"default-network"},"Default Network"),(0,a.kt)("p",null,"The default network ",(0,a.kt)("inlineCode",{parentName:"p"},"podman")," with netavark is memory-only. It does not support dns resolution because of backwards compatibility with Docker. To change settings, export the in-memory network and change the file."),(0,a.kt)("p",null,"For the default rootful network use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"podman network inspect podman | jq .[] > /etc/containers/networks/podman.json\n")),(0,a.kt)("p",null,"And for the rootless network use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"podman network inspect podman | jq .[] > ~/.local/share/containers/storage/networks/podman.json\n")),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("p",null,"By default, rootful containers use the netavark for its default network if\nyou have not migrated from Podman v3.\nIn this case, no network name must be passed to Podman. However, you can create\nadditional bridged networks with the podman create command."),(0,a.kt)("p",null,"The following example shows how to set up a web server and expose it to the network\noutside the host as both rootful and rootless. It will also show how an outside\nclient can connect to the container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(rootful) $ sudo podman run -dt --name webserver -p 8080:80 quay.io/libpod/banner\n00f3440c7576aae2d5b193c40513c29c7964e96bf797cf0cc352c2b68ccbe66a\n")),(0,a.kt)("p",null,"Now run the container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -dt --name webserver --net podman1 -p 8081:80 quay.io/libpod/banner\n269fd0d6b2c8ed60f2ca41d7beceec2471d72fb9a33aa8ca45b81dc9a0abbb12\n")),(0,a.kt)("p",null,"Note in the above run command, the container\u2019s port 80 (where the Nginx server is\nrunning) was mapped to the host\u2019s port 8080. Port 8080 was chosen to demonstrate\nhow the host and container ports can be mapped for external access. The port could\nvery well have been 80 as well (except for rootless users)."),(0,a.kt)("p",null,"To connect from an outside client to the webserver, simply point an HTTP client to\nthe host\u2019s IP address at port 8080 for rootful and port 8081 for rootless."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(outside_host): $ curl 192.168.99.109:8080\n   ___           __\n  / _ \\___  ___/ /_ _  ___ ____\n / ___/ _ \\/ _  /  ' \\/ _ `/ _ \\\n/_/   \\___/\\_,_/_/_/_/\\_,_/_//_/\n\n(outside_host): $ curl 192.168.99.109:8081\n   ___           __\n  / _ \\___  ___/ /_ _  ___ ____\n / ___/ _ \\/ _  /  ' \\/ _ `/ _ \\\n/_/   \\___/\\_,_/_/_/_/\\_,_/_//_/\n")),(0,a.kt)("h3",{id:"macvlan"},"Macvlan"),(0,a.kt)("p",null,"With macvlan, the container is given access to a physical network interface on the\nhost. This interface can configure multiple subinterfaces. And each subinterface\nis capable of having its own MAC and IP address. In the case of Podman containers,\nthe container will present itself as if it is on the same network as the host."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"macvlan_network",src:n(7008).Z,width:"1763",height:"803"})),(0,a.kt)("p",null,"In the illustration, outside clients will be able to access the web container by\nits IP address directly. Usually the network information, including IP address,\nis leased from a DHCP server like most other network clients on the network. If\nthe laptop is running a firewall, such as firewalld, then accommodations will need\nto be made for proper access."),(0,a.kt)("p",null,"Note that Podman has to be run as root in order to use macvlan."),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("p",null,"The following example demonstrates how to set up a web container on a macvlan and\nhow to access that container from outside the host. First, create the macvlan network.\nYou need to know the network interface on the host that connects to the routable\nnetwork. In the example case, it is eth0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo podman network create -d macvlan -o parent=eth0 webnetwork\nwebnetwork\n")),(0,a.kt)("p",null,"The next step is to ensure that the DHCP service is running. This handles\nthe DHCP leases from the network. If DHCP is not needed, the ",(0,a.kt)("inlineCode",{parentName:"p"},"--subnet")," option\ncan be used to assign a static subnet in the ",(0,a.kt)("inlineCode",{parentName:"p"},"network create")," command above."),(0,a.kt)("p",null,"CNI and netavark both use their own DHCP service; therefore, you need to know\nwhat backend you are using. To see what you are using, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo podman info --format {{.Host.NetworkBackend}}\n")),(0,a.kt)("p",null,"If this command does not work, you are using an older version prior to Podman\nv4.0 which means you are using CNI.\nIf the netavark backend is used, at least Podman v4.5 with netavark v1.6 is\nrequired to use DHCP."),(0,a.kt)("p",null,"For netavark use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo systemctl enable --now netavark-dhcp-proxy.socket\n")),(0,a.kt)("p",null,"Or if the system doesn't use systemd, start the daemon manually:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ /usr/libexec/podman/netavark dhcp-proxy --activity-timeout 0\n")),(0,a.kt)("p",null,"With CNI use:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo systemctl enable --now cni-dhcp.socket\n")),(0,a.kt)("p",null,"Or if the system doesn't use systemd, start the daemon manually:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo /usr/libexec/cni/dhcp daemon\n")),(0,a.kt)("p",null,"Note that depending on the distribution, the binary location may differ."),(0,a.kt)("p",null,"Now run the container and be certain to attach it to the network we created earlier."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo podman run -dt --name webserver --network webnetwork quay.io/libpod/banner\n03d82083c434d7e937fc0b87c25401f46ab5050007df403bf988e25e52c5cc40\n[baude@localhost ~]$ sudo podman exec webserver ip address show eth0\n2: eth0@if3: <BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN> mtu 1500 qdisc noqueue state\nUP\nlink/ether 0a:3c:e2:eb:87:0f brd ff:ff:ff:ff:ff:ff\ninet 192.168.99.186/24 brd 192.168.99.255 scope global eth0\nvalid_lft forever preferred_lft forever\ninet6 fe80::83c:e2ff:feeb:870f/64 scope link\nvalid_lft forever preferred_lft forever\n")),(0,a.kt)("p",null,"Because the container has a routable IP address (on this network) and is not being\nmanaged by firewalld, no change to the firewall is needed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(outside_host): $ curl http://192.168.99.186\n   ___           __\n  / _ \\___  ___/ /_ _  ___ ____\n / ___/ _ \\/ _  /  ' \\/ _ `/ _ \\\n/_/   \\___/\\_,_/_/_/_/\\_,_/_//_/\n")),(0,a.kt)("h3",{id:"slirp4netns"},"Slirp4netns"),(0,a.kt)("p",null,"Slirp4netns is the default network setup for rootless containers and pods. It was\ninvented because unprivileged users are not allowed to make network interfaces on\nthe host. Slirp4netns creates a TAP device in the container\u2019s network namespace\nand connects to the usermode TCP/IP stack. Consider the following illustration."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"slirp_network",src:n(8114).Z,width:"1763",height:"690"})),(0,a.kt)("p",null,"The unprivileged user on this laptop has created two containers: a DB container and\na web container. Both of these containers have the ability to access content on\nnetworks outside the laptop. And outside clients can access the containers if the\ncontainer is bound to a host port and the laptop firewall allows it. Remember, unprivileged\nusers must use ports 1024 through 65535 as lower ports require root privileges. (CAP_NET_BIND_SERVICE)\nNote: this can be adjusted using the ",(0,a.kt)("inlineCode",{parentName:"p"},"sysctl net.ipv4.ip_unprivileged_port_start")),(0,a.kt)("p",null,"One of the drawbacks of slirp4netns is that the containers are completely isolated\nfrom each other. Unlike the bridge approach, there is no virtual network. For containers\nto communicate with each other, they can use the port mappings with the host system,\nor they can be put into a Pod where they share the same network namespace. See ",(0,a.kt)("a",{parentName:"p",href:"#Communicating-between-containers-and-pods"},"Communicating\nbetween containers and pods")," for more information."),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("p",null,"The following example will show how two rootless containers can communicate with\neach other where one is a web server. Then it will show how a client on the host\u2019s\nnetwork can communicate with the rootless web server."),(0,a.kt)("p",null,"First, run the rootless web server and map port 80 from the container to a non-privileged\nport like 8080."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -dt --name webserver -p 8080:80 quay.io/libpod/banner\n17ea33ccd7f55ff45766b3ec596b990a5f2ba66eb9159cb89748a85dc3cebfe0\n")),(0,a.kt)("p",null,"Because rootless containers cannot communicate with each other directly with TCP/IP\nvia IP addresses, the host and the port mapping are used. To do so, the IP address\nof the host (interface) must be known."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ip address show eth0\n3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group\ndefault qlen 1000\nlink/ether 3c:e1:a1:c1:7a:3f brd ff:ff:ff:ff:ff:ff\naltname eth0\ninet 192.168.99.109/24 brd 192.168.99.255 scope global dynamic noprefixroute eth0\nvalid_lft 78808sec preferred_lft 78808sec\ninet6 fe80::5632:6f10:9e76:c33/64 scope link noprefixroute\nvalid_lft forever preferred_lft forever\n")),(0,a.kt)("p",null,"From another rootless container, use the host\u2019s IP address and port to communicate\nbetween the two rootless containers successfully."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -it quay.io/libpod/banner curl http://192.168.99.109:8080\n   ___           __\n  / _ \\___  ___/ /_ _  ___ ____\n / ___/ _ \\/ _  /  ' \\/ _ `/ _ \\\n/_/   \\___/\\_,_/_/_/_/\\_,_/_//_/\n")),(0,a.kt)("p",null,"From a client outside the host, the IP address and port can also be used:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(outside_host): $ curl http://192.168.99.109:8080\n   ___           __\n  / _ \\___  ___/ /_ _  ___ ____\n / ___/ _ \\/ _  /  ' \\/ _ `/ _ \\\n/_/   \\___/\\_,_/_/_/_/\\_,_/_//_/\n")),(0,a.kt)("h2",{id:"communicating-between-containers-and-pods"},"Communicating between containers and pods"),(0,a.kt)("p",null,"Most users of containers have a decent understanding of how containers communicate\nwith each other and the rest of the world. Usually each container has its own IP\naddress and networking information. They communicate amongst each other using regular\nTCP/IP means like IP addresses or, in many cases, using DNS names often based on\nthe container name. But pods are a collection of one or more containers, and with\nthat, some uniqueness is inherited."),(0,a.kt)("p",null,"By definition, all containers in a Podman pod share the same network namespace. This\nfact means that they will have the same IP address, MAC addresses, and port mappings.\nYou can conveniently communicate between containers in a pod by using localhost."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"slirp_network",src:n(4075).Z,width:"1763",height:"891"})),(0,a.kt)("p",null,"The above illustration describes a Pod on a bridged network. As depicted, the Pod\nhas two containers \u201cinside\u201d it: a DB and a Web container. Because they share the\nsame network namespace, the DB and Web container can communicate with each other\nusing localhost (127.0.0.1). Furthermore, they are also both addressable by the\nIP address (and DNS name if applicable) assigned to the Pod itself."),(0,a.kt)("p",null,"For more information on container to container networking, see ",(0,a.kt)("a",{parentName:"p",href:"https://www.redhat.com/sysadmin/container-networking-podman"},"Configuring container\nnetworking with Podman"),"."))}u.isMDXComponent=!0},2766:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/podman_bridge-1ecb9328c2c64f32c40156852022fe07.png"},7008:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/podman_macvlan-3dabd282ec362fc8bf5470056267115e.png"},4075:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/podman_pod-365db7b52c63370bbb74793bac95b92b.png"},8114:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/podman_rootless_default-413b87b13d8cc01d6a4e86aef6a517df.png"}}]);