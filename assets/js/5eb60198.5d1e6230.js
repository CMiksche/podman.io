"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[91043],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(n),h=a,m=c["".concat(l,".").concat(h)]||c[h]||p[h]||r;return n?o.createElement(m,s(s({ref:t},d),{},{components:n})):o.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:a,s[1]=i;for(var u=2;u<r;u++)s[u]=n[u];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},83307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var o=n(87462),a=(n(67294),n(3905));const r={title:"First Look&#58; Rootless Containers and cgroup v2 on Fedora 31",layout:"default",author:"tsweeney",categories:["blogs"],tags:["podman","containers","hpc","rootless","crun"]},s=void 0,i={permalink:"/blogs/2019/10/29/podman-crun-f31",source:"@site/blog/2019-10-29-podman-crun-f31.md",title:"First Look&#58; Rootless Containers and cgroup v2 on Fedora 31",description:"podman logo",date:"2019-10-29T00:00:00.000Z",formattedDate:"October 29, 2019",tags:[{label:"podman",permalink:"/blogs/tags/podman"},{label:"containers",permalink:"/blogs/tags/containers"},{label:"hpc",permalink:"/blogs/tags/hpc"},{label:"rootless",permalink:"/blogs/tags/rootless"},{label:"crun",permalink:"/blogs/tags/crun"}],readingTime:7.41,hasTruncateMarker:!0,authors:[{name:"tsweeney"}],frontMatter:{title:"First Look&#58; Rootless Containers and cgroup v2 on Fedora 31",layout:"default",author:"tsweeney",categories:["blogs"],tags:["podman","containers","hpc","rootless","crun"]},prevItem:{title:"First Look&#58; Rootless Containers and cgroup v2 on Fedora 31",permalink:"/blogs/2019/10/29/new"},nextItem:{title:"Podman and NFS",permalink:"/blogs/2019/10/28/new"}},l={authorsImageUrls:[void 0]},u=[{value:"By Tom Sweeney GitHub",id:"by-tom-sweeney-github",level:2}],d={toc:u},c="wrapper";function p(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"podman logo",src:n(1382).Z,width:"228",height:"61"})),(0,a.kt)("h1",{id:"first-look-rootless-containers-and-cgroup-v2-on-fedora-31"},"First Look",":"," Rootless Containers and cgroup v2 on Fedora 31"),(0,a.kt)("h2",{id:"by-tom-sweeney-github"},"By Tom Sweeney ",(0,a.kt)("a",{parentName:"h2",href:"https://github.com/TomSweeneyRedhat"},"GitHub")),(0,a.kt)("p",null,"I often times stay up too late at night watching late night television and run into these crazy commercials that tell you how easy their product is to use. If you\u2019ve stayed up too, you know them as well. Just put your chicken and veggies in our oven, press 3 buttons and 45 minutes later a perfectly cooked meal! Easy! Got a leak? Slap on this tape and no more leak! Easy! Got a messy floor, just use this sweeper and you\u2019ve the cleanest floor in the neighborhood! Easy!"),(0,a.kt)("p",null,"Podman runs secure rootless containers and it really is easy! Trust me, I\u2019m not like those other folks! As we\u2019ve had a number of people asking us about what\u2019s needed to set Podman rootless containers up, I decided to run through the process myself and to blog about the steps I took."),(0,a.kt)("p",null,"The first bit of the work has to be done as either the root user or someone with root privileges. For this walkthrough I used the root user on the console and the first thing I did was to upgrade my Fedora 30 Virtual Machine (VM) to Fedora 31. If you want to install Fedora 31 directly, the beta version just became available at the time of this writing, you could do that instead. The steps to do the upgrade are:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# dnf -y upgrade --refresh\n# dnf -y install dnf-plugin-system-upgrade\n# dnf -y system-upgrade download --releasever=31\n# dnf system-upgrade reboot\n")),(0,a.kt)("p",null,"After the machine finished rebooting, my VM was running Fedora 31 so now I needed to install Podman with ",(0,a.kt)("inlineCode",{parentName:"p"},"dnf -y install podman"),". After that completes, verify that you have Podman Version 1.6.2 or higher."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# podman version\nVersion:            1.6.2\nRemoteAPI Version:  1\nGo Version:         go1.13.1\nOS/Arch:            linux/amd64\n")),(0,a.kt)("p",null,"Now I\u2019m going to follow the steps in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md"},"Basic Setup and Use of Podman in a Rootless environments")," tutorial to do the configuration necessary to run rootless containers."),(0,a.kt)("p",null,"Podman running rootless containers does have a few software dependencies. Most if not all of these should be installed for you on Fedora 31 by default, but just to verify I did:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# dnf -y install slirp4netns fuse-overlayfs\nLast metadata expiration check: 0:02:26 ago on Sat 14 Sep 2019 07:56:03 PM EDT.\nPackage slirp4netns-0.4.0-20.1.dev.gitbbd6f25.fc31.x86_64 is already installed.\nPackage fuse-overlayfs-0.6.2-2.git67a4afe.fc31.x86_64 is already installed.\nDependencies resolved.\nNothing to do.\nComplete!\n")),(0,a.kt)("p",null,"Now the user namespaces need to be setup. Rootless Podman requires the user running it to have a range of UIDs and GIDs listed in the /etc/subuid and /etc/subgid files. These files control which UIDs and GIDs the user is allocated to use on the system. Depending upon how your user was first created, these files may already have entries in them for your user. If so, you don\u2019t need to do anything else. If not, then you can edit either file directly, or you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"useradd")," to create the user and allocate entries in both files, or you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"usermod")," command to allocate them for a preexisting user. In this example usermod has allocated the values from 10000 to 55537 for the local \u201ctom\u201d account to use in our system."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# usermod -v 10000-65536 -w 10000-65536 tom\n\n# cat /etc/subuid\ntom:10000:55537\n\n# cat /etc/subgid\ntom:10000:55537\n")),(0,a.kt)("p",null,"If you have multiple users, you\u2019ll need to be sure that the ranges that are assigned to them in either ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/subuid")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"/etc/subgid")," don\u2019t overlap or they could gain control of the other persons containers in that overlap."),(0,a.kt)("p",null,"Now we\u2019re done running with a privileged account. From here on out we can run as a non-privileged user, so I next opened up a new terminal and ssh\u2019d into the host using the non-privileged \u2018tom\u2019 account:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ ssh tom@192.168.122.228\ntom@192.168.122.228's password:\n")),(0,a.kt)("p",null,"The first thing to do is to check for the ",(0,a.kt)("inlineCode",{parentName:"p"},"crun")," command."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# whereis crun\ncrun: /usr/bin/crun /usr/share/man/man1/crun.1.gz\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"crun")," command is the runtime the allows for cgroup V2 support and is supplied starting with Fedora 31. Other container systems use the ",(0,a.kt)("inlineCode",{parentName:"p"},"runc")," runtime. However, runc only supports cgroup V1. The cgroup kernel feature allows you to allocate resources such as CPU time, network bandwidth and system memory to a container. Version 1 of cgroup only supports containers that are run by root, while version 2 supports containers that are run by root or a non-privileged user."),(0,a.kt)("p",null,"A few tweaks to the \u2018tom\u2019 account config files may be needed, in most cases these files will not need tweaking, but let\u2019s verify them. The first up is libpod.conf and to get a default variant of that file, just run ",(0,a.kt)("inlineCode",{parentName:"p"},"podman info")," first."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman info\n$ vi .config/containers/libpod.conf\n")),(0,a.kt)("p",null,"And if it\u2019s not already set, set the ",(0,a.kt)("inlineCode",{parentName:"p"},"runtime")," option in libpod.conf to \u201ccrun\u201d."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'runtime = "crun"\n')),(0,a.kt)("p",null,"Then in ",(0,a.kt)("inlineCode",{parentName:"p"},".config/containers/storage.conf")," make sure the ",(0,a.kt)("inlineCode",{parentName:"p"},"mount_program = \u201c/usr/bin/fuse-overlayfs\u201d")," line is uncommented."),(0,a.kt)("p",null,"Just that easy, you\u2019re ready to run Rootless Podman. See I told you I\u2019m not like those other guys! Let\u2019s try setting up a rootless container running httpd. Let\u2019s create this Dockerfile in the local directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ cat Dockerfile\nFROM registry.access.redhat.com/ubi8/ubi:8.0\n\nMAINTAINER Podman Mailing List <podman@lists.podman.io>\nENV DOCROOT=/var/www/html\n\nRUN yum --disableplugin=subscription-manager --nodocs -y install httpd \\\n  && yum --disableplugin=subscription-manager clean all \\\n  && echo "Hello from the httpd-parent container!" > ${DOCROOT}/index.html\n\nEXPOSE 80\n\nCMD httpd -D FOREGROUND\n')),(0,a.kt)("p",null,"And now build using it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$  podman build -t myhttp .\nSTEP 1: FROM registry.access.redhat.com/ubi8/ubi:8.0\nGetting image source signatures\nCopying blob 641d7cc5cbc4 done\nCopying blob c65691897a4d done\nCopying config 11f9dba4d1 done\nWriting manifest to image destination\nStoring signatures\nSTEP 2: MAINTAINER Podman Mailing List <podman@lists.podman.io>\nbed974e664909b511f14e2cc21a59642c81fd1d958db12d7ef8fdc1e74f3d364\nSTEP 3: ENV DOCROOT=/var/www/html\n5eee83e1e640a4aa2c5f39caa11c3a24ec22e37f99633c2ee9912e8f65a5ff81\nSTEP 4: RUN yum --disableplugin=subscription-manager --nodocs -y install httpd   && yum --disableplugin=subscription-manager clean all   && echo "Hello from the httpd-parent container!" > ${DOCROOT}/index.html\nRed Hat Universal Base Image 8 (RPMs) - AppStre 1.0 MB/s | 2.3 MB     00:02\nRed Hat Universal Base Image 8 (RPMs) - BaseOS  769 kB/s | 754 kB     00:00\nDependencies resolved.\n{A number of normal yum output lines removed for brevity}\nInstalled:\n  httpd-2.4.37-12.module+el8.0.0+4096+eb40e6da.x86_64\n  apr-util-openssl-1.6.1-6.el8.x86_64\n  apr-util-bdb-1.6.1-6.el8.x86_64\n  apr-1.6.3-9.el8.x86_64\n  apr-util-1.6.1-6.el8.x86_64\n  httpd-tools-2.4.37-12.module+el8.0.0+4096+eb40e6da.x86_64\n  mod_http2-1.11.3-3.module+el8.0.0+4096+eb40e6da.x86_64\n  httpd-filesystem-2.4.37-12.module+el8.0.0+4096+eb40e6da.noarch\n  mailcap-2.1.48-3.el8.noarch\n  redhat-logos-httpd-80.7-1.el8.noarch\n\nComplete!\n16 files removed\n45fcaaf719615e97190bf38aa9d8d06e5437f0e10741343fd318777647584d6f\nSTEP 5: EXPOSE 80\n865abb5a809cb0ffbc63fef2def892595fe54cfeffc67013a0096a5f0fff4b27\nSTEP 6: CMD httpd -D FOREGROUND\nSTEP 7: COMMIT myhttp\nf8d0bf10faa0460a111283a51d95e94421d1a46a21bca7f6f43a762469504593\n')),(0,a.kt)("p",null,"Now to verify the myhttp image has been created:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman images\nREPOSITORY                            TAG      IMAGE ID       CREATED         SIZE\nlocalhost/myhttp                      latest   a76baf5989a3   2 minutes ago   236 MB\nregistry.access.redhat.com/ubi8/ubi   8.0      11f9dba4d1bc   5 weeks ago     216 MB\n")),(0,a.kt)("p",null,"Let\u2019s now run our container and check that the http server is responding:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --detach --name myhttp_ctr localhost/myhttp 30d8b54f63c5d2a8ecbe30b56546082e32e701a87c98df81ee0d2565ed33db72\n$ curl localhost\ncurl: (7) Failed to connect to localhost port 80: Connection refused\n")),(0,a.kt)("p",null,"But wait! Why did the curl command fail rather than return our index.html output from our webserver? That\u2019s because we\u2019re running a rootless container and the user running this container doesn\u2019t have the privilege to connect to the container host\u2019s port 80 for the webserver. So how can we be certain that the webserver is up and running? First let\u2019s see if the container is up:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman ps\nCONTAINER ID  IMAGE                    COMMAND               CREATED        STATUS            PORTS  NAMES\n30d8b54f63c5  localhost/myhttp:latest  /bin/sh -c httpd ...  3 minutes ago  Up 3 minutes ago         myhttp_ctr\n")),(0,a.kt)("p",null,"The container appears to be up and running. Let\u2019s exec into it and see if we can resolve the web server from inside of the container:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman exec -it myhttp_ctr /bin/bash\nbash-4.4# curl localhost\nHello from the httpd-parent container!\n")),(0,a.kt)("p",null,"We\u2019ve made contact with our web server from within the container. Granted this is not the most useful example from a real world side of things. However, it does show how a rootless container is able to run while the administrator of the host can build a good secure separation from the rootless container. Rootless containers keep unprivileged users from running or controlling things they should not on the host."),(0,a.kt)("p",null,"Setting up a host to run rootless containers using Podman is a relatively painless process. Out of the box the only thing that may need to be done is to add entries in the /etc/subuid and /etc/subgid files for users that will be running containers. That\u2019s it! We did a little more checking on the files above, but that wasn\u2019t required. Once the user has those entries created for them, they can run containers in their own space without controlling things on the host that they should not. It really is just that easy, and best yet, you didn\u2019t even have to stay up late at night so you could call now \u201cFor just $19.99 we\u2019ll give you rootless containers and if you sign up now, you can run them safely too!\u201d. Instead, rootless containers are there and ready for your use starting in Podman v1.6.2 right now."))}p.isMDXComponent=!0},1382:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/podman-ce586c2894883ad9c353492b5e1893a8.svg"}}]);