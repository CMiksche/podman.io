"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[93716],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return t?a.createElement(f,i(i({ref:n},p),{},{components:t})):a.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},92116:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={title:"Podman container|image exists",layout:"default",author:"baude",categories:["blogs"],tags:["podman","containers"]},i=void 0,s={permalink:"/blog/2018/11/27/podman-exists",source:"@site/blog/2018-11-27-podman-exists.md",title:"Podman container|image exists",description:"podman logo",date:"2018-11-27T00:00:00.000Z",formattedDate:"November 27, 2018",tags:[{label:"podman",permalink:"/blog/tags/podman"},{label:"containers",permalink:"/blog/tags/containers"}],readingTime:2.165,hasTruncateMarker:!0,authors:[{name:"baude"}],frontMatter:{title:"Podman container|image exists",layout:"default",author:"baude",categories:["blogs"],tags:["podman","containers"]},prevItem:{title:"Simplifying Podman commands with labels",permalink:"/blog/2018/12/03/podman-runlabel"},nextItem:{title:"Build Podman RPMs with a container image",permalink:"/blog/2018/11/19/build_libpod-container-images"}},l={authorsImageUrls:[void 0]},c=[{value:"By Brent Baude GitHub",id:"by-brent-baude-github",level:2},{value:"Solution",id:"solution",level:3},{value:"Check on an images",id:"check-on-an-images",level:3},{value:"Check on a container",id:"check-on-a-container",level:3}],p={toc:c},m="wrapper";function u(e){let{components:n,...r}=e;return(0,o.kt)(m,(0,a.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"podman logo",src:t(1382).Z,width:"228",height:"61"})),(0,o.kt)("h1",{id:"podman-containerimage-exists"},"Podman container|image exists"),(0,o.kt)("h2",{id:"by-brent-baude-github"},"By Brent Baude ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/baude"},"GitHub")),(0,o.kt)("p",null,"We are seeing a proliferation of Podman usage in users' daily workflows. As such, these workflows are often scripted -- in something like bash -- and clear exit codes from the applications being run are paramount. One of the tasks we often see is a user wanting to verify if an image or a container exists in local storage. We saw several different approaches approaches to solving this including running ",(0,o.kt)("inlineCode",{parentName:"p"},"podman ps")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"podman images")," with filters or complex uses of grep."),(0,o.kt)("h3",{id:"solution"},"Solution"),(0,o.kt)("p",null,"After a bit of discussion with our users, recorded in ","[issue #1845]"," (",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/issues/1845"},"https://github.com/containers/podman/issues/1845"),"), a plan was hatched to have a specific command that satisfies this use case. It was implemented for both containers and images; and I suppose if users wish, we could implement it for pods as well. If the image or container exists, Podman will return an exit code of ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),". If it does not exist, Podman will return an exit code of ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),". Any other exit code can be attributed to non-verification failures like permissions or failure in reading local storage."),(0,o.kt)("h3",{id:"check-on-an-images"},"Check on an images"),(0,o.kt)("p",null,"To verify the existence of an image in your local storage, you can use the command ",(0,o.kt)("inlineCode",{parentName:"p"},"podman image exists <IMAGE_NAME>"),". Let's clarify through the use of an example."),(0,o.kt)("p",null,"The images we have in our local storage are as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo podman images\nREPOSITORY                   TAG      IMAGE ID       CREATED        SIZE\ndocker.io/library/alpine     latest   196d12cf6ab1   2 months ago   4.67 MB\n")),(0,o.kt)("p",null,"If we wanted to verify the existence of the image ",(0,o.kt)("inlineCode",{parentName:"p"},"docker.io/library/alpine:latest"),", we would:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo podman image exists docker.io/library/alpine:latest\n$ echo $?\n0\n")),(0,o.kt)("p",null,"You can also verify by short-name if preferable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo podman image exists alpine\n$ echo $?\n0\n")),(0,o.kt)("p",null,"You can also verify an image by an image's full or shortened ID."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo podman image exists 196d12cf6ab1\n$ echo $?\n0\n")),(0,o.kt)("p",null,"And finally, a failure to verify example would look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo podman image exists busybox\n$ echo $?\n1\n")),(0,o.kt)("h3",{id:"check-on-a-container"},"Check on a container"),(0,o.kt)("p",null,"We can verify the existence of a container in much the same way as an image. The grammar differs slightly."),(0,o.kt)("p",null,"My system has the following container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ sudo podman ps --format {% raw %}"{{.ID}} {{.Names}}"{% endraw %}\n472fde2f48c7 foobar\n')),(0,o.kt)("p",null,"And I can verify the existence of the container with ",(0,o.kt)("inlineCode",{parentName:"p"},"podman container exists <CONTAINER_NAME>"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo podman container exists foobar\n$ echo $?\n0\n")),(0,o.kt)("p",null,"Like images, you can also verify a container using its full or partial container ID."))}u.isMDXComponent=!0},1382:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/podman-ce586c2894883ad9c353492b5e1893a8.svg"}}]);