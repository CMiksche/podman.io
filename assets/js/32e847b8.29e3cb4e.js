"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[98498],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),d=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(i.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=d(n),u=r,m=h["".concat(i,".").concat(u)]||h[u]||p[u]||o;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[h]="string"==typeof e?e:r,s[1]=l;for(var d=2;d<o;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2209:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o={title:"Why can\u2019t I delete storage files created by non-root podman?",layout:"default",author:"dwalsh",categories:["blogs"],tags:["podman","containers"]},s=void 0,l={permalink:"/blogs/2018/10/03/podman-remove-content-homedir",source:"@site/blog/2018-10-03-podman-remove-content-homedir.md",title:"Why can\u2019t I delete storage files created by non-root podman?",description:"podman logo",date:"2018-10-03T00:00:00.000Z",formattedDate:"October 3, 2018",tags:[{label:"podman",permalink:"/blogs/tags/podman"},{label:"containers",permalink:"/blogs/tags/containers"}],readingTime:4.41,hasTruncateMarker:!0,authors:[{name:"dwalsh"}],frontMatter:{title:"Why can\u2019t I delete storage files created by non-root podman?",layout:"default",author:"dwalsh",categories:["blogs"],tags:["podman","containers"]},prevItem:{title:"SELinux blocks Podman container from talking to libvirt",permalink:"/blogs/2018/10/04/selinux-libvirt"},nextItem:{title:"Replacing Docker with Podman",permalink:"/blogs/2018/10/01/talk-replace-docker-with-podman"}},i={authorsImageUrls:[void 0]},d=[{value:"By Dan Walsh GitHub",id:"by-dan-walsh-github",level:2},{value:"Cool things you can do with Podman",id:"cool-things-you-can-do-with-podman",level:2},{value:"<code>Buildah unshare</code> or <code>rootlesskit  bash</code>",id:"buildah-unshare-or-rootlesskit--bash",level:3},{value:"I am able to delete all the files in my homedir.",id:"i-am-able-to-delete-all-the-files-in-my-homedir",level:3}],c={toc:d},h="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(h,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"podman logo",src:n(1382).Z,width:"228",height:"61"})),(0,r.kt)("h1",{id:"why-cant-i-delete-storage-files-created-by-non-root-podman"},"Why can\u2019t I delete storage files created by non-root Podman?"),(0,r.kt)("h2",{id:"by-dan-walsh-github"},"By Dan Walsh ",(0,r.kt)("a",{parentName:"h2",href:"https://github.com/rhatdan"},"GitHub")),(0,r.kt)("h2",{id:"cool-things-you-can-do-with-podman"},"Cool things you can do with Podman"),(0,r.kt)("p",null,"When running ",(0,r.kt)("a",{parentName:"p",href:"https://podman.io"},"Podman")," as root, the default location for storage is /var/lib/containers/storage. Of course, users cannot use this directory when running as non root, so Podman creates the storage by default in $HOME/.local/share/containers."),(0,r.kt)("p",null,"When Podman creates this storage it is running inside of a user namespace and is allowed to create UIDs and GIDs based off the UID ranges stored in /etc/subuid and the GIDs listed in /etc/subgid."),(0,r.kt)("p",null,"For example my account has UID and GID ranges 100000 through 165535 reserved for it, as well as my UID and primary GID, 3267."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"#grep dwalsh /etc/subuid\ndwalsh:100000:65536\n$ grep dwalsh /etc/subgid\ndwalsh:100000:65536\n")),(0,r.kt)("p",null,"When Podman starts a container as non root, by default, it maps my UID, 3267, to UID 0 inside of the container, then it maps 100,000->1, 100,001->2, 100,002->3 \u2026 165,535->65536."),(0,r.kt)("p",null,"You can see this mapping inside of the container"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman run -ti fedora cat  /proc/self/uid_map\n     0       3267          1\n     1     100000     65536\n$ podman run -ti fedora cat  /proc/self/gid_map\n     0       3267          1\n     1     100000     65536\n")),(0,r.kt)("p",null,"Since I\u2019m root in the container, I can create and set ownership of files inside of the container for using any UIDs and GIDs that are mapped into the container."),(0,r.kt)("p",null,"To see what happens, I will create a file and directory owned by a non root user inside of a container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'podman run -ti --name testfile fedora bash -c "mkdir /testdir; touch /testdir/testfile; chown -R 1:1 /testdir"\n')),(0,r.kt)("p",null,"Since that was successful, let\u2019s mount the container and see what it looks like from outside of the user namespace that\u2019s used for running the container."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ mnt=$(podman mount testfile)\n$ echo $mnt\n/home/dwalsh/.local/share/containers/storage/vfs/dir/691e874b6e1ba6807ecbe73910396b10f118617233aacc3df3297ffc4e1332f9\n$ ls -l $mnt\ntotal 4\nlrwxrwxrwx.  1 dwalsh dwalsh    7 Feb  7  2018 bin -> usr/bin\ndr-xr-xr-x.  2 dwalsh dwalsh    6 Feb  7  2018 boot\ndrwxr-xr-x.  2 dwalsh dwalsh    6 Apr 26 09:03 dev\ndrwxr-xr-x. 44 dwalsh dwalsh 4096 Apr 26 09:03 etc\ndrwxr-xr-x.  2 dwalsh dwalsh    6 Feb  7  2018 home\nlrwxrwxrwx.  1 dwalsh dwalsh    7 Feb  7  2018 lib -> usr/lib\nlrwxrwxrwx.  1 dwalsh dwalsh    9 Feb  7  2018 lib64 -> usr/lib64\ndrwx------.  2 dwalsh dwalsh    6 Apr 26 09:03 lost+found\ndrwxr-xr-x.  2 dwalsh dwalsh    6 Feb  7  2018 media\ndrwxr-xr-x.  2 dwalsh dwalsh    6 Feb  7  2018 mnt\ndrwxr-xr-x.  2 dwalsh dwalsh    6 Feb  7  2018 opt\ndrwxr-xr-x.  2 dwalsh dwalsh    6 Apr 26 09:03 proc\ndr-xr-x---.  2 dwalsh dwalsh  162 Apr 26 09:03 root\ndrwxr-xr-x. 11 dwalsh dwalsh  169 Sep 25 09:11 run\nlrwxrwxrwx.  1 dwalsh dwalsh    8 Feb  7  2018 sbin -> usr/sbin\ndrwxr-xr-x.  2 dwalsh dwalsh    6 Feb  7  2018 srv\ndrwxr-xr-x.  2 dwalsh dwalsh    6 Apr 26 09:03 sys\ndrwxr-xr-x.  2 100000 100000   22 Sep 25 13:38 testdir\ndrwxrwxrwt.  2 dwalsh dwalsh   32 Apr 26 09:03 tmp\ndrwxr-xr-x. 12 dwalsh dwalsh  144 Apr 26 09:03 usr\ndrwxr-xr-x. 19 dwalsh dwalsh  249 Apr 26 09:03 var\n")),(0,r.kt)("p",null,"Notice the ownership of testdir and testfile. The namespace that was used for running the container mapped UID 100000 from outside of the namespace to UID 1 inside of the namespace, and did the same for GID 100000, mapping it to GID 1 inside of the namespace. When I set the ownership to UID and GID 1 from inside of the namespace, the corresponding values from outside of the namespace were what were recorded to disk."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ ls -la $mnt/testdir\ntotal 0\ndrwxr-xr-x.  2 100000 100000  22 Sep 25 13:38 .\ndrwxr-xr-x. 19 dwalsh dwalsh 257 Sep 25 13:38 ..\n-rw-r--r--.  1 100000 100000   0 Sep 25 13:38 testfile\n")),(0,r.kt)("p",null,"If i just try to clean up my directory I will get lots of errors."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"rm -rf .local/share/containers/ 2>&1 | head -2\nrm: cannot remove '.local/share/containers/storage/vfs/dir/891e1e4ef82ad02a4ea1f030831f942d722c7694c4db64ca3239c8163b811c58/bin': Permission denied\nrm: cannot remove '.local/share/containers/storage/vfs/dir/891e1e4ef82ad02a4ea1f030831f942d722c7694c4db64ca3239c8163b811c58/boot': Permission denied\n")),(0,r.kt)("p",null,"This is because this content was created from inside of a user namespace where I was UID 0, and because I was UID 0 in that namespace, I could set and change ownership of anything owned by any ID that was mapped into the namespace. In this case, I assigned it an owner that wasn\u2019t mapped to my own user. Once I left the namespace, and I was back in the host namespace where I was just myself again, the contents belonged to the UID that I had mapped to 1 for the user namespace, which wasn\u2019t my own UID."),(0,r.kt)("p",null,"Because of this, if I wanted to clean it all up, I could become root to remove the directory. But if I don\u2019t have root on the machine, what could I do?"),(0,r.kt)("h3",{id:"buildah-unshare-or-rootlesskit--bash"},(0,r.kt)("inlineCode",{parentName:"h3"},"Buildah unshare")," or ",(0,r.kt)("inlineCode",{parentName:"h3"},"rootlesskit  bash")),(0,r.kt)("p",null,"Well currently ",(0,r.kt)("a",{parentName:"p",href:"https://buildah.io"},"Buildah")," or ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rootless-containers/rootlesskit"},"rootlesskit")," can put you into the user namespace without launching a container and then you can remove the images."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ buildah unshare\n[root@localhost ~]# id\nuid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\n")),(0,r.kt)("p",null,"I am now root inside of a namespace with the same mappings I\u2019d use for a container, but everything else is the same. In particular, I\u2019m not using the container\u2019s root filesystem."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[root@localhost ~]# pwd\n/home/dwalsh\n[root@localhost ~]# rm -rf .local/share/containers/\n[root@localhost ~]#\n")),(0,r.kt)("h3",{id:"i-am-able-to-delete-all-the-files-in-my-homedir"},"I am able to delete all the files in my homedir."))}p.isMDXComponent=!0},1382:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/podman-ce586c2894883ad9c353492b5e1893a8.svg"}}]);