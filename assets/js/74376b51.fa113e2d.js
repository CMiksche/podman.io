"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[81960],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(t),d=o,u=p["".concat(l,".").concat(d)]||p[d]||h[d]||r;return t?a.createElement(u,i(i({ref:n},m),{},{components:t})):a.createElement(u,i({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2857:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={title:"Bioinformatics with rootless Podman",layout:"default",author:"bhepworth",categories:["blogs"],tags:["bioinformatics","rootless","podman"]},i=void 0,s={permalink:"/blogs/2020/01/15/bioinformatics-with-rootless-podman",source:"@site/blog/2020-01-15-bioinformatics-with-rootless-podman.md",title:"Bioinformatics with rootless Podman",description:"podman logo",date:"2020-01-15T00:00:00.000Z",formattedDate:"January 15, 2020",tags:[{label:"bioinformatics",permalink:"/blogs/tags/bioinformatics"},{label:"rootless",permalink:"/blogs/tags/rootless"},{label:"podman",permalink:"/blogs/tags/podman"}],readingTime:9.82,hasTruncateMarker:!0,authors:[{name:"bhepworth"}],frontMatter:{title:"Bioinformatics with rootless Podman",layout:"default",author:"bhepworth",categories:["blogs"],tags:["bioinformatics","rootless","podman"]},prevItem:{title:"New API coming for Podman",permalink:"/blogs/2020/01/17/podman-new-api"},nextItem:{title:"Bioinformatics and rootless containers with Podman",permalink:"/blogs/2020/01/15/new"}},l={authorsImageUrls:[void 0]},c=[{value:"By Valentin Rothberg GitHub",id:"by-valentin-rothberg-github",level:2}],m={toc:c},p="wrapper";function h(e){let{components:n,...r}=e;return(0,o.kt)(p,(0,a.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"podman logo",src:t(1382).Z,width:"228",height:"61"})),(0,o.kt)("h1",{id:"bioinformatics-with-rootless-podman"},"Bioinformatics with rootless podman"),(0,o.kt)("h2",{id:"by-valentin-rothberg-github"},"By Valentin Rothberg ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/BryanHepworth"},"GitHub")),(0,o.kt)("p",null,"Over the last 10 years I've seen machines and workflows evolve where I work. From the initial dedicated server, to hpc environments\nand now the latest instance, containers."),(0,o.kt)("p",null,"From an admin point of view this is great - The initial servers had to be carefully built and maintained so that everything would work nicely together. Incompatible programs at that time were run through a VM until such time as they could be folded in to the mix."),(0,o.kt)("p",null,"The HPC's had versioned software and environment modules and were built to load the relevant dependencies at run time."),(0,o.kt)("p",null,"Now we are into a new era, containers - and not just any old containers, but containers that end users can build and run up fairly\nquickly to perform what-if's, and move on quickly through iterations until they perform the required functions."),(0,o.kt)("p",null,"Podman has developed very rapidly and is incredibly easy to use. You can use it in conjunction with quay.io or run it on a local machine."),(0,o.kt)("p",null,"I should add that Adrian Reber gave a ",(0,o.kt)("a",{parentName:"p",href:"https://youtu.be/TtHSNsbU24E"},"talk")," and has also created a Podman ",(0,o.kt)("a",{parentName:"p",href:"https://podman.io/blogs/2019/09/26/podman-in-hpc.html"},"article")," using openhpc; well worth a watch and a read."),(0,o.kt)("p",null,"If you don't have a RedHat Developer Subscription now is an ideal time to get one:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://developers.redhat.com/articles/getting-red-hat-developer-subscription-what-rhel-users-need-know/"},"https://developers.redhat.com/articles/getting-red-hat-developer-subscription-what-rhel-users-need-know/")),(0,o.kt)("p",null,"..and download RedHat Enterprise 8.1"),(0,o.kt)("p",null,"Do a Standard RedHat GUI Server default install"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yum update\nyum module install container-tools\n")),(0,o.kt)("p",null,"RedHat 8.1 does rootless containers right out of the box. If you created a user during the setup, it'll have the details in /etc/subuid and /etc/subgid already."),(0,o.kt)("p",null,"Log in with your userID and you can start creating a container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"podman pull ubi8/ubi\npodman run --interactive --tty ubi8/ubi bash\n")),(0,o.kt)("p",null,"The first command pulls down the ubi8 Universal Base Image, which is a great building block. The second command starts an interactive ubi8 image at a bash prompt. You can run any commands you like in this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo ~]$ podman run --interactive --tty ubi8/ubi bash\n[root@f471459c7619 /]# cat /etc/redhat-release\nRed Hat Enterprise Linux release 8.1 (Ootpa)\n[root@f471459c7619 /]#\n\n")),(0,o.kt)("p",null,"Notice how the prompt changed from nbh23@colombo to root@f471459c7619 - the f471459c7619 is the part to remember, we'll interact with that later on in this post. It's a random allocation, so your instance will be different."),(0,o.kt)("p",null,"The Podman help menu's are excellent, podman -h gives you a list of subcommands, which you can then also query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo ~]$ podman -h\nmanage pods and images\n\nUsage:\n  podman [flags]\n  podman [command]\n\nAvailable Commands:\n  attach      Attach to a running container\n  build       Build an image using instructions from Dockerfiles\n  commit      Create new image based on the changed container\n  container   Manage Containers\n  cp          Copy files/folders between a container and the local filesystem\n  create      Create but do not start a container\n  diff        Inspect changes on container's file systems\n  events      Show podman events\n  exec        Run a process in a running container\n  export      Export container's filesystem contents as a tar archive\n  generate    Generated structured data\n  healthcheck Manage Healthcheck\n  help        Help about any command\n  history     Show history of a specified image\n  image       Manage images\n  images      List images in local storage\n  import      Import a tarball to create a filesystem image\n  info        Display podman system information\n  init        Initialize one or more containers\n  inspect     Display the configuration of a container or image\n  kill        Kill one or more running containers with a specific signal\n  load        Load an image from container archive\n  login       Login to a container registry\n  logout      Logout of a container registry\n  logs        Fetch the logs of a container\n  mount       Mount a working container's root filesystem\n  pause       Pause all the processes in one or more containers\n  play        Play a pod\n  pod         Manage pods\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image from a registry\n  push        Push an image to a specified destination\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Removes one or more images from local storage\n  run         Run a command in a new container\n  save        Save image to an archive\n  search      Search registry for image\n  start       Start one or more containers\n  stats       Display a live stream of container resource usage statistics\n  stop        Stop one or more containers\n  system      Manage podman\n  tag         Add an additional name to a local image\n  top         Display the running processes of a container\n  umount      Unmounts working container's root filesystem\n  unpause     Unpause the processes in one or more containers\n  unshare     Run a command in a modified user namespace\n  varlink     Run varlink interface\n  version     Display the Podman Version Information\n  volume      Manage volumes\n  wait        Block on one or more containers\n\nFlags:\n      --cgroup-manager string        Cgroup manager to use (cgroupfs or systemd, default systemd)\n      --cni-config-dir string        Path of the configuration directory for CNI networks\n      --config string                Path of a libpod config file detailing container server configuration options\n      --conmon string                Path of the conmon binary\n      --cpu-profile string           Path for the cpu profiling results\n      --default-mounts-file string   Path to default mounts file\n      --events-backend string        Events backend to use\n      --help                         Help for podman\n      --hooks-dir strings            Set the OCI hooks directory path (may be set multiple times)\n      --log-level string             Log messages above specified level: debug, info, warn, error, fatal or panic (default \"error\")\n      --namespace string             Set the libpod namespace, used to create separate views of the containers and pods on the system\n      --network-cmd-path string      Path to the command for configuring the network\n      --root string                  Path to the root directory in which data, including images, is stored\n      --runroot string               Path to the 'run directory' where all state information is stored\n      --runtime string               Path to the OCI-compatible binary used to run containers, default is /usr/bin/runc\n      --storage-driver string        Select which storage driver is used to manage storage of images and containers (default is overlay)\n      --storage-opt stringArray      Used to pass an option to the storage driver\n      --syslog                       Output logging information to syslog as well as the console\n      --tmpdir string                Path to the tmp directory\n      --trace                        Enable opentracing output\n      --version                      Version for podman\n\nUse \"podman [command] --help\" for more information about a command.\n[nbh23@colombo ~]$ podman image -h\nManage images\n\nUsage:\n  podman image [command]\n\nAvailable Commands:\n  build       Build an image using instructions from Dockerfiles\n  exists      Check if an image exists in local storage\n  history     Show history of a specified image\n  import      Import a tarball to create a filesystem image\n  inspect     Display the configuration of an image\n  list        List images in local storage\n  load        Load an image from container archive\n  prune       Remove unused images\n  pull        Pull an image from a registry\n  push        Push an image to a specified destination\n  rm          Removes one or more images from local storage\n  save        Save image to an archive\n  sign        Sign an image\n  tag         Add an additional name to a local image\n  tree        Prints layer hierarchy of an image in a tree format\n  trust       Manage container image trust policy\n\n[nbh23@colombo ~]$\n")),(0,o.kt)("p",null,"We can list out the images and containers as follows, which is handy if you lose track of where you are at."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo ~]$ podman image list\nREPOSITORY                            TAG      IMAGE ID       CREATED       SIZE\nregistry.access.redhat.com/ubi8/ubi   latest   096cae65a207   5 weeks ago   239 MB\n[nbh23@colombo ~]$ podman container list\nCONTAINER ID  IMAGE                                       COMMAND  CREATED      STATUS          PORTS  NAMES\na1fc64bd8e47  registry.access.redhat.com/ubi8/ubi:latest  bash     2 hours ago  Up 2 hours ago         zen_albattani\n[nbh23@colombo ~]$\n")),(0,o.kt)("p",null,"So we created a container to interact with, but how about creating a new image?\nI found that Podman is very easy to interact with and created a Dockerfile. This is a list of commands in a text file that controls what gets installed.\nCreate a new directory - in this case whatshap, to put the Dockerfile in:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo whatshap]$ cat Dockerfile\nFROM registry.access.redhat.com/ubi8/ubi\nRUN yum -y update \\\n&& yum -y install python3 \\\n&& yum -y install make \\\n&& yum -y install gcc \\\n&& yum -y install redhat-rpm-config \\\n&& yum -y install zlib-devel \\\n&& yum -y install bzip2-devel \\\n&& yum -y install xz-devel \\\n&& yum -y install python3-devel \\\n&& yum clean all\nRUN pip3 install pysam && pip3 install whatshap\n")),(0,o.kt)("p",null,"Then we build the container image - from within the whatshap directory run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"podman build -t whatshap .\n")),(0,o.kt)("p",null,"Notice the '.' at the end, that's important!"),(0,o.kt)("p",null,"You'll see the container image start to build, with notifications of where it's at. If all goes to plan you will then finally see notification that it's completed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"STEP 4: COMMIT whatshap\nd523727fc6c297086e84e7ec99f62e8f5e6d093d9decb1b58ee8a4205d46b3dd\n")),(0,o.kt)("p",null,"We can then check it works:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo whatshap]$ podman run -it whatshap\n[root@ac05564bd51b /]# whatshap -h\nusage: whatshap [-h] [--version] [--debug]\n                {phase,stats,compare,hapcut2vcf,unphase,haplotag,genotype} ...\n\npositional arguments:\n  {phase,stats,compare,hapcut2vcf,unphase,haplotag,genotype}\n    phase               Phase variants in a VCF with the WhatsHap algorithm\n    stats               Print phasing statistics of a single VCF file\n    compare             Compare two or more phasings\n    hapcut2vcf          Convert hapCUT output format to VCF\n    unphase             Remove phasing information from a VCF file\n    haplotag            Tag reads by haplotype\n    genotype            Genotype variants\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version             show program's version number and exit\n  --debug               Print debug messages\n[root@ac05564bd51b /]#\n")),(0,o.kt)("p",null,"Which all looks good - we now have our container image and can re-run that to do our whatshap analysis."),(0,o.kt)("p",null,"All well and good, but what happens about storage of that analysis?"),(0,o.kt)("p",null,"We can add that to our Podman command, if we have a directory called data in /home we can map that as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"podman run -v /home/nbh23/data:/home/nbh23:z -it whatshap\n")),(0,o.kt)("p",null,"The nice thing is that the UID and GID for files created this way all match up. The trailing :z makes selinux happy :-)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo whatshap]$ podman run -v /home/nbh23/data:/home/nbh23:z -it whatshap\n[root@fef561d523b8 /]# ls\nbin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n[root@fef561d523b8 /]# cd /home\n[root@fef561d523b8 home]# ls\nnbh23\n[root@fef561d523b8 home]# cd nbh23\n[root@fef561d523b8 nbh23]# touch testfile\n[root@fef561d523b8 nbh23]# ls -la\ntotal 0\ndrwxrwxr-x. 2 root root 22 Jan 21 09:09 .\ndrwxr-xr-x. 3 root root 19 Jan 21 09:09 ..\n-rw-r--r--. 1 root root  0 Jan 21 09:09 testfile\n[root@fef561d523b8 nbh23]# exit\n[nbh23@colombo ~]$ ls\nContainers  data  Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos\n[nbh23@colombo ~]$ cd data\n[nbh23@colombo data]$ ls -la\ntotal 4\ndrwxrwxr-x.  2 nbh23 nbh23   22 Jan 21 09:09 .\ndrwx------. 17 nbh23 nbh23 4096 Jan 21 09:07 ..\n-rw-r--r--.  1 nbh23 nbh23    0 Jan 21 09:09 testfile\n[nbh23@colombo data]$\n")),(0,o.kt)("p",null,"One of the things I discovered whilst creating a more complex container image was that you can start the existing image into a bash session, doing the manipulation that you require, and then use the Podman commit command to write those changes.\nFor example using our whatshap container image we can run it as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo data]$ podman run -it whatshap bash\n[root@73c4742e4724 /]#\n")),(0,o.kt)("p",null,"We can then make our alterations, and from another session commit those changes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo ~]$ podman commit 73c4742e4724 whatshap-altered\nGetting image source signatures\nCopying blob c630f5c3e169 skipped: already exists\nCopying blob 4bd7408cc1c8 skipped: already exists\nCopying blob 1383f0e3c813 skipped: already exists\nCopying blob a2ff5e229058 skipped: already exists\nCopying blob b75bf3e68dab done\nCopying config 931b7f5302 done\nWriting manifest to image destination\nStoring signatures\n931b7f5302af9965bff14e460c19ff9e756d74095940c6d85e63f929006c35f0\n[nbh23@colombo ~]$\n")),(0,o.kt)("p",null,"Then do podman image list to see what we have:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[nbh23@colombo ~]$ podman image list\nREPOSITORY                            TAG      IMAGE ID       CREATED              SIZE\nlocalhost/whatshap-altered            latest   931b7f5302af   About a minute ago   545 MB\nlocalhost/whatshap                    latest   d523727fc6c2   3 days ago           545 MB\nregistry.access.redhat.com/ubi8/ubi   latest   096cae65a207   5 weeks ago          239\n[nbh23@colombo ~]$\n")),(0,o.kt)("p",null,"You can make multiple changes to your original container image until you are satisfied that it's working as you'd like."),(0,o.kt)("p",null,"This has covered command line container image creation and usage, I'll be creating another blog post detailing graphical interactive containers as i'm aware that there are various interactive visual programs to cover too."),(0,o.kt)("p",null,"Feel free to contact me with any ideas or suggestions / questions."))}h.isMDXComponent=!0},1382:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/podman-ce586c2894883ad9c353492b5e1893a8.svg"}}]);