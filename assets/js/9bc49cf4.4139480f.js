"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[7685],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=m(n),k=r,c=s["".concat(p,".").concat(k)]||s[k]||u[k]||l;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3851:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const l={},i=void 0,o={unversionedId:"podman-events",id:"podman-events",title:"podman-events",description:"% podman-events 1",source:"@site/docs/podman-events.md",sourceDirName:".",slug:"/podman-events",permalink:"/website-new/docs/podman-events",draft:!1,editUrl:"https://github.com/containers/website-new/docs/podman-events.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-diff",permalink:"/website-new/docs/podman-diff"},next:{title:"podman-exec",permalink:"/website-new/docs/podman-exec"}},p={},m=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"Verbose Create Events",id:"verbose-create-events",level:4},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--filter</strong>, <strong>-f</strong>=<em>filter</em>",id:"--filter--ffilter",level:4},{value:"<strong>--format</strong>",id:"--format",level:4},{value:"<strong>--help</strong>",id:"--help",level:4},{value:"<strong>--no-trunc</strong>",id:"--no-trunc",level:4},{value:"<strong>--since</strong>=<em>timestamp</em>",id:"--sincetimestamp",level:4},{value:"<strong>--stream</strong>",id:"--stream",level:4},{value:"<strong>--until</strong>=<em>timestamp</em>",id:"--untiltimestamp",level:4},{value:"JOURNALD IDENTIFIERS",id:"journald-identifiers",level:2},{value:"EXAMPLES",id:"examples",level:2},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2}],d={toc:m},s="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(s,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"% podman-events 1"),(0,r.kt)("h2",{id:"name"},"NAME"),(0,r.kt)("p",null,"podman","-","events - Monitor Podman events"),(0,r.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"podman events")," ","[",(0,r.kt)("em",{parentName:"p"},"options"),"]"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"podman system events")," ","[",(0,r.kt)("em",{parentName:"p"},"options"),"]"),(0,r.kt)("h2",{id:"description"},"DESCRIPTION"),(0,r.kt)("p",null,"Monitor and print events that occur in Podman. Each event will include a timestamp,\na type, a status, name (if applicable), and image (if applicable). The default logging\nmechanism is ",(0,r.kt)("em",{parentName:"p"},"journald"),". This can be changed in containers.conf by changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"events_logger"),"\nvalue to ",(0,r.kt)("inlineCode",{parentName:"p"},"file"),". Only ",(0,r.kt)("inlineCode",{parentName:"p"},"file")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"journald")," are accepted. A ",(0,r.kt)("inlineCode",{parentName:"p"},"none")," logger is also\navailable but this logging mechanism completely disables events; nothing will be reported by\n",(0,r.kt)("inlineCode",{parentName:"p"},"podman events"),"."),(0,r.kt)("p",null,"By default, streaming mode is used, printing new events as they occur. Previous events can be listed via ",(0,r.kt)("inlineCode",{parentName:"p"},"--since")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--until"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"container")," event type will report the follow statuses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"attach"),(0,r.kt)("li",{parentName:"ul"},"checkpoint"),(0,r.kt)("li",{parentName:"ul"},"cleanup"),(0,r.kt)("li",{parentName:"ul"},"commit"),(0,r.kt)("li",{parentName:"ul"},"connect"),(0,r.kt)("li",{parentName:"ul"},"create"),(0,r.kt)("li",{parentName:"ul"},"died"),(0,r.kt)("li",{parentName:"ul"},"disconnect"),(0,r.kt)("li",{parentName:"ul"},"exec"),(0,r.kt)("li",{parentName:"ul"},"exec_died"),(0,r.kt)("li",{parentName:"ul"},"exited"),(0,r.kt)("li",{parentName:"ul"},"export"),(0,r.kt)("li",{parentName:"ul"},"import"),(0,r.kt)("li",{parentName:"ul"},"init"),(0,r.kt)("li",{parentName:"ul"},"kill"),(0,r.kt)("li",{parentName:"ul"},"mount"),(0,r.kt)("li",{parentName:"ul"},"pause"),(0,r.kt)("li",{parentName:"ul"},"prune"),(0,r.kt)("li",{parentName:"ul"},"remove"),(0,r.kt)("li",{parentName:"ul"},"rename"),(0,r.kt)("li",{parentName:"ul"},"restart"),(0,r.kt)("li",{parentName:"ul"},"restore"),(0,r.kt)("li",{parentName:"ul"},"start"),(0,r.kt)("li",{parentName:"ul"},"stop"),(0,r.kt)("li",{parentName:"ul"},"sync"),(0,r.kt)("li",{parentName:"ul"},"unmount"),(0,r.kt)("li",{parentName:"ul"},"unpause")),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"pod")," event type will report the follow statuses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"create"),(0,r.kt)("li",{parentName:"ul"},"kill"),(0,r.kt)("li",{parentName:"ul"},"pause"),(0,r.kt)("li",{parentName:"ul"},"remove"),(0,r.kt)("li",{parentName:"ul"},"start"),(0,r.kt)("li",{parentName:"ul"},"stop"),(0,r.kt)("li",{parentName:"ul"},"unpause")),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"image")," event type will report the following statuses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"loadFromArchive,"),(0,r.kt)("li",{parentName:"ul"},"mount"),(0,r.kt)("li",{parentName:"ul"},"pull"),(0,r.kt)("li",{parentName:"ul"},"push"),(0,r.kt)("li",{parentName:"ul"},"remove"),(0,r.kt)("li",{parentName:"ul"},"save"),(0,r.kt)("li",{parentName:"ul"},"tag"),(0,r.kt)("li",{parentName:"ul"},"unmount"),(0,r.kt)("li",{parentName:"ul"},"untag")),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"system")," type will report the following statuses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"refresh"),(0,r.kt)("li",{parentName:"ul"},"renumber")),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"volume")," type will report the following statuses:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"create"),(0,r.kt)("li",{parentName:"ul"},"prune"),(0,r.kt)("li",{parentName:"ul"},"remove")),(0,r.kt)("h4",{id:"verbose-create-events"},"Verbose Create Events"),(0,r.kt)("p",null,"Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"events_container_create_inspect_data=true")," in containers.conf(5) instructs Podman to create more verbose container-create events which include a JSON payload with detailed information about the containers. The JSON payload is identical to the one of podman-container-inspect(1). The associated field in journald is named ",(0,r.kt)("inlineCode",{parentName:"p"},"PODMAN_CONTAINER_INSPECT_DATA"),"."),(0,r.kt)("h2",{id:"options"},"OPTIONS"),(0,r.kt)("h4",{id:"--filter--ffilter"},(0,r.kt)("strong",{parentName:"h4"},"--filter"),", ",(0,r.kt)("strong",{parentName:"h4"},"-f"),"=",(0,r.kt)("em",{parentName:"h4"},"filter")),(0,r.kt)("p",null,'Filter events that are displayed. They must be in the format of "filter=value". The following\nfilters are supported:'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"container=name_or_id"),(0,r.kt)("li",{parentName:"ul"},"event=event_status (described above)"),(0,r.kt)("li",{parentName:"ul"},"image=name_or_id"),(0,r.kt)("li",{parentName:"ul"},"label=key=value"),(0,r.kt)("li",{parentName:"ul"},"pod=name_or_id"),(0,r.kt)("li",{parentName:"ul"},"volume=name_or_id"),(0,r.kt)("li",{parentName:"ul"},"type=event_type (described above)")),(0,r.kt)("p",null,'In the case where an ID is used, the ID may be in its full or shortened form. The "die" event is mapped to "died" for Docker compatibility.'),(0,r.kt)("h4",{id:"--format"},(0,r.kt)("strong",{parentName:"h4"},"--format")),(0,r.kt)("p",null,"Format the output to JSON Lines or using the given Go template."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Placeholder")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Attributes"),(0,r.kt)("td",{parentName:"tr",align:null},"created_at, ","_","by, labels, and more (map[])")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".ContainerExitCode"),(0,r.kt)("td",{parentName:"tr",align:null},"Exit code (int)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".ContainerInspectData"),(0,r.kt)("td",{parentName:"tr",align:null},"Payload of the container's inspect")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".HealthStatus"),(0,r.kt)("td",{parentName:"tr",align:null},"Health Status (string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Container ID (full 64-bit SHA)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Image"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of image being run (string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Name"),(0,r.kt)("td",{parentName:"tr",align:null},"Container name (string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Network"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of network being used (string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".PodID"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of pod associated with container, if any")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Status"),(0,r.kt)("td",{parentName:"tr",align:null},"Event status (e.g., create, start, died, ...)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Time"),(0,r.kt)("td",{parentName:"tr",align:null},"Event timestamp (string)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Type"),(0,r.kt)("td",{parentName:"tr",align:null},"Event type (e.g., image, container, pod, ...)")))),(0,r.kt)("h4",{id:"--help"},(0,r.kt)("strong",{parentName:"h4"},"--help")),(0,r.kt)("p",null,"Print usage statement."),(0,r.kt)("h4",{id:"--no-trunc"},(0,r.kt)("strong",{parentName:"h4"},"--no-trunc")),(0,r.kt)("p",null,"Do not truncate the output (default ",(0,r.kt)("em",{parentName:"p"},"true"),")."),(0,r.kt)("h4",{id:"--sincetimestamp"},(0,r.kt)("strong",{parentName:"h4"},"--since"),"=",(0,r.kt)("em",{parentName:"h4"},"timestamp")),(0,r.kt)("p",null,"Show all events created since the given timestamp"),(0,r.kt)("h4",{id:"--stream"},(0,r.kt)("strong",{parentName:"h4"},"--stream")),(0,r.kt)("p",null,"Stream events and do not exit after reading the last known event (default ",(0,r.kt)("em",{parentName:"p"},"true"),")."),(0,r.kt)("h4",{id:"--untiltimestamp"},(0,r.kt)("strong",{parentName:"h4"},"--until"),"=",(0,r.kt)("em",{parentName:"h4"},"timestamp")),(0,r.kt)("p",null,"Show all events created until the given timestamp"),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"since")," and ",(0,r.kt)("em",{parentName:"p"},"until")," values can be RFC3339Nano time stamps or a Go duration string such as 10m, 5h. If no\n",(0,r.kt)("em",{parentName:"p"},"since")," or ",(0,r.kt)("em",{parentName:"p"},"until")," values are provided, only new events will be shown."),(0,r.kt)("h2",{id:"journald-identifiers"},"JOURNALD IDENTIFIERS"),(0,r.kt)("p",null,"The journald events-backend of Podman uses the following journald identifiers. You can use the identifiers to filter Podman events directly with ",(0,r.kt)("inlineCode",{parentName:"p"},"journalctl"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Identifier")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SYSLOG_IDENTIFIER"),(0,r.kt)("td",{parentName:"tr",align:null},'Always set to "podman"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_EVENT"),(0,r.kt)("td",{parentName:"tr",align:null},"The event status as described above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_TYPE"),(0,r.kt)("td",{parentName:"tr",align:null},"The event type as described above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_TIME"),(0,r.kt)("td",{parentName:"tr",align:null},"The time stamp when the event was written")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the event object (e.g., container, image)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"ID of the event object (e.g., container, image)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_EXIT_CODE"),(0,r.kt)("td",{parentName:"tr",align:null},"Exit code of the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_POD_ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Pod ID of the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_LABELS"),(0,r.kt)("td",{parentName:"tr",align:null},"Labels of the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_HEALTH_STATUS"),(0,r.kt)("td",{parentName:"tr",align:null},"Health status of the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_CONTAINER_INSPECT_DATA"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON payload of ",(0,r.kt)("inlineCode",{parentName:"td"},"podman-inspect")," as described above")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PODMAN_NETWORK_NAME"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the network")))),(0,r.kt)("h2",{id:"examples"},"EXAMPLES"),(0,r.kt)("p",null,"Showing Podman events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman events\n2019-03-02 10:33:42.312377447 -0600 CST container create 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n2019-03-02 10:33:46.958768077 -0600 CST container init 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n2019-03-02 10:33:46.973661968 -0600 CST container start 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n2019-03-02 10:33:50.833761479 -0600 CST container stop 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n2019-03-02 10:33:51.047104966 -0600 CST container cleanup 34503c192940 (image=docker.io/library/alpine:latest, name=friendly_allen)\n")),(0,r.kt)("p",null,"Show only Podman create events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman events -f event=create\n2019-03-02 10:36:01.375685062 -0600 CST container create 20dc581f6fbf (image=docker.io/library/alpine:latest, name=sharp_morse)\n2019-03-02 10:36:08.561188337 -0600 CST container create 58e7e002344c (image=registry.k8s.io/pause:3, name=3e701f270d54-infra)\n2019-03-02 10:36:1346899437 -0600 CST volume create cad6dc50e087 (image=, name=cad6dc50e0879568e7d656bd004bd343d6035e7fc4024e1711506fe2fd459e6f)\n2019-03-02 10:36:29.978806894 -0600 CST container create d81e30f1310f (image=docker.io/library/busybox:latest, name=musing_newton)\n")),(0,r.kt)("p",null,"Show only Podman pod create events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman events --filter event=create --filter type=pod\n2019-03-02 10:44:29.601746633 -0600 CST pod create 1df5ebca7b44 (image=, name=confident_hawking)\n2019-03-02 10:44:42.374637304 -0600 CST pod create ca731231718e (image=, name=webapp)\n2019-03-02 10:44:47.486759133 -0600 CST pod create 71e807fc3a8e (image=, name=reverent_swanson)\n")),(0,r.kt)("p",null,"Show only Podman events created in the last five minutes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ sudo podman events --since 5m\n2019-03-02 10:44:29.598835409 -0600 CST container create b629d10d3831 (image=registry.k8s.io/pause:3, name=1df5ebca7b44-infra)\n2019-03-02 10:44:29.601746633 -0600 CST pod create 1df5ebca7b44 (image=, name=confident_hawking)\n2019-03-02 10:44:42.371100253 -0600 CST container create 170a0f457d00 (image=registry.k8s.io/pause:3, name=ca731231718e-infra)\n2019-03-02 10:44:42.374637304 -0600 CST pod create ca731231718e (image=, name=webapp)\n")),(0,r.kt)("p",null,"Show Podman events in JSON Lines format"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ podman events --format json\n{"ID":"683b0909d556a9c02fa8cd2b61c3531a965db42158627622d1a67b391964d519","Image":"localhost/myshdemo:latest","Name":"agitated_diffie","Status":"cleanup","Time":"2019-04-27T22:47:00.849932843-04:00","Type":"container"}\n{"ID":"a0f8ab051bfd43f9c5141a8a2502139707e4b38d98ac0872e57c5315381e88ad","Image":"docker.io/library/alpine:latest","Name":"friendly_tereshkova","Status":"unmount","Time":"2019-04-28T13:43:38.063017276-04:00","Type":"container"}\n')),(0,r.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/website-new/docs/podman"},"podman(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/containers/common/blob/main/docs/containers.conf.5.md"},"containers.conf(5)"))),(0,r.kt)("h2",{id:"history"},"HISTORY"),(0,r.kt)("p",null,"March 2019, Originally compiled by Brent Baude ",(0,r.kt)("a",{parentName:"p",href:"mailto:bbaude@redhat.com"},"bbaude@redhat.com")))}u.isMDXComponent=!0}}]);