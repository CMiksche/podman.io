"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[9050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(n),u=o,g=d["".concat(p,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},s=void 0,i={unversionedId:"commands/podman-image/podman-image-trust",id:"commands/podman-image/podman-image-trust",title:"podman-image-trust",description:"% podman-image-trust 1",source:"@site/docs/commands/podman-image/podman-image-trust.md",sourceDirName:"commands/podman-image",slug:"/commands/podman-image/podman-image-trust",permalink:"/website-new/docs/commands/podman-image/podman-image-trust",draft:!1,editUrl:"https://github.com/containers/website-new/docs/commands/podman-image/podman-image-trust.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-image-tree",permalink:"/website-new/docs/commands/podman-image/podman-image-tree"},next:{title:"podman-image-unmount",permalink:"/website-new/docs/commands/podman-image/podman-image-unmount"}},p={},l=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--help</strong>, <strong>-h</strong>",id:"--help--h",level:4},{value:"set OPTIONS",id:"set-options",level:3},{value:"<strong>--pubkeysfile</strong>, <strong>-f</strong>=<em>KEY1</em>",id:"--pubkeysfile--fkey1",level:4},{value:"<strong>--type</strong>, <strong>-t</strong>=<em>value</em>",id:"--type--tvalue",level:4},{value:"show OPTIONS",id:"show-options",level:3},{value:"<strong>--json</strong>, <strong>-j</strong>",id:"--json--j",level:4},{value:"<strong>--raw</strong>",id:"--raw",level:4},{value:"EXAMPLES",id:"examples",level:2},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2}],c={toc:l},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"% podman-image-trust 1"),(0,o.kt)("h2",{id:"name"},"NAME"),(0,o.kt)("p",null,"podman","-","image","-","trust - Manage container registry image trust policy"),(0,o.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"podman image trust")," set|show ","[",(0,o.kt)("em",{parentName:"p"},"options"),"]"," ",(0,o.kt)("em",{parentName:"p"},"registry","[/repository]")),(0,o.kt)("h2",{id:"description"},"DESCRIPTION"),(0,o.kt)("p",null,"Manages which registries to trust as a source of container images based on its location. (This option is not available with the remote Podman client, including Mac and Windows (excluding WSL2) machines)"),(0,o.kt)("p",null,"The location is determined\nby the transport and the registry host of the image. Using this container image ",(0,o.kt)("inlineCode",{parentName:"p"},"docker://docker.io/library/busybox"),"\nas an example, ",(0,o.kt)("inlineCode",{parentName:"p"},"docker")," is the transport and ",(0,o.kt)("inlineCode",{parentName:"p"},"docker.io")," is the registry host."),(0,o.kt)("p",null,"Trust is defined in ",(0,o.kt)("strong",{parentName:"p"},"/etc/containers/policy.json")," and is enforced when a user attempts to pull\na remote image from a registry. The trust policy in policy.json describes a registry scope (registry and/or repository) for the trust. This trust can use public keys for signed images."),(0,o.kt)("p",null,"The scope of the trust is evaluated from most specific to the least specific. In other words, a policy may be defined for an entire registry. Or it could be defined for a particular repository in that registry. Or it could be defined down to a specific signed image inside of the registry."),(0,o.kt)("p",null,"For example, the following list includes valid scope values that could be used in policy.json from most specific to the least specific:"),(0,o.kt)("p",null,"docker.io/library/busybox:notlatest\ndocker.io/library/busybox\ndocker.io/library\ndocker.io"),(0,o.kt)("p",null,'If no configuration is found for any of these scopes, the default value (specified by using "default" instead of REGISTRY',"[/REPOSITORY]",") is used."),(0,o.kt)("p",null,"Trust ",(0,o.kt)("strong",{parentName:"p"},"type")," provides a way to:"),(0,o.kt)("p",null,'Allowlist ("accept") or\nDenylist ("reject") registries or\nRequire a simple signing signature (\u201csignedBy\u201d),\nRequire a sigstore signature ("sigstoreSigned").'),(0,o.kt)("p",null,"Trust may be updated using the command ",(0,o.kt)("strong",{parentName:"p"},"podman image trust set")," for an existing trust scope."),(0,o.kt)("h2",{id:"options"},"OPTIONS"),(0,o.kt)("h4",{id:"--help--h"},(0,o.kt)("strong",{parentName:"h4"},"--help"),", ",(0,o.kt)("strong",{parentName:"h4"},"-h")),(0,o.kt)("p",null,"Print usage statement."),(0,o.kt)("h3",{id:"set-options"},"set OPTIONS"),(0,o.kt)("h4",{id:"--pubkeysfile--fkey1"},(0,o.kt)("strong",{parentName:"h4"},"--pubkeysfile"),", ",(0,o.kt)("strong",{parentName:"h4"},"-f"),"=",(0,o.kt)("em",{parentName:"h4"},"KEY1")),(0,o.kt)("p",null,"A path to an exported public key on the local system. Key paths\nwill be referenced in policy.json. Any path to a file may be used but locating the file in ",(0,o.kt)("strong",{parentName:"p"},"/etc/pki/containers")," is recommended. Options may be used multiple times to\nrequire an image be signed by multiple keys. The ",(0,o.kt)("strong",{parentName:"p"},"--pubkeysfile")," option is required for the ",(0,o.kt)("strong",{parentName:"p"},"signedBy")," and ",(0,o.kt)("strong",{parentName:"p"},"sigstoreSigned")," types."),(0,o.kt)("h4",{id:"--type--tvalue"},(0,o.kt)("strong",{parentName:"h4"},"--type"),", ",(0,o.kt)("strong",{parentName:"h4"},"-t"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,"The trust type for this policy entry.\nAccepted values:\n",(0,o.kt)("strong",{parentName:"p"},"signedBy")," (default): Require simple signing signatures with corresponding list of\npublic keys\n",(0,o.kt)("strong",{parentName:"p"},"sigstoreSigned"),": Require sigstore signatures with corresponding list of\npublic keys\n",(0,o.kt)("strong",{parentName:"p"},"accept"),": do not require any signatures for this\nregistry scope\n",(0,o.kt)("strong",{parentName:"p"},"reject"),": do not accept images for this registry scope"),(0,o.kt)("h3",{id:"show-options"},"show OPTIONS"),(0,o.kt)("h4",{id:"--json--j"},(0,o.kt)("strong",{parentName:"h4"},"--json"),", ",(0,o.kt)("strong",{parentName:"h4"},"-j")),(0,o.kt)("p",null,"Output trust as JSON for machine parsing"),(0,o.kt)("p",null,"@@option noheading"),(0,o.kt)("h4",{id:"--raw"},(0,o.kt)("strong",{parentName:"h4"},"--raw")),(0,o.kt)("p",null,"Output trust policy file as raw JSON"),(0,o.kt)("h2",{id:"examples"},"EXAMPLES"),(0,o.kt)("p",null,"Accept all unsigned images from a registry"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo podman image trust set --type accept docker.io\n")),(0,o.kt)("p",null,"Modify default trust policy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sudo podman image trust set -t reject default\n")),(0,o.kt)("p",null,"Display system trust policy"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"podman image trust show\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"TRANSPORT      NAME                        TYPE        ID                   STORE\nall            default                     reject\nrepository     docker.io/library           accept\nrepository     registry.access.redhat.com  signed      security@redhat.com  https://access.redhat.com/webassets/docker/content/sigstore\nrepository     registry.redhat.io          signed      security@redhat.com  https://registry.redhat.io/containers/sigstore\nrepository     docker.io                   reject\ndocker-daemon                              accept\n")),(0,o.kt)("p",null,"Display trust policy file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"podman image trust show --raw\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n    "default": [\n        {\n            "type": "reject"\n        }\n    ],\n    "transports": {\n        "docker": {\n            "docker.io": [\n                {\n                    "type": "reject"\n                }\n            ],\n            "docker.io/library": [\n                {\n                    "type": "insecureAcceptAnything"\n                }\n            ],\n            "registry.access.redhat.com": [\n                {\n                    "type": "signedBy",\n                    "keyType": "GPGKeys",\n                    "keyPath": "/etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release"\n                }\n            ],\n            "registry.redhat.io": [\n                {\n                    "type": "signedBy",\n                    "keyType": "GPGKeys",\n                    "keyPath": "/etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release"\n                }\n            ]\n        },\n        "docker-daemon": {\n            "": [\n                {\n                    "type": "insecureAcceptAnything"\n                }\n            ]\n        }\n    }\n}\n')),(0,o.kt)("p",null,"Display trust as JSON"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"podman image trust show --json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'[\n  {\n    "transport": "all",\n    "name": "* (default)",\n    "repo_name": "default",\n    "type": "reject"\n  },\n  {\n    "transport": "repository",\n    "name": "docker.io",\n    "repo_name": "docker.io",\n    "type": "reject"\n  },\n  {\n    "transport": "repository",\n    "name": "docker.io/library",\n    "repo_name": "docker.io/library",\n    "type": "accept"\n  },\n  {\n    "transport": "repository",\n    "name": "registry.access.redhat.com",\n    "repo_name": "registry.access.redhat.com",\n    "sigstore": "https://access.redhat.com/webassets/docker/content/sigstore",\n    "type": "signed",\n    "gpg_id": "security@redhat.com"\n  },\n  {\n    "transport": "repository",\n    "name": "registry.redhat.io",\n    "repo_name": "registry.redhat.io",\n    "sigstore": "https://registry.redhat.io/containers/sigstore",\n    "type": "signed",\n    "gpg_id": "security@redhat.com"\n  },\n  {\n    "transport": "docker-daemon",\n    "type": "accept"\n  }\n]\n')),(0,o.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/image/blob/main/docs/containers-policy.json.5.md"},"containers-policy.json(5)"))),(0,o.kt)("h2",{id:"history"},"HISTORY"),(0,o.kt)("p",null,"January 2019, updated by Tom Sweeney (tsweeney at redhat dot com)\nDecember 2018, originally compiled by Qi Wang (qiwan at redhat dot com)"))}m.isMDXComponent=!0}}]);