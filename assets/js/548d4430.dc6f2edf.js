"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[5389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=m(n),c=o,k=p["".concat(s,".").concat(c)]||p[c]||u[c]||r;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3889:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var a=n(7462),o=(n(7294),n(3905));const r={title:"Podman"},i=void 0,l={unversionedId:"podman",id:"podman",title:"Podman",description:"Podman Logo",source:"@site/docs/podman.md",sourceDirName:".",slug:"/podman",permalink:"/website-new/docs/podman",draft:!1,editUrl:"https://github.com/containers/website-new/docs/podman.md",tags:[],version:"current",frontMatter:{title:"Podman"},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/website-new/docs/introduction"},next:{title:"troubleshooting",permalink:"/website-new/docs/troubleshooting"}},s={},m=[{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"GLOBAL OPTIONS",id:"global-options",level:2},{value:"<strong>--cgroup-manager</strong>=<em>manager</em>",id:"--cgroup-managermanager",level:4},{value:"<strong>--conmon</strong>",id:"--conmon",level:4},{value:"<strong>--connection</strong>, <strong>-c</strong>",id:"--connection--c",level:4},{value:"<strong>--events-backend</strong>=<em>type</em>",id:"--events-backendtype",level:4},{value:"<strong>--help</strong>, <strong>-h</strong>",id:"--help--h",level:4},{value:"<strong>--hooks-dir</strong>=<em>path</em>",id:"--hooks-dirpath",level:4},{value:"<strong>--identity</strong>=<em>path</em>",id:"--identitypath",level:4},{value:"<strong>--log-level</strong>=<em>level</em>",id:"--log-levellevel",level:4},{value:"<strong>--network-cmd-path</strong>=<em>path</em>",id:"--network-cmd-pathpath",level:4},{value:"<strong>--network-config-dir</strong>=<em>directory</em>",id:"--network-config-dirdirectory",level:4},{value:"<strong>--noout</strong>",id:"--noout",level:4},{value:"<strong>--remote</strong>, <strong>-r</strong>",id:"--remote--r",level:4},{value:"<strong>--root</strong>=<em>value</em>",id:"--rootvalue",level:4},{value:"<strong>--runroot</strong>=<em>value</em>",id:"--runrootvalue",level:4},{value:"<strong>--runtime</strong>=<em>value</em>",id:"--runtimevalue",level:4},{value:"<strong>--runtime-flag</strong>=<em>flag</em>",id:"--runtime-flagflag",level:4},{value:"<strong>--ssh</strong>=<em>value</em>",id:"--sshvalue",level:4},{value:"<strong>--storage-driver</strong>=<em>value</em>",id:"--storage-drivervalue",level:4},{value:"<strong>--storage-opt</strong>=<em>value</em>",id:"--storage-optvalue",level:4},{value:"<strong>--syslog</strong>",id:"--syslog",level:4},{value:"<strong>--tmpdir</strong>=<em>path</em>",id:"--tmpdirpath",level:4},{value:"<strong>--transient-store</strong>",id:"--transient-store",level:4},{value:"<strong>--url</strong>=<em>value</em>",id:"--urlvalue",level:4},{value:"<strong>--version</strong>, <strong>-v</strong>",id:"--version--v",level:4},{value:"<strong>--volumepath</strong>=<em>value</em>",id:"--volumepathvalue",level:4},{value:"Environment Variables",id:"environment-variables",level:2},{value:"<strong>CONTAINERS_CONF</strong>",id:"containers_conf",level:4},{value:"<strong>CONTAINERS_REGISTRIES_CONF</strong>",id:"containers_registries_conf",level:4},{value:"<strong>CONTAINERS_STORAGE_CONF</strong>",id:"containers_storage_conf",level:4},{value:"<strong>CONTAINER_CONNECTION</strong>",id:"container_connection",level:4},{value:"<strong>CONTAINER_HOST</strong>",id:"container_host",level:4},{value:"<strong>CONTAINER_SSHKEY</strong>",id:"container_sshkey",level:4},{value:"<strong>STORAGE_DRIVER</strong>",id:"storage_driver",level:4},{value:"<strong>STORAGE_OPTS</strong>",id:"storage_opts",level:4},{value:"<strong>TMPDIR</strong>",id:"tmpdir",level:4},{value:"<strong>XDG_CONFIG_HOME</strong>",id:"xdg_config_home",level:4},{value:"<strong>XDG_DATA_HOME</strong>",id:"xdg_data_home",level:4},{value:"<strong>XDG_RUNTIME_DIR</strong>",id:"xdg_runtime_dir",level:4},{value:"Remote Access",id:"remote-access",level:2},{value:"Exit Codes",id:"exit-codes",level:2},{value:"COMMANDS",id:"commands",level:2},{value:"CONFIGURATION FILES",id:"configuration-files",level:2},{value:"Rootless mode",id:"rootless-mode",level:2},{value:"<strong>NOTE:</strong> Unsupported file systems in rootless mode",id:"note-unsupported-file-systems-in-rootless-mode",level:3},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2}],d={toc:m},p="wrapper";function u(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Podman Logo",src:n(8762).Z,width:"867",height:"222"})),(0,o.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"podman")," ","[",(0,o.kt)("em",{parentName:"p"},"options"),"]"," ",(0,o.kt)("em",{parentName:"p"},"command")),(0,o.kt)("h2",{id:"description"},"DESCRIPTION"),(0,o.kt)("p",null,"Podman (Pod Manager) is a fully featured container engine that is a simple daemonless tool.\nPodman provides a Docker-CLI comparable command line that eases the transition from other\ncontainer engines and allows the management of pods, containers and images. Simply put: ",(0,o.kt)("inlineCode",{parentName:"p"},"alias docker=podman"),".\nMost Podman commands can be run as a regular user, without requiring additional\nprivileges."),(0,o.kt)("p",null,"Podman uses Buildah(1) internally to create container images. Both tools share image\n(not container) storage, hence each can use or manipulate images (but not containers)\ncreated by the other."),(0,o.kt)("p",null,"Default settings for flags are defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"containers.conf"),". Most settings for\nRemote connections use the server's containers.conf, except when documented in\nman pages."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"podman ","[GLOBAL OPTIONS]")),(0,o.kt)("h2",{id:"global-options"},"GLOBAL OPTIONS"),(0,o.kt)("h4",{id:"--cgroup-managermanager"},(0,o.kt)("strong",{parentName:"h4"},"--cgroup-manager"),"=",(0,o.kt)("em",{parentName:"h4"},"manager")),(0,o.kt)("p",null,"The CGroup manager to use for container cgroups. Supported values are cgroupfs or systemd. Default is systemd unless overridden in the containers.conf file."),(0,o.kt)("p",null,"Note: Setting this flag can cause certain commands to break when called on containers previously created by the other CGroup manager type.\nNote: CGroup manager is not supported in rootless mode when using CGroups Version V1."),(0,o.kt)("h4",{id:"--conmon"},(0,o.kt)("strong",{parentName:"h4"},"--conmon")),(0,o.kt)("p",null,"Path of the conmon binary (Default path is configured in ",(0,o.kt)("inlineCode",{parentName:"p"},"containers.conf"),")"),(0,o.kt)("h4",{id:"--connection--c"},(0,o.kt)("strong",{parentName:"h4"},"--connection"),", ",(0,o.kt)("strong",{parentName:"h4"},"-c")),(0,o.kt)("p",null,"Connection to use for remote podman, including Mac and Windows (excluding WSL2) machines, (Default connection is configured in ",(0,o.kt)("inlineCode",{parentName:"p"},"containers.conf"),")\nSetting this option will switch the ",(0,o.kt)("strong",{parentName:"p"},"--remote")," option to true.\nRemote connections use local containers.conf for default."),(0,o.kt)("h4",{id:"--events-backendtype"},(0,o.kt)("strong",{parentName:"h4"},"--events-backend"),"=",(0,o.kt)("em",{parentName:"h4"},"type")),(0,o.kt)("p",null,"Backend to use for storing events. Allowed values are ",(0,o.kt)("strong",{parentName:"p"},"file"),", ",(0,o.kt)("strong",{parentName:"p"},"journald"),", and\n",(0,o.kt)("strong",{parentName:"p"},"none"),". When ",(0,o.kt)("em",{parentName:"p"},"file")," is specified, the events are stored under\n",(0,o.kt)("inlineCode",{parentName:"p"},"<tmpdir>/events/events.log")," (see ",(0,o.kt)("strong",{parentName:"p"},"--tmpdir")," below)."),(0,o.kt)("h4",{id:"--help--h"},(0,o.kt)("strong",{parentName:"h4"},"--help"),", ",(0,o.kt)("strong",{parentName:"h4"},"-h")),(0,o.kt)("p",null,"Print usage statement"),(0,o.kt)("h4",{id:"--hooks-dirpath"},(0,o.kt)("strong",{parentName:"h4"},"--hooks-dir"),"=",(0,o.kt)("em",{parentName:"h4"},"path")),(0,o.kt)("p",null,"Each ",(0,o.kt)("inlineCode",{parentName:"p"},"*.json")," file in the path configures a hook for Podman containers. For more details on the syntax of the JSON files and the semantics of hook injection, see ",(0,o.kt)("inlineCode",{parentName:"p"},"oci-hooks(5)"),". Podman and libpod currently support both the 1.0.0 and 0.1.0 hook schemas, although the 0.1.0 schema is deprecated."),(0,o.kt)("p",null,"This option may be set multiple times; paths from later options have higher precedence (",(0,o.kt)("inlineCode",{parentName:"p"},"oci-hooks(5)")," discusses directory precedence)."),(0,o.kt)("p",null,"For the annotation conditions, libpod uses any annotations set in the generated OCI configuration."),(0,o.kt)("p",null,"For the bind-mount conditions, only mounts explicitly requested by the caller via ",(0,o.kt)("inlineCode",{parentName:"p"},"--volume")," are considered. Bind mounts that libpod inserts by default (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"/dev/shm"),") are not considered."),(0,o.kt)("p",null,"If ",(0,o.kt)("inlineCode",{parentName:"p"},"--hooks-dir")," is unset for root callers, Podman and libpod will currently default to ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/share/containers/oci/hooks.d")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/containers/oci/hooks.d")," in order of increasing precedence. Using these defaults is deprecated, and callers should migrate to explicitly setting ",(0,o.kt)("inlineCode",{parentName:"p"},"--hooks-dir"),"."),(0,o.kt)("p",null,"Podman and libpod currently support an additional ",(0,o.kt)("inlineCode",{parentName:"p"},"precreate")," state which is called before the runtime's ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," operation. Unlike the other stages, which receive the container state on their standard input, ",(0,o.kt)("inlineCode",{parentName:"p"},"precreate")," hooks receive the proposed runtime configuration on their standard input. They may alter that configuration as they see fit, and write the altered form to their standard output."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"WARNING"),": the ",(0,o.kt)("inlineCode",{parentName:"p"},"precreate")," hook allows powerful changes to occur, such as adding additional mounts to the runtime configuration. That power also makes it easy to break things. Before reporting libpod errors, try running a container with ",(0,o.kt)("inlineCode",{parentName:"p"},"precreate")," hooks disabled to see if the problem is due to one of the hooks."),(0,o.kt)("h4",{id:"--identitypath"},(0,o.kt)("strong",{parentName:"h4"},"--identity"),"=",(0,o.kt)("em",{parentName:"h4"},"path")),(0,o.kt)("p",null,"Path to ssh identity file. If the identity file has been encrypted, podman prompts the user for the passphrase.\nIf no identity file is provided and no user is given, podman defaults to the user running the podman command.\nPodman prompts for the login password on the remote server."),(0,o.kt)("p",null,"Identity value resolution precedence:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"command line value"),(0,o.kt)("li",{parentName:"ul"},"environment variable ",(0,o.kt)("inlineCode",{parentName:"li"},"CONTAINER_SSHKEY"),", if ",(0,o.kt)("inlineCode",{parentName:"li"},"CONTAINER_HOST")," is found"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"containers.conf"),"\nRemote connections use local containers.conf for default.")),(0,o.kt)("h4",{id:"--log-levellevel"},(0,o.kt)("strong",{parentName:"h4"},"--log-level"),"=",(0,o.kt)("em",{parentName:"h4"},"level")),(0,o.kt)("p",null,'Log messages at and above specified level: debug, info, warn, error, fatal or panic (default: "warn")'),(0,o.kt)("h4",{id:"--network-cmd-pathpath"},(0,o.kt)("strong",{parentName:"h4"},"--network-cmd-path"),"=",(0,o.kt)("em",{parentName:"h4"},"path")),(0,o.kt)("p",null,'Path to the command binary to use for setting up a network. It is currently only used for setting up a slirp4netns(1) or pasta(1) network. If "" is used then the binary is looked up using the $PATH environment variable.'),(0,o.kt)("h4",{id:"--network-config-dirdirectory"},(0,o.kt)("strong",{parentName:"h4"},"--network-config-dir"),"=",(0,o.kt)("em",{parentName:"h4"},"directory")),(0,o.kt)("p",null,'Path to the directory where network configuration files are located.\nFor the netavark backend "/etc/containers/networks" is used as root\nand "$graphroot/networks" as rootless.\nFor the CNI backend the default is "/etc/cni/net.d" as root\nand "$HOME/.config/cni/net.d" as rootless. CNI will be deprecated from Podman in the future for netavark.'),(0,o.kt)("h4",{id:"--noout"},(0,o.kt)("strong",{parentName:"h4"},"--noout")),(0,o.kt)("p",null,"Redirect stdout to /dev/null. This command will prevent all stdout from the Podman command. The ",(0,o.kt)("strong",{parentName:"p"},"--noout")," option will not block stderr or stdout from containers."),(0,o.kt)("h4",{id:"--remote--r"},(0,o.kt)("strong",{parentName:"h4"},"--remote"),", ",(0,o.kt)("strong",{parentName:"h4"},"-r")),(0,o.kt)("p",null,"When true, access to the Podman service will be remote. Defaults to false.\nSettings can be modified in the containers.conf file. If the CONTAINER_HOST\nenvironment variable is set, the ",(0,o.kt)("strong",{parentName:"p"},"--remote")," option defaults to true."),(0,o.kt)("h4",{id:"--rootvalue"},(0,o.kt)("strong",{parentName:"h4"},"--root"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,'Storage root dir in which data, including images, is stored (default: "/var/lib/containers/storage" for UID 0, "$HOME/.local/share/containers/storage" for other users).\nDefault root dir configured in ',(0,o.kt)("inlineCode",{parentName:"p"},"containers-storage.conf(5)"),"."),(0,o.kt)("p",null,"Overriding this option will cause the ",(0,o.kt)("em",{parentName:"p"},"storage-opt")," settings in ",(0,o.kt)("inlineCode",{parentName:"p"},"containers-storage.conf(5)")," to be ignored. The user must specify additional options via the ",(0,o.kt)("inlineCode",{parentName:"p"},"--storage-opt")," flag."),(0,o.kt)("h4",{id:"--runrootvalue"},(0,o.kt)("strong",{parentName:"h4"},"--runroot"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,'Storage state directory where all state information is stored (default: "/run/containers/storage" for UID 0, "/run/user/$UID/run" for other users).\nDefault state dir configured in ',(0,o.kt)("inlineCode",{parentName:"p"},"containers-storage.conf(5)"),"."),(0,o.kt)("h4",{id:"--runtimevalue"},(0,o.kt)("strong",{parentName:"h4"},"--runtime"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,"Name of the OCI runtime as specified in containers.conf or absolute path to the OCI compatible binary used to run containers."),(0,o.kt)("h4",{id:"--runtime-flagflag"},(0,o.kt)("strong",{parentName:"h4"},"--runtime-flag"),"=",(0,o.kt)("em",{parentName:"h4"},"flag")),(0,o.kt)("p",null,"Adds global flags for the container runtime. To list the supported flags, please\nconsult the manpages of the selected container runtime (",(0,o.kt)("inlineCode",{parentName:"p"},"runc")," is the default\nruntime, the manpage to consult is ",(0,o.kt)("inlineCode",{parentName:"p"},"runc(8)"),". When the machine is configured\nfor cgroup V2, the default runtime is ",(0,o.kt)("inlineCode",{parentName:"p"},"crun"),", the manpage to consult is ",(0,o.kt)("inlineCode",{parentName:"p"},"crun(8)"),".)."),(0,o.kt)("p",null,"Note: Do not pass the leading ",(0,o.kt)("inlineCode",{parentName:"p"},"--")," to the flag. To pass the runc flag ",(0,o.kt)("inlineCode",{parentName:"p"},"--log-format json"),"\nto podman build, the option given would be ",(0,o.kt)("inlineCode",{parentName:"p"},"--runtime-flag log-format=json"),"."),(0,o.kt)("h4",{id:"--sshvalue"},(0,o.kt)("strong",{parentName:"h4"},"--ssh"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,"This option allows the user to change the ssh mode, meaning that rather than using the default ",(0,o.kt)("strong",{parentName:"p"},"golang")," mode, one can instead use ",(0,o.kt)("strong",{parentName:"p"},"--ssh=native"),"\nto use the installed ssh binary and config file declared in containers.conf."),(0,o.kt)("h4",{id:"--storage-drivervalue"},(0,o.kt)("strong",{parentName:"h4"},"--storage-driver"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,"Storage driver. The default storage driver for UID 0 is configured in ",(0,o.kt)("inlineCode",{parentName:"p"},"containers-storage.conf(5)")," in rootless mode), and is ",(0,o.kt)("em",{parentName:"p"},"vfs")," for non-root users when ",(0,o.kt)("em",{parentName:"p"},"fuse-overlayfs")," is not available. The ",(0,o.kt)("inlineCode",{parentName:"p"},"STORAGE_DRIVER")," environment variable overrides the default. The --storage-driver specified driver overrides all."),(0,o.kt)("p",null,"Overriding this option will cause the ",(0,o.kt)("em",{parentName:"p"},"storage-opt")," settings in ",(0,o.kt)("inlineCode",{parentName:"p"},"containers-storage.conf(5)")," to be ignored. The user must\nspecify additional options via the ",(0,o.kt)("inlineCode",{parentName:"p"},"--storage-opt")," flag."),(0,o.kt)("h4",{id:"--storage-optvalue"},(0,o.kt)("strong",{parentName:"h4"},"--storage-opt"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,"Specify a storage driver option. Default storage driver options are configured in ",(0,o.kt)("inlineCode",{parentName:"p"},"containers-storage.conf(5)"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"STORAGE_OPTS"),' environment variable overrides the default. The --storage-opt specified options override all. Specify --storage-opt="" so no storage options will be used.'),(0,o.kt)("h4",{id:"--syslog"},(0,o.kt)("strong",{parentName:"h4"},"--syslog")),(0,o.kt)("p",null,"Output logging information to syslog as well as the console (default ",(0,o.kt)("em",{parentName:"p"},"false"),")."),(0,o.kt)("p",null,"On remote clients, including Mac and Windows (excluding WSL2) machines, logging is directed to the file $HOME/.config/containers/podman.log."),(0,o.kt)("h4",{id:"--tmpdirpath"},(0,o.kt)("strong",{parentName:"h4"},"--tmpdir"),"=",(0,o.kt)("em",{parentName:"h4"},"path")),(0,o.kt)("p",null,"Path to the tmp directory, for libpod runtime content. Defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"$XDG_RUNTIME_DIR/libpod/tmp")," as rootless and ",(0,o.kt)("inlineCode",{parentName:"p"},"/run/libpod/tmp")," as rootful."),(0,o.kt)("p",null,"NOTE --tmpdir is not used for the temporary storage of downloaded images. Use the environment variable ",(0,o.kt)("inlineCode",{parentName:"p"},"TMPDIR")," to change the temporary storage location of downloaded container images. Podman defaults to use ",(0,o.kt)("inlineCode",{parentName:"p"},"/var/tmp"),"."),(0,o.kt)("h4",{id:"--transient-store"},(0,o.kt)("strong",{parentName:"h4"},"--transient-store")),(0,o.kt)("p",null,"Enables a global transient storage mode where all container metadata is stored on non-persistent media (i.e. in the location specified by ",(0,o.kt)("inlineCode",{parentName:"p"},"--runroot"),").\nThis mode allows starting containers faster, as well as guaranteeing a fresh state on boot in case of unclean shutdowns or other problems. However\nit is not compatible with a traditional model where containers persist across reboots."),(0,o.kt)("p",null,"Default value for this is configured in ",(0,o.kt)("inlineCode",{parentName:"p"},"containers-storage.conf(5)"),"."),(0,o.kt)("h4",{id:"--urlvalue"},(0,o.kt)("strong",{parentName:"h4"},"--url"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,"URL to access Podman service (default from ",(0,o.kt)("inlineCode",{parentName:"p"},"containers.conf"),", rootless ",(0,o.kt)("inlineCode",{parentName:"p"},"unix://run/user/$UID/podman/podman.sock")," or as root ",(0,o.kt)("inlineCode",{parentName:"p"},"unix://run/podman/podman.sock"),").\nSetting this option will switch the ",(0,o.kt)("strong",{parentName:"p"},"--remote")," option to true."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"CONTAINER_HOST")," is of the format ",(0,o.kt)("inlineCode",{parentName:"li"},"<schema>://[<user[:<password>]@]<host>[:<port>][<path>]"))),(0,o.kt)("p",null,"Details:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"schema")," is one of:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ssh")," (default): a local unix(7) socket on the named ",(0,o.kt)("inlineCode",{parentName:"li"},"host")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"port"),", reachable via SSH"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tcp"),": an unencrypted, unauthenticated TCP connection to the named ",(0,o.kt)("inlineCode",{parentName:"li"},"host")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"port")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"unix"),": a local unix(7) socket at the specified ",(0,o.kt)("inlineCode",{parentName:"li"},"path"),", or the default for the user"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"user")," will default to either ",(0,o.kt)("inlineCode",{parentName:"li"},"root")," or the current running user (",(0,o.kt)("inlineCode",{parentName:"li"},"ssh")," only)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"password")," has no default (",(0,o.kt)("inlineCode",{parentName:"li"},"ssh")," only)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"host")," must be provided and is either the IP or name of the machine hosting the Podman service (",(0,o.kt)("inlineCode",{parentName:"li"},"ssh")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"tcp"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"port")," defaults to 22 (",(0,o.kt)("inlineCode",{parentName:"li"},"ssh")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"tcp"),")"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"path")," defaults to either ",(0,o.kt)("inlineCode",{parentName:"li"},"/run/podman/podman.sock"),", or ",(0,o.kt)("inlineCode",{parentName:"li"},"/run/user/$UID/podman/podman.sock")," if running rootless (",(0,o.kt)("inlineCode",{parentName:"li"},"unix"),"), or must be explicitly specified (",(0,o.kt)("inlineCode",{parentName:"li"},"ssh"),")")),(0,o.kt)("p",null,"URL value resolution precedence:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"command line value"),(0,o.kt)("li",{parentName:"ul"},"environment variable ",(0,o.kt)("inlineCode",{parentName:"li"},"CONTAINER_HOST")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"containers.conf")," ",(0,o.kt)("inlineCode",{parentName:"li"},"service_destinations")," table"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"unix://run/podman/podman.sock"))),(0,o.kt)("p",null,"Remote connections use local containers.conf for default."),(0,o.kt)("p",null,"Some example URL values in valid formats:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"unix://run/podman/podman.sock"),(0,o.kt)("li",{parentName:"ul"},"unix://run/user/$UID/podman/podman.sock"),(0,o.kt)("li",{parentName:"ul"},"ssh://notroot@localhost:22/run/user/$UID/podman/podman.sock"),(0,o.kt)("li",{parentName:"ul"},"ssh://root@localhost:22/run/podman/podman.sock"),(0,o.kt)("li",{parentName:"ul"},"tcp://localhost:34451"),(0,o.kt)("li",{parentName:"ul"},"tcp://127.0.0.1:34451")),(0,o.kt)("h4",{id:"--version--v"},(0,o.kt)("strong",{parentName:"h4"},"--version"),", ",(0,o.kt)("strong",{parentName:"h4"},"-v")),(0,o.kt)("p",null,"Print the version"),(0,o.kt)("h4",{id:"--volumepathvalue"},(0,o.kt)("strong",{parentName:"h4"},"--volumepath"),"=",(0,o.kt)("em",{parentName:"h4"},"value")),(0,o.kt)("p",null,'Volume directory where builtin volume information is stored (default: "/var/lib/containers/storage/volumes" for UID 0, "$HOME/.local/share/containers/storage/volumes" for other users). Default volume path can be overridden in ',(0,o.kt)("inlineCode",{parentName:"p"},"containers.conf"),"."),(0,o.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,o.kt)("p",null,"Podman can set up environment variables from env of ","[engine]"," table in containers.conf. These variables can be overridden by passing environment variables before the ",(0,o.kt)("inlineCode",{parentName:"p"},"podman")," commands."),(0,o.kt)("h4",{id:"containers_conf"},(0,o.kt)("strong",{parentName:"h4"},"CONTAINERS_CONF")),(0,o.kt)("p",null,"Set default locations of containers.conf file"),(0,o.kt)("h4",{id:"containers_registries_conf"},(0,o.kt)("strong",{parentName:"h4"},"CONTAINERS_REGISTRIES_CONF")),(0,o.kt)("p",null,"Set default location of the registries.conf file."),(0,o.kt)("h4",{id:"containers_storage_conf"},(0,o.kt)("strong",{parentName:"h4"},"CONTAINERS_STORAGE_CONF")),(0,o.kt)("p",null,"Set default location of the storage.conf file."),(0,o.kt)("h4",{id:"container_connection"},(0,o.kt)("strong",{parentName:"h4"},"CONTAINER_CONNECTION")),(0,o.kt)("p",null,"Override default ",(0,o.kt)("inlineCode",{parentName:"p"},"--connection")," value to access Podman service. Also enabled --remote option."),(0,o.kt)("h4",{id:"container_host"},(0,o.kt)("strong",{parentName:"h4"},"CONTAINER_HOST")),(0,o.kt)("p",null,"Set default ",(0,o.kt)("inlineCode",{parentName:"p"},"--url")," value to access Podman service. Also enabled --remote option."),(0,o.kt)("h4",{id:"container_sshkey"},(0,o.kt)("strong",{parentName:"h4"},"CONTAINER_SSHKEY")),(0,o.kt)("p",null,"Set default ",(0,o.kt)("inlineCode",{parentName:"p"},"--identity")," path to ssh key file value used to access Podman service."),(0,o.kt)("h4",{id:"storage_driver"},(0,o.kt)("strong",{parentName:"h4"},"STORAGE_DRIVER")),(0,o.kt)("p",null,"Set default ",(0,o.kt)("inlineCode",{parentName:"p"},"--storage-driver")," value."),(0,o.kt)("h4",{id:"storage_opts"},(0,o.kt)("strong",{parentName:"h4"},"STORAGE_OPTS")),(0,o.kt)("p",null,"Set default ",(0,o.kt)("inlineCode",{parentName:"p"},"--storage-opts")," value."),(0,o.kt)("h4",{id:"tmpdir"},(0,o.kt)("strong",{parentName:"h4"},"TMPDIR")),(0,o.kt)("p",null,"Set the temporary storage location of downloaded container images. Podman defaults to use ",(0,o.kt)("inlineCode",{parentName:"p"},"/var/tmp"),"."),(0,o.kt)("h4",{id:"xdg_config_home"},(0,o.kt)("strong",{parentName:"h4"},"XDG_CONFIG_HOME")),(0,o.kt)("p",null,"In Rootless mode configuration files are read from ",(0,o.kt)("inlineCode",{parentName:"p"},"XDG_CONFIG_HOME")," when\nspecified, otherwise in the home directory of the user under\n",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers"),"."),(0,o.kt)("h4",{id:"xdg_data_home"},(0,o.kt)("strong",{parentName:"h4"},"XDG_DATA_HOME")),(0,o.kt)("p",null,"In Rootless mode images are pulled under ",(0,o.kt)("inlineCode",{parentName:"p"},"XDG_DATA_HOME")," when specified,\notherwise in the home directory of the user under\n",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.local/share/containers/storage"),"."),(0,o.kt)("h4",{id:"xdg_runtime_dir"},(0,o.kt)("strong",{parentName:"h4"},"XDG_RUNTIME_DIR")),(0,o.kt)("p",null,"In Rootless mode temporary configuration data is stored in ",(0,o.kt)("inlineCode",{parentName:"p"},"${XDG_RUNTIME_DIR}/containers"),"."),(0,o.kt)("h2",{id:"remote-access"},"Remote Access"),(0,o.kt)("p",null,"The Podman command can be used with remote services using the ",(0,o.kt)("inlineCode",{parentName:"p"},"--remote")," flag. Connections can\nbe made using local unix domain sockets, ssh or directly to tcp sockets. When specifying the\npodman --remote flag, only the global options ",(0,o.kt)("inlineCode",{parentName:"p"},"--url"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"--identity"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"--log-level"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"--connection")," are used."),(0,o.kt)("p",null,"Connection information can also be managed using the containers.conf file."),(0,o.kt)("h2",{id:"exit-codes"},"Exit Codes"),(0,o.kt)("p",null,"The exit code from ",(0,o.kt)("inlineCode",{parentName:"p"},"podman")," gives information about why the container\nfailed to run or why it exited. When ",(0,o.kt)("inlineCode",{parentName:"p"},"podman")," commands exit with a non-zero code,\nthe exit codes follow the ",(0,o.kt)("inlineCode",{parentName:"p"},"chroot")," standard, see below:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"125")," The error is with podman ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"itself"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ podman run --foo busybox; echo $?\nError: unknown flag: --foo\n125\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"126")," Executing a ",(0,o.kt)("em",{parentName:"p"},"contained command")," and the ",(0,o.kt)("em",{parentName:"p"},"command")," cannot be invoked"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ podman run busybox /etc; echo $?\nError: container_linux.go:346: starting container process caused "exec: \\"/etc\\": permission denied": OCI runtime error\n126\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"127")," Executing a ",(0,o.kt)("em",{parentName:"p"},"contained command")," and the ",(0,o.kt)("em",{parentName:"p"},"command"),' cannot be found\n$ podman run busybox foo; echo $?\nError: container_linux.go:346: starting container process caused "exec: \\"foo\\": executable file not found in $PATH": OCI runtime error\n127'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Exit code")," ",(0,o.kt)("em",{parentName:"p"},"contained command")," exit code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ podman run busybox /bin/sh -c 'exit 3'; echo $?\n3\n")),(0,o.kt)("h2",{id:"commands"},"COMMANDS"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Command"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-attach"},"podman-attach(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Attach to a running container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-auto-update"},"podman-auto-update(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Auto update containers according to their auto-update policy")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-build"},"podman-build(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Build a container image using a Containerfile.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-commit"},"podman-commit(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Create new image based on the changed container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-completion"},"podman-completion(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Generate shell completion scripts")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-container"},"podman-container(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Manage containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-cp"},"podman-cp(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Copy files/folders between a container and the local filesystem.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-create"},"podman-create(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Create a new container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-diff"},"podman-diff(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Inspect changes on a container or image's filesystem.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-events"},"podman-events(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Monitor Podman events")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-exec"},"podman-exec(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Execute a command in a running container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-export"},"podman-export(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Export a container's filesystem contents as a tar archive.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-generate"},"podman-generate(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Generate structured data based on containers, pods or volumes.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-healthcheck"},"podman-healthcheck(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Manage healthchecks for containers")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-history"},"podman-history(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Show the history of an image.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-image"},"podman-image(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Manage images.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-images"},"podman-images(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"List images in local storage.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-import"},"podman-import(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Import a tarball and save it as a filesystem image.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-info"},"podman-info(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Displays Podman related system information.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-init"},"podman-init(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Initialize one or more containers")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-inspect"},"podman-inspect(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Display a container, image, volume, network, or pod's configuration.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-kill"},"podman-kill(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Kill the main process in one or more containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-load"},"podman-load(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Load image(s) from a tar archive into container storage.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-login"},"podman-login(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Login to a container registry.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-logout"},"podman-logout(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Logout of a container registry.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-logs"},"podman-logs(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Display the logs of one or more containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-machine"},"podman-machine(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Manage Podman's virtual machine")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-manifest"},"podman-manifest(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Create and manipulate manifest lists and image indexes.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-mount"},"podman-mount(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Mount a working container's root filesystem.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-network"},"podman-network(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Manage Podman networks.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-pause"},"podman-pause(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Pause one or more containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-kube"},"podman-kube(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Play containers, pods or volumes based on a structured input file.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-pod"},"podman-pod(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Management tool for groups of containers, called pods.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-port"},"podman-port(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"List port mappings for a container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-ps"},"podman-ps(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Prints out information about containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-pull"},"podman-pull(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Pull an image from a registry.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-push"},"podman-push(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Push an image, manifest list or image index from local storage to elsewhere.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-rename"},"podman-rename(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Rename an existing container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-restart"},"podman-restart(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Restart one or more containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-rm"},"podman-rm(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Remove one or more containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-rmi"},"podman-rmi(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes one or more locally stored images.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-run"},"podman-run(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Run a command in a new container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-save"},"podman-save(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Save image(s) to an archive.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-search"},"podman-search(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Search a registry for an image.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-secret"},"podman-secret(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Manage podman secrets.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-start"},"podman-start(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Start one or more containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-stats"},"podman-stats(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Display a live stream of one or more container's resource usage statistics.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-stop"},"podman-stop(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Stop one or more running containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-system"},"podman-system(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Manage podman.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-tag"},"podman-tag(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Add an additional name to a local image.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-top"},"podman-top(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Display the running processes of a container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-unmount"},"podman-unmount(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Unmount a working container's root filesystem.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-unpause"},"podman-unpause(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Unpause one or more containers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-unshare"},"podman-unshare(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Run a command inside of a modified user namespace.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-untag"},"podman-untag(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Removes one or more names from a locally-stored image.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-update"},"podman-update(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Updates the cgroup configuration of a given container.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-version"},"podman-version(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Display the Podman version information.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-volume"},"podman-volume(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Simple management tool for volumes.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"commands/podman-wait"},"podman-wait(1)")),(0,o.kt)("td",{parentName:"tr",align:null},"Wait on one or more containers to stop and print their exit codes.")))),(0,o.kt)("h2",{id:"configuration-files"},"CONFIGURATION FILES"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"containers.conf")," (",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/share/containers/containers.conf"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/containers/containers.conf"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/containers.conf"),")"),(0,o.kt)("p",null,"Podman has builtin defaults for command line options. These defaults can be overridden using the containers.conf configuration files."),(0,o.kt)("p",null,"Distributions ship the ",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/share/containers/containers.conf")," file with their default settings. Administrators can override fields in this file by creating the ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/containers/containers.conf")," file. Users can further modify defaults by creating the ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/containers.conf")," file. Podman merges its builtin defaults with the specified fields from these files, if they exist. Fields specified in the users file override the administrator's file, which overrides the distribution's file, which override the built-in defaults."),(0,o.kt)("p",null,"Podman uses builtin defaults if no containers.conf file is found."),(0,o.kt)("p",null,"If the ",(0,o.kt)("strong",{parentName:"p"},"CONTAINERS_CONF")," environment variable is set, then its value is used for the containers.conf file rather than the default."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"mounts.conf")," (",(0,o.kt)("inlineCode",{parentName:"p"},"/usr/share/containers/mounts.conf"),")"),(0,o.kt)("p",null,"The mounts.conf file specifies volume mount directories that are automatically mounted inside containers when executing the ",(0,o.kt)("inlineCode",{parentName:"p"},"podman run")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"podman start")," commands. Administrators can override the defaults file by creating ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/containers/mounts.conf"),"."),(0,o.kt)("p",null,"When Podman runs in rootless mode, the file ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/mounts.conf")," will override the default if it exists. Please refer to containers-mounts.conf(5) for further details."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"policy.json")," (",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/containers/policy.json"),")"),(0,o.kt)("p",null,"Signature verification policy files are used to specify policy, e.g. trusted keys, applicable when deciding whether to accept an image, or individual signatures of that image, as valid."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"registries.conf")," (",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/containers/registries.conf"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/registries.conf"),")"),(0,o.kt)("p",null,"registries.conf is the configuration file which specifies which container registries should be consulted when completing image names which do not include a registry or domain portion."),(0,o.kt)("p",null,"Non root users of Podman can create the ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/registries.conf")," file to be used instead of the system defaults."),(0,o.kt)("p",null,"If the ",(0,o.kt)("strong",{parentName:"p"},"CONTAINERS_REGISTRIES_CONF")," environment variable is set, then its value is used for the registries.conf file rather than the default."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"storage.conf")," (",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/containers/storage.conf"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/storage.conf"),")"),(0,o.kt)("p",null,"storage.conf is the storage configuration file for all tools using containers/storage"),(0,o.kt)("p",null,"The storage configuration file specifies all of the available container storage options for tools using shared container storage."),(0,o.kt)("p",null,"When Podman runs in rootless mode, the file ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/storage.conf")," is used instead of the system defaults."),(0,o.kt)("p",null,"If the ",(0,o.kt)("strong",{parentName:"p"},"CONTAINERS_STORAGE_CONF")," environment variable is set, then its value is used for the storage.conf file rather than the default."),(0,o.kt)("h2",{id:"rootless-mode"},"Rootless mode"),(0,o.kt)("p",null,"Podman can also be used as non-root user. When podman runs in rootless mode, a user namespace is automatically created for the user, defined in /etc/subuid and /etc/subgid."),(0,o.kt)("p",null,"Containers created by a non-root user are not visible to other users and are not seen or managed by Podman running as root."),(0,o.kt)("p",null,"It is required to have multiple UIDS/GIDS set for a user. Be sure the user is present in the files ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/subuid")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/subgid"),"."),(0,o.kt)("p",null,"Execute the following commands to add the ranges to the files"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo usermod --add-subuids 10000-75535 USERNAME\n$ sudo usermod --add-subgids 10000-75535 USERNAME\n")),(0,o.kt)("p",null,"Or just add the content manually."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ echo USERNAME:10000:65536 >> /etc/subuid\n$ echo USERNAME:10000:65536 >> /etc/subgid\n")),(0,o.kt)("p",null,"See the ",(0,o.kt)("inlineCode",{parentName:"p"},"subuid(5)")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"subgid(5)")," man pages for more information."),(0,o.kt)("p",null,"Images are pulled under ",(0,o.kt)("inlineCode",{parentName:"p"},"XDG_DATA_HOME")," when specified, otherwise in the home directory of the user under ",(0,o.kt)("inlineCode",{parentName:"p"},".local/share/containers/storage"),"."),(0,o.kt)("p",null,"Currently slirp4netns or pasta is required to be installed to create a network\ndevice, otherwise rootless containers need to run in the network namespace of\nthe host."),(0,o.kt)("p",null,"In certain environments like HPC (High Performance Computing), users cannot take advantage of the additional UIDs and GIDs from the /etc/subuid and /etc/subgid systems. However, in this environment, rootless Podman can operate with a single UID. To make this work, set the ",(0,o.kt)("inlineCode",{parentName:"p"},"ignore_chown_errors")," option in the ",(0,o.kt)("inlineCode",{parentName:"p"},"containers-storage.conf(5)")," file. This option tells Podman when pulling an image to ignore chown errors when attempting to change a file in a container image to match the non-root UID in the image. This means all files get saved as the user's UID. Note this could cause issues when running the container."),(0,o.kt)("h3",{id:"note-unsupported-file-systems-in-rootless-mode"},(0,o.kt)("strong",{parentName:"h3"},"NOTE:")," Unsupported file systems in rootless mode"),(0,o.kt)("p",null,"The Overlay file system (OverlayFS) is not supported with kernels prior to 5.12.9 in rootless mode. The fuse-overlayfs package is a tool that provides the functionality of OverlayFS in user namespace that allows mounting file systems in rootless environments. It is recommended to install the fuse-overlayfs package. In rootless mode, Podman will automatically use the fuse-overlayfs program as the mount_program if installed, as long as the $HOME/.config/containers/storage.conf file was not previously created. If storage.conf exists in the homedir, add ",(0,o.kt)("inlineCode",{parentName:"p"},'mount_program = "/usr/bin/fuse-overlayfs"')," under ",(0,o.kt)("inlineCode",{parentName:"p"},"[storage.options.overlay]")," to enable this feature."),(0,o.kt)("p",null,"The Network File System (NFS) and other distributed file systems (for example: Lustre, Spectrum Scale, the General Parallel File System (GPFS)) are not supported when running in rootless mode as these file systems do not understand user namespace. However, rootless Podman can make use of an NFS Homedir by modifying the ",(0,o.kt)("inlineCode",{parentName:"p"},"$HOME/.config/containers/storage.conf")," to have the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphroot")," option point to a directory stored on local (Non NFS) storage."),(0,o.kt)("p",null,"For more information, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/troubleshooting.md"},"Podman Troubleshooting Page"),"."),(0,o.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/common/blob/main/docs/containers-mounts.conf.5.md"},"containers-mounts.conf(5)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/common/blob/main/docs/containers.conf.5.md"},"containers.conf(5)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/image/blob/main/docs/containers-registries.conf.5.md"},"containers-registries.conf(5)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/storage/blob/main/docs/containers-storage.conf.5.md"},"containers-storage.conf(5)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/buildah/blob/main/docs/buildah.1.md"},"buildah(1)")),", ",(0,o.kt)("strong",{parentName:"p"},"oci-hooks(5)"),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/image/blob/main/docs/containers-policy.json.5.md"},"containers-policy.json(5)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/crun/blob/main/crun.1.md"},"crun(1)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/opencontainers/runc/blob/main/man/runc.8.md"},"runc(8)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.unix.com/man-page/linux/5/subuid"},"subuid(5)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.unix.com/man-page/linux/5/subgid"},"subgid(5)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/rootless-containers/slirp4netns/blob/master/slirp4netns.1.md"},"slirp4netns(1)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://passt.top/builds/latest/web/passt.1.html"},"pasta(1)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/containers/conmon/blob/main/docs/conmon.8.md"},"conmon(8)"))),(0,o.kt)("h2",{id:"history"},"HISTORY"),(0,o.kt)("p",null,"Dec 2016, Originally compiled by Dan Walsh ",(0,o.kt)("a",{parentName:"p",href:"mailto:dwalsh@redhat.com"},"dwalsh@redhat.com")))}u.isMDXComponent=!0},8762:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/podman-logo-orig-712a0500fc9e0758c3d1b3f0ef44e38f.png"}}]);