"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[7761],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(n),k=o,h=m["".concat(c,".").concat(k)]||m[k]||d[k]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=k;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<r;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3502:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={},s="Podman socket activation",i={unversionedId:"tutorials/socket_activation",id:"tutorials/socket_activation",title:"Podman socket activation",description:"Socket activation conceptually works by having systemd create a socket (e.g. TCP, UDP or Unix",source:"@site/docs/tutorials/socket_activation.md",sourceDirName:"tutorials",slug:"/tutorials/socket_activation",permalink:"/website-new/docs/tutorials/socket_activation",draft:!1,editUrl:"https://github.com/containers/website-new/docs/tutorials/socket_activation.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"rootless_tutorial",permalink:"/website-new/docs/tutorials/rootless_tutorial"}},c={},l=[{value:"Socket activation of the API service",id:"socket-activation-of-the-api-service",level:2},{value:"Socket activation of containers",id:"socket-activation-of-containers",level:2},{value:"Example: socket-activated echo server container in a systemd service",id:"example-socket-activated-echo-server-container-in-a-systemd-service",level:3},{value:"Example: socket activate an Apache HTTP server with systemd-socket-activate",id:"example-socket-activate-an-apache-http-server-with-systemd-socket-activate",level:3},{value:"Disabling the network with <em>--network=none</em>",id:"disabling-the-network-with---networknone",level:3},{value:"Native network performance over the socket-activated socket",id:"native-network-performance-over-the-socket-activated-socket",level:3},{value:"Starting a socket-activated service",id:"starting-a-socket-activated-service",level:3},{value:"Stopping a socket-activated service",id:"stopping-a-socket-activated-service",level:3}],p={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"podman-socket-activation"},"Podman socket activation"),(0,o.kt)("p",null,"Socket activation conceptually works by having systemd create a socket (e.g. TCP, UDP or Unix\nsocket). As soon as a client connects to the socket, systemd will start the systemd service that is\nconfigured for the socket. The newly started program inherits the file descriptor of the socket\nand can then accept the incoming connection (in other words run the system call ",(0,o.kt)("inlineCode",{parentName:"p"},"accept()"),").\nThis description corresponds to the default systemd socket configuration\n",(0,o.kt)("a",{parentName:"p",href:"https://www.freedesktop.org/software/systemd/man/systemd.socket.html#Accept="},(0,o.kt)("inlineCode",{parentName:"a"},"Accept=no")),"\nthat lets the service accept the socket."),(0,o.kt)("p",null,"Podman supports two forms of socket activation:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Socket activation of the API service"),(0,o.kt)("li",{parentName:"ul"},"Socket activation of containers")),(0,o.kt)("h2",{id:"socket-activation-of-the-api-service"},"Socket activation of the API service"),(0,o.kt)("p",null,"The architecture looks like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"stateDiagram-v2\n    [*] --\x3e systemd: first client connects\n    systemd --\x3e podman: socket inherited via fork/exec\n")),(0,o.kt)("p",null,"The file ",(0,o.kt)("em",{parentName:"p"},"/usr/lib/systemd/user/podman.socket")," on a Fedora system defines the Podman API socket for\nrootless users:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ cat /usr/lib/systemd/user/podman.socket\n[Unit]\nDescription=Podman API Socket\nDocumentation=man:podman-system-service(1)\n\n[Socket]\nListenStream=%t/podman/podman.sock\nSocketMode=0660\n\n[Install]\nWantedBy=sockets.target\n")),(0,o.kt)("p",null,"The socket is configured to be a Unix socket and can be started like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ systemctl --user start podman.socket\n$ ls $XDG_RUNTIME_DIR/podman/podman.sock\n/run/user/1000/podman/podman.sock\n$\n")),(0,o.kt)("p",null,"The socket can later be used by for instance ",(0,o.kt)("strong",{parentName:"p"},"docker-compose")," that needs a Docker-compatible API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/podman/podman.sock\n$ docker-compose up\n")),(0,o.kt)("p",null,"When ",(0,o.kt)("strong",{parentName:"p"},"docker-compose")," or any other client connects to the UNIX socket ",(0,o.kt)("inlineCode",{parentName:"p"},"$XDG_RUNTIME_DIR/podman/podman.sock"),",\nthe service ",(0,o.kt)("em",{parentName:"p"},"podman.service")," is started. See its definition in the file ",(0,o.kt)("em",{parentName:"p"},"/usr/lib/systemd/user/podman.service"),"."),(0,o.kt)("h2",{id:"socket-activation-of-containers"},"Socket activation of containers"),(0,o.kt)("p",null,"Since version 3.4.0 Podman supports socket activation of containers, i.e., passing\na socket-activated socket to the container. Thanks to the fork/exec model of Podman, the socket will be first\ninherited by conmon and then by the OCI runtime and finally by the container\nas can be seen in the following diagram:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},'stateDiagram-v2\n    [*] --\x3e systemd: first client connects\n    systemd --\x3e podman: socket inherited via fork/exec\n    state "OCI runtime" as s2\n    podman --\x3e conmon: socket inherited via double fork/exec\n    conmon --\x3e s2: socket inherited via fork/exec\n    s2 --\x3e container: socket inherited via exec\n')),(0,o.kt)("p",null,"This type of socket activation can be used in systemd services that are generated with the command\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.podman.io/en/latest/markdown/podman-generate-systemd.1.html"},(0,o.kt)("inlineCode",{parentName:"a"},"podman generate systemd")),".\nThe container must also support socket activation. Not all software daemons support socket activation\nbut it's getting more popular. For instance Apache HTTP server, MariaDB, DBUS, PipeWire, Gunicorn, CUPS\nall have socket activation support."),(0,o.kt)("h3",{id:"example-socket-activated-echo-server-container-in-a-systemd-service"},"Example: socket-activated echo server container in a systemd service"),(0,o.kt)("p",null,"Let's try out ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eriksjolund/socket-activate-echo/pkgs/container/socket-activate-echo"},"socket-activate-echo"),", a simple echo server container that supports socket activation."),(0,o.kt)("p",null,"Create the container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ podman create --rm --name echo --network none ghcr.io/eriksjolund/socket-activate-echo\n")),(0,o.kt)("p",null,"Generate the systemd service unit"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ mkdir -p ~/.config/systemd/user\n$ podman generate systemd --name --new echo > ~/.config/systemd/user/echo.service\n")),(0,o.kt)("p",null,"A socket activated service also requires a systemd socket unit.\nCreate the file ",(0,o.kt)("em",{parentName:"p"},"~/.config/systemd/user/echo.socket")," that defines the\nsockets that the container should use"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'[Unit]\nDescription=echo server\n\n[Socket]\nListenStream=127.0.0.1:3000\nListenDatagram=127.0.0.1:3000\nListenStream=[::1]:3000\nListenDatagram=[::1]:3000\nListenStream=%h/echo_stream_sock\n\n# VMADDR_CID_ANY (-1U) = 2^32 -1 = 4294967295\n# See "man vsock"\nListenStream=vsock:4294967295:3000\n\n[Install]\nWantedBy=default.target\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"%h")," is a systemd specifier that expands to the user's home directory."),(0,o.kt)("p",null,"After editing the unit files, systemd needs to reload its configuration"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ systemctl --user daemon-reload\n")),(0,o.kt)("p",null,"Start the socket unit"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ systemctl --user start echo.socket\n")),(0,o.kt)("p",null,"Test the echo server with the program ",(0,o.kt)("strong",{parentName:"p"},"socat")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ echo hello | socat - tcp4:127.0.0.1:3000\nhello\n$ echo hello | socat - tcp6:[::1]:3000\nhello\n$ echo hello | socat - udp4:127.0.0.1:3000\nhello\n$ echo hello | socat - udp6:[::1]:3000\nhello\n$ echo hello | socat - unix:$HOME/echo_stream_sock\nhello\n$ echo hello | socat - VSOCK-CONNECT:1:3000\nhello\n")),(0,o.kt)("p",null,"The echo server works as expected. It replies ",(0,o.kt)("em",{parentName:"p"},'"hello"')," after receiving the text ",(0,o.kt)("em",{parentName:"p"},'"hello"'),"."),(0,o.kt)("h3",{id:"example-socket-activate-an-apache-http-server-with-systemd-socket-activate"},"Example: socket activate an Apache HTTP server with systemd-socket-activate"),(0,o.kt)("p",null,"Instead of setting up a systemd service to test out socket activation, an alternative is to use the command-line\ntool ",(0,o.kt)("a",{parentName:"p",href:"https://www.freedesktop.org/software/systemd/man/systemd-socket-activate.html#"},(0,o.kt)("strong",{parentName:"a"},"systemd-socket-activate")),"."),(0,o.kt)("p",null,"Let's build a container image for the Apache HTTP server that is configured to support socket activation on port 8080."),(0,o.kt)("p",null,"Create a new directory ",(0,o.kt)("em",{parentName:"p"},"ctr")," and a file ",(0,o.kt)("em",{parentName:"p"},"ctr/Containerfile")," with this contents"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'FROM docker.io/library/fedora\nRUN dnf -y update && dnf install -y httpd && dnf clean all\nRUN sed -i "s/Listen 80/Listen 127.0.0.1:8080/g" /etc/httpd/conf/httpd.conf\nCMD ["/usr/sbin/httpd", "-DFOREGROUND"]\n')),(0,o.kt)("p",null,"Build the container image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ podman build -t socket-activate-httpd ctr\n")),(0,o.kt)("p",null,"In one shell, start ",(0,o.kt)("strong",{parentName:"p"},"systemd-socket-activate"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ systemd-socket-activate -l 8080 podman run --rm --network=none localhost/socket-activate-httpd\n")),(0,o.kt)("p",null,"The TCP port number 8080 is given as an option to ",(0,o.kt)("strong",{parentName:"p"},"systemd-socket-activate"),". The ",(0,o.kt)("strong",{parentName:"p"},"--publish")," (",(0,o.kt)("strong",{parentName:"p"},"-p"),")\noption for ",(0,o.kt)("inlineCode",{parentName:"p"},"podman run")," is not used."),(0,o.kt)("p",null,"In another shell, fetch a web page from ",(0,o.kt)("em",{parentName:"p"},"localhost:8080")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ curl -s localhost:8080 | head -6\n<!doctype html>\n<html>\n  <head>\n<meta charset='utf-8'>\n<meta name='viewport' content='width=device-width, initial-scale=1'>\n<title>Test Page for the HTTP Server on Fedora</title>\n$\n")),(0,o.kt)("h3",{id:"disabling-the-network-with---networknone"},"Disabling the network with ",(0,o.kt)("em",{parentName:"h3"},"--network=none")),(0,o.kt)("p",null,"If the container only needs to communicate over the socket-activated socket, it's possible to disable\nthe network by passing ",(0,o.kt)("strong",{parentName:"p"},"--network=none")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"podman run"),". This improves security because the\ncontainer then runs with less privileges."),(0,o.kt)("h3",{id:"native-network-performance-over-the-socket-activated-socket"},"Native network performance over the socket-activated socket"),(0,o.kt)("p",null,"When using rootless Podman, network traffic is normally passed through slirp4netns. This comes with\na performance penalty. Fortunately, communication over the socket-activated socket does not pass through\nslirp4netns so it has the same performance characteristics as the normal network on the host."),(0,o.kt)("h3",{id:"starting-a-socket-activated-service"},"Starting a socket-activated service"),(0,o.kt)("p",null,"There is a delay when the first connection is made because the container needs to\nstart up. To minimize this delay, consider passing ",(0,o.kt)("strong",{parentName:"p"},"--pull=never")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"podman run")," and instead\npull the container image beforehand. Instead of waiting for the start of the service to be triggered by the\nfirst client connecting to it, the service can also be explicitly started (",(0,o.kt)("inlineCode",{parentName:"p"},"systemctl --user start echo.service"),")."),(0,o.kt)("h3",{id:"stopping-a-socket-activated-service"},"Stopping a socket-activated service"),(0,o.kt)("p",null,"Some services run a command (configured by the systemd directive ",(0,o.kt)("strong",{parentName:"p"},"ExecStart"),") that exits after some time of inactivity.\nDepending on the restart configuration for the service\n(systemd directive ",(0,o.kt)("a",{parentName:"p",href:"https://www.freedesktop.org/software/systemd/man/systemd.service.html#Restart="},(0,o.kt)("strong",{parentName:"a"},"Restart")),"),\nit may then be stopped. An example of this is ",(0,o.kt)("em",{parentName:"p"},"podman.service")," that stops after some time of inactivity.\nThe service will be started again when the next client connects to the socket."))}d.isMDXComponent=!0}}]);