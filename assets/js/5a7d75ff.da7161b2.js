"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[1358],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),m=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(r.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(n),c=i,h=u["".concat(r,".").concat(c)]||u[c]||d[c]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=c;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[u]="string"==typeof e?e:i,s[1]=l;for(var m=2;m<o;m++)s[m]=n[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},98879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(87462),i=(n(67294),n(3905));const o={title:"Working with container image manifest lists",layout:"default",author:"cevich",categories:["blogs"],tags:["containers","podman","buildah","skopeo","images","multiarch"]},s=void 0,l={permalink:"/blogs/2021/10/11/multiarch",source:"@site/blog/2021-10-11-multiarch.md",title:"Working with container image manifest lists",description:"podman logo",date:"2021-10-11T00:00:00.000Z",formattedDate:"October 11, 2021",tags:[{label:"containers",permalink:"/blogs/tags/containers"},{label:"podman",permalink:"/blogs/tags/podman"},{label:"buildah",permalink:"/blogs/tags/buildah"},{label:"skopeo",permalink:"/blogs/tags/skopeo"},{label:"images",permalink:"/blogs/tags/images"},{label:"multiarch",permalink:"/blogs/tags/multiarch"}],readingTime:5.695,hasTruncateMarker:!0,authors:[{name:"cevich"}],frontMatter:{title:"Working with container image manifest lists",layout:"default",author:"cevich",categories:["blogs"],tags:["containers","podman","buildah","skopeo","images","multiarch"]},prevItem:{title:"Why can't I use sudo with rootless Podman?",permalink:"/blogs/2021/10/16/sudo-with-rootless-podman"},nextItem:{title:"Working with container image manifest lists",permalink:"/blogs/2021/10/11/new"}},r={authorsImageUrls:[void 0]},m=[{value:"By Chris Evich GitHub",id:"by-chris-evich-github",level:2},{value:"Easy Mode",id:"easy-mode",level:2},{value:"Cheat Mode",id:"cheat-mode",level:2},{value:"Safe Mode",id:"safe-mode",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:m},u="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(u,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"podman logo",src:n(1382).Z,width:"228",height:"61"})),(0,i.kt)("h1",{id:"working-with-container-image-manifest-lists"},"Working with container image manifest lists"),(0,i.kt)("h2",{id:"by-chris-evich-github"},"By Chris Evich ",(0,i.kt)("a",{parentName:"h2",href:"https://github.com/cevich"},"GitHub")),(0,i.kt)("p",null,"In this article, I will be using\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/containers/podman"},"Podman"),",\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/containers/buildah"},"Buildah"),",\nand\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/containers/skopeo"},"Skopeo"),'\ncontainer tools to produce an image that supports multiple architectures\nunder a single "name".'),(0,i.kt)("p",null,"Simply put, a ",(0,i.kt)("em",{parentName:"p"},"manifest list")," is just a collection of images with some\nadditional metadata. While in principle any set of images can be in a\nmanifest list, the intended use is housing multi-platform and/or multi-arch\nimages. Otherwise, manifest lists mostly look and feel like regular container\nimages. You can pull, tag, and run them as you'd expect, with only a few\nexceptions."),(0,i.kt)("p",null,"Two and a half things will likely catch you off-guard:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Pushing manifest lists to registries"),(0,i.kt)("li",{parentName:"ul"},"Removing manifest lists from local storage."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"podman tag")," command is broken for manifest lists in ",(0,i.kt)("inlineCode",{parentName:"li"},"v3.4"),", but\nworks in Buildah ",(0,i.kt)("inlineCode",{parentName:"li"},"v1.23.1"),".")),(0,i.kt)("p",null,"Due to the way image-name references are internally processed, you should\n",(0,i.kt)("strong",{parentName:"p"},"not")," use the usual ",(0,i.kt)("inlineCode",{parentName:"p"},"podman push")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"podman rmi")," subcommands.\n",(0,i.kt)("strong",{parentName:"p"},"THEY WILL NOT DO WHAT YOU EXPECT!")," Instead, you'll want to use\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.podman.io/en/latest/markdown/podman-manifest-push.1.html"},(0,i.kt)("inlineCode",{parentName:"a"},"podman manifest push --all <src> <dest>"))," and\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.podman.io/en/latest/markdown/podman-manifest-rm.1.html"},(0,i.kt)("inlineCode",{parentName:"a"},"podman manifest rm <name>")),"\n(similarly for ",(0,i.kt)("inlineCode",{parentName:"p"},"buildah"),"). These will push/remove the manifest list\nitself instead of the contents. Similarly for tagging if you're on Podman ",(0,i.kt)("inlineCode",{parentName:"p"},"v3.4"),",\nuse the ",(0,i.kt)("inlineCode",{parentName:"p"},"buildah tag")," command instead."),(0,i.kt)("p",null,"Great, so manifest lists sound awesome; I can pull, and run them.\nI can delete them with ",(0,i.kt)("inlineCode",{parentName:"p"},"podman manifest rm"),", push with\n",(0,i.kt)("inlineCode",{parentName:"p"},"podman manifest push --all <src> <dest>"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"tag")," with Buildah,\nbut how can I create them?"),(0,i.kt)("h2",{id:"easy-mode"},"Easy Mode"),(0,i.kt)("p",null,"The simplest way to create a multi-arch manifest list is by enabling\nemulation to support any non-native ",(0,i.kt)("inlineCode",{parentName:"p"},"RUN")," instructions. This is done\nby installing the ",(0,i.kt)("inlineCode",{parentName:"p"},"qemu-user-static")," package (or equivalent) for your\ndistribution. Also ensure the related ",(0,i.kt)("inlineCode",{parentName:"p"},"systemd-binfmt.service")," is\nenabled/started. Not all distributions support these, so skip to the\nnext sections for details on other methods if required."),(0,i.kt)("p",null,"Assuming emulation is in place, let\u2019s look at this example ",(0,i.kt)("em",{parentName:"p"},"Containerfile"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"FROM registry.access.redhat.com/ubi8:latest\nRUN uname -a\n")),(0,i.kt)("p",null,"Building a multi-arch manifest for this can be done with one build command.\nThis is thanks to features of recent versions of Buildah (",(0,i.kt)("inlineCode",{parentName:"p"},"v1.23")," and later)\nand Podman (",(0,i.kt)("inlineCode",{parentName:"p"},"v3.4")," and later):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ platarch=linux/amd64,linux/ppc64le,linux/arm64,linux/s390x\n$ buildah build --jobs=4 --platform=$platarch --manifest shazam .\n")),(0,i.kt)("p",null,"The key options used here are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--manifest")," - Add the resulting image into the named manifest list (",(0,i.kt)("inlineCode",{parentName:"li"},"shazam"),"),\ncreating it if it doesn't already exist."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--platform")," - Accepts a comma-separated list of ",(0,i.kt)("inlineCode",{parentName:"li"},"platform/architecture"),"\ntuples (",(0,i.kt)("inlineCode",{parentName:"li"},"linux/amd64,linux/ppc64le,linux/arm64,linux/s390x"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--jobs")," - Optional, causes the builds to execute in parallel using\nthe specified number of threads (",(0,i.kt)("inlineCode",{parentName:"li"},"4"),"). i.e., the build finishes much\nfaster.")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note"),": Even this simple ",(0,i.kt)("inlineCode",{parentName:"p"},"Containerfile")," and build command will produce\nquite a lot of output. Assuming it's successful, you may use the following\ncommand to examine the architectures:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ skopeo inspect --raw containers-storage:localhost/shazam | \\\n      jq '.manifests[].platform.architecture'\n")),(0,i.kt)("p",null,"Similarly,\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/containers/skopeo/blob/main/docs/skopeo-inspect.1.md"},(0,i.kt)("inlineCode",{parentName:"a"},"skopeo inspect")),"\ncan be used to examine manifest lists on registry servers - just swap\n",(0,i.kt)("inlineCode",{parentName:"p"},"containers-storage:")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"docker://"),". This is very useful for\ndetermining if a base image is a manifest list, and if it is, which\narchitecture the images were built for. Querying metadata in this\nway doesn't require pulling down all the data, so it's quite fast."),(0,i.kt)("p",null,"Lastly and as mentioned at the beginning, pushing and removing manifest\nlists is special. You ",(0,i.kt)("strong",{parentName:"p"},"must")," use ",(0,i.kt)("inlineCode",{parentName:"p"},"manifest push")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"manifest rm")," sub-commands.\nOtherwise, Podman will act on the contents rather than the manifest list\nitself. Then for push, you must specify both the source and destination.\nA somewhat contrived example might be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ buildah tag localhost/shazam quay.io/example/shazam\n$ podman manifest rm localhost/shazam\n$ podman manifest push --all quay.io/example/shazam docker://quay.io/example/shazam\n")),(0,i.kt)("p",null,"If you don't specify both the source and push destination, you'll\nget an error message. In case you're wondering, the ",(0,i.kt)("inlineCode",{parentName:"p"},"--all")," argument is\nrequired. This tells Podman to push the manifest list AND the contents,\nwhich is nearly always what you want to do. If you don\u2019t use the ",(0,i.kt)("inlineCode",{parentName:"p"},"--all"),"\noption, only the native architecture will be sent without any warning or\nother indications."),(0,i.kt)("h2",{id:"cheat-mode"},"Cheat Mode"),(0,i.kt)("p",null,"In the case of public automation services, where convenience and ease of\nmaintenance are essential, ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/orgs/multiarch/repositories"},"there are a set of container images that will\nenable and configure ",(0,i.kt)("inlineCode",{parentName:"a"},"qermu-user-static")," for\nyou"),".\nThese images must be run in ",(0,i.kt)("inlineCode",{parentName:"p"},"--privileged")," mode but will make\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/multiarch/qemu-user-static#getting-started"},"setting things up in the automation system very easy (docs)"),".\nOnce set up, the image-build method is precisely the same as the above section."),(0,i.kt)("p",null,"That said, this is not an endorsement, and you will need to perform your own due\ndiligence. I only mention it in this article because if I don't, somebody is\nbound to bring it up. It's likely a fine setup for small, non-critical cases.\nBut this will probably be a \"no-go\", where provenance and security are critical.\nSo, if that applies to you, continue on to the next section."),(0,i.kt)("h2",{id:"safe-mode"},"Safe Mode"),(0,i.kt)("p",null,"In highly secure, locked-down, production environments using commercially\nsupported distributions, additional safety is often paramount over the\nconvenience of emulation. Additionally if the build is simply too complex,\nemulation-slow, or involves multiple incompatible platforms (i.e., Windows\nand Darwin) then it simply may not be practical."),(0,i.kt)("p",null,"In these cases, essentially you need to perform the builds separately,\ncollect the images on one system, then combine them all into a manifest\nlist as a separate step."),(0,i.kt)("p",null,"For example, let's assume that you've built the ",(0,i.kt)("inlineCode",{parentName:"p"},"shazam")," image on several\nlinux hosts, tagged each of them with their architecture name, and pushed them\nup to the ",(0,i.kt)("inlineCode",{parentName:"p"},"quay.io/example/shazam")," repository. Combining them into a\nmanifest list might look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ REPO=quay.io/example/shazam\n$ podman manifest create $REPO:latest\n$ for IMGTAG in amd64 s390x ppc64le arm64; do \\\n          podman manifest add $REPO:latest docker://$REPO:IMGTAG; \\\n      done\n$ podman manifest push --all $REPO:latest docker://$REPO:latest\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note:")," For the\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.podman.io/en/latest/markdown/podman-manifest-add.1.html"},(0,i.kt)("inlineCode",{parentName:"a"},"manifest add")),"\nsub-command, the ",(0,i.kt)("strong",{parentName:"p"},"target manifest list name comes first, then the image to add"),".\nIn the above example, the command inside the loop will pull down the\nplatform-tagged image (metadata) and add it into the new manifest list. There\nis no need for a separate\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.podman.io/en/latest/markdown/podman-pull.1.html"},"pull"),"\noperation, and Podman will automatically figure out the constituent architecture\nand platform information. If not, there are\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.podman.io/en/latest/markdown/podman-manifest-add.1.html#arch"},"options to specify them manually"),"\nduring the ",(0,i.kt)("inlineCode",{parentName:"p"},"manifest add")," operation. Lastly, in case of an accident, you'll\nfind a\n",(0,i.kt)("a",{parentName:"p",href:"https://docs.podman.io/en/latest/markdown/podman-manifest-remove.1.html"},(0,i.kt)("inlineCode",{parentName:"a"},"manifest remove")),"\nsub-command (",(0,i.kt)("strong",{parentName:"p"},"same argument-order as ",(0,i.kt)("inlineCode",{parentName:"strong"},"manifest add")),")."),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"While countless additional details are available in the man pages, this basic\nknowledge should cover ",(0,i.kt)("inlineCode",{parentName:"p"},"90%")," of your needs. With these essential tricks in\nhand, producing your own multi-arch and/or multi-platform manifest lists\nis just a matter of practice (or some new bash scripts)."),(0,i.kt)("p",null,"Please also remember to pay attention to the tooling versions, as several\nbugs and deficiencies are present in earlier editions. On that same note,\nif you do encounter any strange or unexpected behavior, please reach out\nto the ",(0,i.kt)("a",{parentName:"p",href:"https://podman.io/community/#slack-irc-matrix-and-discord"},"upstream community for assistance"),"."))}d.isMDXComponent=!0},1382:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/podman-ce586c2894883ad9c353492b5e1893a8.svg"}}]);