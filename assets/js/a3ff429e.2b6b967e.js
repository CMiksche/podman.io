"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[8106],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},l="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),l=c(n),k=o,d=l["".concat(s,".").concat(k)]||l[k]||h[k]||r;return n?a.createElement(d,i(i({ref:t},m),{},{components:n})):a.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=k;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[l]="string"==typeof e?e:o,i[1]=p;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={},i=void 0,p={unversionedId:"podman-container/podman-container-checkpoint",id:"podman-container/podman-container-checkpoint",title:"podman-container-checkpoint",description:"% podman-container-checkpoint 1",source:"@site/docs/podman-container/podman-container-checkpoint.md",sourceDirName:"podman-container",slug:"/podman-container/podman-container-checkpoint",permalink:"/websites-new/docs/podman-container/podman-container-checkpoint",draft:!1,editUrl:"https://github.com/containers/website-new/docs/podman-container/podman-container-checkpoint.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-container",permalink:"/websites-new/docs/podman-container/"},next:{title:"podman-container-cleanup",permalink:"/websites-new/docs/podman-container/podman-container-cleanup"}},s={},c=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--all</strong>, <strong>-a</strong>",id:"--all--a",level:4},{value:"<strong>--compress</strong>, <strong>-c</strong>=<strong>zstd</strong> | <em>none</em> | <em>gzip</em>",id:"--compress--czstd--none--gzip",level:4},{value:"<strong>--create-image</strong>=<em>image</em>",id:"--create-imageimage",level:4},{value:"<strong>--export</strong>, <strong>-e</strong>=<em>archive</em>",id:"--export--earchive",level:4},{value:"<strong>--file-locks</strong>",id:"--file-locks",level:4},{value:"<strong>--ignore-rootfs</strong>",id:"--ignore-rootfs",level:4},{value:"<strong>--ignore-volumes</strong>",id:"--ignore-volumes",level:4},{value:"<strong>--keep</strong>, <strong>-k</strong>",id:"--keep--k",level:4},{value:"<strong>--latest</strong>, <strong>-l</strong>",id:"--latest--l",level:4},{value:"<strong>--leave-running</strong>, <strong>-R</strong>",id:"--leave-running--r",level:4},{value:"<strong>--pre-checkpoint</strong>, <strong>-P</strong>",id:"--pre-checkpoint--p",level:4},{value:"<strong>--print-stats</strong>",id:"--print-stats",level:4},{value:"<strong>--tcp-established</strong>",id:"--tcp-established",level:4},{value:"<strong>--with-previous</strong>",id:"--with-previous",level:4},{value:"EXAMPLES",id:"examples",level:2},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2}],m={toc:c},l="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"% podman-container-checkpoint 1"),(0,o.kt)("h2",{id:"name"},"NAME"),(0,o.kt)("p",null,"podman","-","container","-","checkpoint - Checkpoints one or more running containers"),(0,o.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"podman container checkpoint")," ","[",(0,o.kt)("em",{parentName:"p"},"options"),"]"," ",(0,o.kt)("em",{parentName:"p"},"container")," ","[",(0,o.kt)("em",{parentName:"p"},"container")," ...]"),(0,o.kt)("h2",{id:"description"},"DESCRIPTION"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"podman container checkpoint")," checkpoints all the processes in one or more ",(0,o.kt)("em",{parentName:"p"},"containers"),". A ",(0,o.kt)("em",{parentName:"p"},"container")," can be restored from a checkpoint with ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-container/podman-container-restore"},"podman-container-restore")),". The ",(0,o.kt)("em",{parentName:"p"},"container IDs")," or ",(0,o.kt)("em",{parentName:"p"},"names")," are used as input."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"IMPORTANT: If the container is using ",(0,o.kt)("strong",{parentName:"em"},"systemd")," as ",(0,o.kt)("strong",{parentName:"em"},"entrypoint")," checkpointing the container might not be possible.")),(0,o.kt)("h2",{id:"options"},"OPTIONS"),(0,o.kt)("h4",{id:"--all--a"},(0,o.kt)("strong",{parentName:"h4"},"--all"),", ",(0,o.kt)("strong",{parentName:"h4"},"-a")),(0,o.kt)("p",null,"Checkpoint all running ",(0,o.kt)("em",{parentName:"p"},"containers"),".\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),".\\\n",(0,o.kt)("em",{parentName:"p"},"IMPORTANT: This OPTION does not need a container name or ID as input argument.")),(0,o.kt)("h4",{id:"--compress--czstd--none--gzip"},(0,o.kt)("strong",{parentName:"h4"},"--compress"),", ",(0,o.kt)("strong",{parentName:"h4"},"-c"),"=",(0,o.kt)("strong",{parentName:"h4"},"zstd")," | ",(0,o.kt)("em",{parentName:"h4"},"none")," | ",(0,o.kt)("em",{parentName:"h4"},"gzip")),(0,o.kt)("p",null,"Specify the compression algorithm used for the checkpoint archive created\nwith the ",(0,o.kt)("strong",{parentName:"p"},"--export, -e")," OPTION. Possible algorithms are ",(0,o.kt)("strong",{parentName:"p"},"zstd"),", ",(0,o.kt)("em",{parentName:"p"},"none"),"\nand ",(0,o.kt)("em",{parentName:"p"},"gzip"),".\\\nOne possible reason to use ",(0,o.kt)("em",{parentName:"p"},"none")," is to enable faster creation of checkpoint\narchives. Not compressing the checkpoint archive can result in faster checkpoint\narchive creation.\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"zstd"),"."),(0,o.kt)("h4",{id:"--create-imageimage"},(0,o.kt)("strong",{parentName:"h4"},"--create-image"),"=",(0,o.kt)("em",{parentName:"h4"},"image")),(0,o.kt)("p",null,"Create a checkpoint image from a running container. This is a standard OCI image\ncreated in the local image store. It consists of a single layer that contains\nall of the checkpoint files. The content of this image layer is in the same format as a\ncheckpoint created with ",(0,o.kt)("strong",{parentName:"p"},"--export"),". A checkpoint image can be pushed to a\nstandard container registry and pulled on a different system to enable container\nmigration. In addition, the image can be exported with ",(0,o.kt)("strong",{parentName:"p"},"podman image save")," and\ninspected with ",(0,o.kt)("strong",{parentName:"p"},"podman inspect"),". Inspecting a checkpoint image would display\nadditional information, stored as annotations, about the host environment used\nto do the checkpoint:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.name"),": Human-readable name of the original\ncontainer.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.rawImageName"),": Unprocessed name of the\nimage used to create the original container (as specified by the user).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.rootfsImageID"),": ID of the image used to\ncreate the original container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.rootfsImageName"),": Image name used to\ncreate the original container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.podman.version"),": Version of Podman used to\ncreate the checkpoint.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.criu.version"),": Version of CRIU used to\ncreate the checkpoint.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.runtime.name"),": Container runtime (e.g.,\nrunc, crun) used to create the checkpoint.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.runtime.version"),": Version of the container\nruntime used to create the checkpoint.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.conmon.version"),": Version of conmon used\nwith the original container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.host.arch"),": CPU architecture of the host\non which the checkpoint was created.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.host.kernel"),": Version of Linux kernel\nof the host where the checkpoint was created.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.cgroups.version"),": cgroup version used by\nthe host where the checkpoint was created.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.distribution.version"),": Version of host\ndistribution on which the checkpoint was created.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"io.podman.annotations.checkpoint.distribution.name"),": Name of host\ndistribution on which the checkpoint was created."))),(0,o.kt)("h4",{id:"--export--earchive"},(0,o.kt)("strong",{parentName:"h4"},"--export"),", ",(0,o.kt)("strong",{parentName:"h4"},"-e"),"=",(0,o.kt)("em",{parentName:"h4"},"archive")),(0,o.kt)("p",null,"Export the checkpoint to a tar.gz file. The exported checkpoint can be used\nto import the ",(0,o.kt)("em",{parentName:"p"},"container")," on another system and thus enabling container live\nmigration. This checkpoint archive also includes all changes to the ",(0,o.kt)("em",{parentName:"p"},"container's"),"\nroot file-system, if not explicitly disabled using ",(0,o.kt)("strong",{parentName:"p"},"--ignore-rootfs"),"."),(0,o.kt)("h4",{id:"--file-locks"},(0,o.kt)("strong",{parentName:"h4"},"--file-locks")),(0,o.kt)("p",null,"Checkpoint a ",(0,o.kt)("em",{parentName:"p"},"container")," with file locks. If an application running in the container\nis using file locks, this OPTION is required during checkpoint and restore. Otherwise\ncheckpointing ",(0,o.kt)("em",{parentName:"p"},"containers")," with file locks is expected to fail. If file locks are not\nused, this option is ignored.\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),"."),(0,o.kt)("h4",{id:"--ignore-rootfs"},(0,o.kt)("strong",{parentName:"h4"},"--ignore-rootfs")),(0,o.kt)("p",null,"If a checkpoint is exported to a tar.gz file it is possible with the help of ",(0,o.kt)("strong",{parentName:"p"},"--ignore-rootfs")," to explicitly disable including changes to the root file-system into the checkpoint archive file.\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),".\\\n",(0,o.kt)("em",{parentName:"p"},"IMPORTANT: This OPTION only works in combination with ",(0,o.kt)("strong",{parentName:"em"},"--export, -e"),".")),(0,o.kt)("h4",{id:"--ignore-volumes"},(0,o.kt)("strong",{parentName:"h4"},"--ignore-volumes")),(0,o.kt)("p",null,"This OPTION must be used in combination with the ",(0,o.kt)("strong",{parentName:"p"},"--export, -e")," OPTION.\nWhen this OPTION is specified, the content of volumes associated with\nthe ",(0,o.kt)("em",{parentName:"p"},"container")," will not be included into the checkpoint tar.gz file.\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),"."),(0,o.kt)("h4",{id:"--keep--k"},(0,o.kt)("strong",{parentName:"h4"},"--keep"),", ",(0,o.kt)("strong",{parentName:"h4"},"-k")),(0,o.kt)("p",null,"Keep all temporary log and statistics files created by CRIU during checkpointing. These files are not deleted if checkpointing fails for further debugging. If checkpointing succeeds these files are theoretically not needed, but if these files are needed Podman can keep the files for further analysis.\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),"."),(0,o.kt)("h4",{id:"--latest--l"},(0,o.kt)("strong",{parentName:"h4"},"--latest"),", ",(0,o.kt)("strong",{parentName:"h4"},"-l")),(0,o.kt)("p",null,"Instead of providing the ",(0,o.kt)("em",{parentName:"p"},"container ID")," or ",(0,o.kt)("em",{parentName:"p"},"name"),", use the last created ",(0,o.kt)("em",{parentName:"p"},"container"),". If other methods than Podman are used to run ",(0,o.kt)("em",{parentName:"p"},"containers")," such as ",(0,o.kt)("inlineCode",{parentName:"p"},"CRI-O"),", the last started ",(0,o.kt)("em",{parentName:"p"},"container")," could be from either of those methods.\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),".\\\n",(0,o.kt)("em",{parentName:"p"},"IMPORTANT: This OPTION is not available with the remote Podman client, including Mac and Windows (excluding WSL2) machines. This OPTION does not need a container name or ID as input argument.")),(0,o.kt)("h4",{id:"--leave-running--r"},(0,o.kt)("strong",{parentName:"h4"},"--leave-running"),", ",(0,o.kt)("strong",{parentName:"h4"},"-R")),(0,o.kt)("p",null,"Leave the ",(0,o.kt)("em",{parentName:"p"},"container")," running after checkpointing instead of stopping it.\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),"."),(0,o.kt)("h4",{id:"--pre-checkpoint--p"},(0,o.kt)("strong",{parentName:"h4"},"--pre-checkpoint"),", ",(0,o.kt)("strong",{parentName:"h4"},"-P")),(0,o.kt)("p",null,"Dump the ",(0,o.kt)("em",{parentName:"p"},"container's")," memory information only, leaving the ",(0,o.kt)("em",{parentName:"p"},"container")," running. Later\noperations will supersede prior dumps. It only works on ",(0,o.kt)("inlineCode",{parentName:"p"},"runc 1.0-rc3")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"higher"),".\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),"."),(0,o.kt)("p",null,"The functionality to only checkpoint the memory of the container and in a second\ncheckpoint only write out the memory pages which have changed since the first\ncheckpoint relies on the Linux kernel's soft-dirty bit, which is not available\non all systems as it depends on the system architecture and the configuration\nof the Linux kernel. Podman will verify if the current system supports this\nfunctionality and return an error if the current system does not support it."),(0,o.kt)("h4",{id:"--print-stats"},(0,o.kt)("strong",{parentName:"h4"},"--print-stats")),(0,o.kt)("p",null,"Print out statistics about checkpointing the container(s). The output is\nrendered in a JSON array and contains information about how much time different\ncheckpoint operations required. Many of the checkpoint statistics are created\nby CRIU and just passed through to Podman. The following information is provided\nin the JSON array:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"podman_checkpoint_duration"),": Overall time (in microseconds) needed to create\nall checkpoints.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"runtime_checkpoint_duration"),": Time (in microseconds) the container runtime\nneeded to create the checkpoint.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"freezing_time"),": Time (in microseconds) CRIU needed to pause (freeze) all\nprocesses in the container (measured by CRIU).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"frozen_time"),": Time (in microseconds) all processes in the container were\npaused (measured by CRIU).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"memdump_time"),": Time (in microseconds) needed to extract all required memory\npages from all container processes (measured by CRIU).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"memwrite_time"),": Time (in microseconds) needed to write all required memory\npages to the corresponding checkpoint image files (measured by CRIU).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"pages_scanned"),": Number of memory pages scanned to determine if they need\nto be checkpointed (measured by CRIU).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"pages_written"),": Number of memory pages actually written to the checkpoint\nimage files (measured by CRIU)."))),(0,o.kt)("p",null,"The default is ",(0,o.kt)("strong",{parentName:"p"},"false"),"."),(0,o.kt)("h4",{id:"--tcp-established"},(0,o.kt)("strong",{parentName:"h4"},"--tcp-established")),(0,o.kt)("p",null,"Checkpoint a ",(0,o.kt)("em",{parentName:"p"},"container")," with established TCP connections. If the checkpoint\nimage contains established TCP connections, this OPTION is required during\nrestore. Defaults to not checkpointing ",(0,o.kt)("em",{parentName:"p"},"containers")," with established TCP\nconnections.\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),"."),(0,o.kt)("h4",{id:"--with-previous"},(0,o.kt)("strong",{parentName:"h4"},"--with-previous")),(0,o.kt)("p",null,"Check out the ",(0,o.kt)("em",{parentName:"p"},"container")," with previous criu image files in pre-dump. It only works on ",(0,o.kt)("inlineCode",{parentName:"p"},"runc 1.0-rc3")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"higher"),".\\\nThe default is ",(0,o.kt)("strong",{parentName:"p"},"false"),".\\\n",(0,o.kt)("em",{parentName:"p"},"IMPORTANT: This OPTION is not available with ",(0,o.kt)("strong",{parentName:"em"},"--pre-checkpoint")),"."),(0,o.kt)("p",null,"This option requires that the option ",(0,o.kt)("strong",{parentName:"p"},"--pre-checkpoint")," has been used before on the\nsame container. Without an existing pre-checkpoint, this option will fail."),(0,o.kt)("p",null,"Also see ",(0,o.kt)("strong",{parentName:"p"},"--pre-checkpoint")," for additional information about ",(0,o.kt)("strong",{parentName:"p"},"--pre-checkpoint"),"\navailability on different systems."),(0,o.kt)("h2",{id:"examples"},"EXAMPLES"),(0,o.kt)("p",null,'Make a checkpoint for the container "mywebserver".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# podman container checkpoint mywebserver\n")),(0,o.kt)("p",null,'Create a checkpoint image for the container "mywebserver".'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# podman container checkpoint --create-image mywebserver-checkpoint-1 mywebserver\n")),(0,o.kt)("p",null,"Dumps the container's memory information of the latest container into an archive."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# podman container checkpoint -P -e pre-checkpoint.tar.gz -l\n")),(0,o.kt)("p",null,"Keep the container's memory information from an older dump and add the new container's memory information."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# podman container checkpoint --with-previous -e checkpoint.tar.gz -l\n")),(0,o.kt)("p",null,"Dump the container's memory information of the latest container into an archive with the specified compress method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# podman container checkpoint -l --compress=none --export=dump.tar\n# podman container checkpoint -l --compress=gzip --export=dump.tar.gz\n")),(0,o.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman"},"podman(1)")),", ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-container/podman-container-restore"},"podman-container-restore(1)")),", ",(0,o.kt)("strong",{parentName:"p"},"criu(8)")),(0,o.kt)("h2",{id:"history"},"HISTORY"),(0,o.kt)("p",null,"September 2018, Originally compiled by Adrian Reber ",(0,o.kt)("a",{parentName:"p",href:"mailto:areber@redhat.com"},"areber@redhat.com")))}h.isMDXComponent=!0}}]);