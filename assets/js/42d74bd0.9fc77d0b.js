"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[42213],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>p});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=c(t),g=o,p=d["".concat(l,".").concat(g)]||d[g]||u[g]||i;return t?a.createElement(p,r(r({ref:n},m),{},{components:t})):a.createElement(p,r({ref:n},m))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},73249:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const i={title:"Podman Go bindings",layout:"default",author:"lsm5",categories:["blogs"],tags:["podman","containers","v2","bindings","go"]},r=void 0,s={permalink:"/blogs/2020/08/10/podman-go-bindings",source:"@site/blog/2020-08-10-podman-go-bindings.md",title:"Podman Go bindings",description:"podman logo",date:"2020-08-10T00:00:00.000Z",formattedDate:"August 10, 2020",tags:[{label:"podman",permalink:"/blogs/tags/podman"},{label:"containers",permalink:"/blogs/tags/containers"},{label:"v2",permalink:"/blogs/tags/v-2"},{label:"bindings",permalink:"/blogs/tags/bindings"},{label:"go",permalink:"/blogs/tags/go"}],readingTime:12.21,hasTruncateMarker:!0,authors:[{name:"lsm5"}],frontMatter:{title:"Podman Go bindings",layout:"default",author:"lsm5",categories:["blogs"],tags:["podman","containers","v2","bindings","go"]},prevItem:{title:"Podman Go bindings",permalink:"/blogs/2020/08/10/new"},nextItem:{title:"Improved systemd integration with Podman 2.0",permalink:"/blogs/2020/08/02/new"}},l={authorsImageUrls:[void 0]},c=[{value:"By Lokesh Mandvekar GitHub and Parker VanRoy",id:"by-lokesh-mandvekar-github-and-parker-vanroy",level:2},{value:"Introduction",id:"introduction",level:2},{value:"How do I use them",id:"how-do-i-use-them",level:2},{value:'Start the Podman system service <a name="start-service"></a>',id:"start-the-podman-system-service-",level:3},{value:'Connect to the Podman system service <a name="connect-service"></a>',id:"connect-to-the-podman-system-service-",level:3},{value:'Pull an image <a name="pull-images"></a>',id:"pull-an-image-",level:3},{value:'List images <a name="list-images"></a>',id:"list-images-",level:3},{value:'Create and Start a Container from an Image <a name="create-start-container"></a>',id:"create-and-start-a-container-from-an-image-",level:3},{value:'List Containers <a name="list-containers"></a>',id:"list-containers-",level:3},{value:'Inspect Container <a name="inspect-container"></a>',id:"inspect-container-",level:3},{value:'Stop Container <a name="stop-container"></a>',id:"stop-container-",level:3},{value:'Debugging tips <a name="debugging-tips"></a>',id:"debugging-tips-",level:3},{value:"Wrap Up",id:"wrap-up",level:2},{value:"References",id:"references",level:2},{value:"Contribute",id:"contribute",level:2},{value:"Acknowledgments",id:"acknowledgments",level:2}],m={toc:c},d="wrapper";function u(e){let{components:n,...i}=e;return(0,o.kt)(d,(0,a.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"podman logo",src:t(1382).Z,width:"228",height:"61"})),(0,o.kt)("h1",{id:"podman-go-bindings"},"Podman Go bindings"),(0,o.kt)("h2",{id:"by-lokesh-mandvekar-github-and-parker-vanroy"},"By Lokesh Mandvekar ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/lsm5"},"GitHub")," and Parker VanRoy"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"In the release of Podman 2.0, we removed the experimental tag\nfrom its recently introduced RESTful service. While it might\nbe interesting to interact with a RESTFul server using curl,\nusing a set of Go based bindings is probably a more direct\nroute to a production ready application. Let\u2019s take a look\nat how easily that can be accomplished."),(0,o.kt)("p",null,"If you haven't yet, ",(0,o.kt)("a",{parentName:"p",href:"https://golang.org/doc/install"},"install Go"),"."),(0,o.kt)("p",null,"Be careful to double-check that the version of golang is new\nenough (i.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"go version"),"), version 1.13.x or higher is\nsupported. If needed, Go sources and binaries can be fetched\nfrom the ",(0,o.kt)("a",{parentName:"p",href:"https://golang.org/dl/"},"official Go website"),"."),(0,o.kt)("p",null,"The Podman Go bindings are a set of functions to allow\ndevelopers to execute Podman operations from within their Go\nbased application. The Go bindings connect to a Podman service\nwhich can run locally or on a remote machine. You can perform\nmany operations including pulling and listing images, starting,\nstopping or inspecting containers. Currently, the Podman\nrepository has bindings available for operations on images,\ncontainers, pods, networks and manifests among others. The\nbindings are available on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/tree/v2.0"},"v2.0 branch in the\nupstream Podman repository"),".\nYou can fetch the bindings for your application using Go modules:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd $HOME\n$ mkdir example && cd example\n$ go mod init example.com\ngo: creating new go.mod: module example.com\n$ go get github.com/containers/podman/v2@v2.0.4\ngo: downloading github.com/containers/podman/v2 v2.0.4\ngo get: github.com/containers/podman/v2@v2.0.4: parsing go.mod:\n    module declares its path as: github.com/containers/libpod/v2\n            but was required as: github.com/containers/podman/v2\n")),(0,o.kt)("p",null,"This creates a new ",(0,o.kt)("inlineCode",{parentName:"p"},"go.mod")," file in the current directory that looks as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"module example.com\n\ngo 1.14\n\nrequire github.com/containers/libpod/v2 v2.0.4 // indirect\n")),(0,o.kt)("p",null,"You can also try a demo application with the Go modules created already:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ git clone https://github.com/containers/Demos\n$ cd Demos/podman_go_bindings\n$ ls\nREADME.md  go.mod  go.sum  main.go\n")),(0,o.kt)("h2",{id:"how-do-i-use-them"},"How do I use them"),(0,o.kt)("p",null,"In this tutorial, you will learn through basic examples how to:"),(0,o.kt)("ol",{start:0},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#start-service"},"Start the Podman system service")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#connect-service"},"Connect to the Podman system service")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#pull-images"},"Pull images")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#list-images"},"List images")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#create-start-container"},"Create and start a container from an image")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#list-containers"},"List containers")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#inspect-container"},"Inspect the container")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#stop-container"},"Stop the container")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("a",{parentName:"li",href:"#debugging-tips"},"Debugging tips"))),(0,o.kt)("h3",{id:"start-the-podman-system-service-"},"Start the Podman system service ",(0,o.kt)("a",{name:"start-service"})),(0,o.kt)("p",null,"The recommended way to start Podman system service in production mode\nis via systemd socket-activation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ systemctl --user start podman.socket\n")),(0,o.kt)("p",null,"There\u2019s no timeout specified when starting the system service via socket-activation."),(0,o.kt)("p",null,"For purposes of this demo, we will start the service using the Podman\ncommand itself. If you prefer the system service to timeout after, say,\n5000 seconds, you can run it like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ podman system service -t 5000\n")),(0,o.kt)("p",null,"Note that the 5000 seconds uptime is refreshed after every command is received.\nIf you want the service to stay up until the machine is shutdown or the process\nis terminated, use ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," (zero) instead of 5000. For this demo, we will use no timeout:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# -t 0 implies no timeout, default timeout 5 seconds\n$ podman system service -t 0\n")),(0,o.kt)("p",null,"Open another terminal window and check if the Podman socket exists:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ ls /run/user/${UID}/podman\npodman.sock\n")),(0,o.kt)("p",null,"If you\u2019re running the system service as root, podman.sock will be found in /run/podman:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ ls /run/podman\npodman.sock\n")),(0,o.kt)("h3",{id:"connect-to-the-podman-system-service-"},"Connect to the Podman system service ",(0,o.kt)("a",{name:"connect-service"})),(0,o.kt)("p",null,"First, you need to create a connection that connects to the system service.\nThe critical piece of information for setting up a new connection is the endpoint.\nThe endpoint comes in the form of an URI (method:/path/to/socket). For example,\nto connect to the local rootful socket the URI would be ",(0,o.kt)("inlineCode",{parentName:"p"},"unix:/run/podman/podman.sock"),"\nand for a rootless user it would be ",(0,o.kt)("inlineCode",{parentName:"p"},"unix:$(XDG_RUNTIME_DIR)/podman/podman.sock"),",\ntypically: ",(0,o.kt)("inlineCode",{parentName:"p"},"unix:/run/user/${UID}/podman/podman.sock"),"."),(0,o.kt)("p",null,"The following Go example snippet shows how to set up a connection for a rootless user."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Go"},'package main\n\nimport (\n        "context"\n        "fmt"\n        "os"\n\n        "github.com/containers/libpod/v2/libpod/define"\n        "github.com/containers/libpod/v2/pkg/bindings"\n        "github.com/containers/libpod/v2/pkg/bindings/containers"\n        "github.com/containers/libpod/v2/pkg/bindings/images"\n        "github.com/containers/libpod/v2/pkg/domain/entities"\n        "github.com/containers/libpod/v2/pkg/specgen"\n)\n\nfunc main() {\n        fmt.Println("Welcome to the Podman Go bindings tutorial")\n\n        // Get Podman socket location\n        sock_dir := os.Getenv("XDG_RUNTIME_DIR")\n        socket := "unix:" + sock_dir + "/podman/podman.sock"\n\n        // Connect to Podman socket\n        connText, err := bindings.NewConnection(context.Background(), socket)\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n}\n')),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"connText")," variable received from the NewConnection function is of type\ncontext.Context(). In subsequent uses of the bindings, you will use this context\nto direct the bindings to your connection. This can be seen in the examples below."),(0,o.kt)("h3",{id:"pull-an-image-"},"Pull an image ",(0,o.kt)("a",{name:"pull-images"})),(0,o.kt)("p",null,"Next, we will pull a couple of images using the images.Pull() binding.\nThis binding takes three arguments: - The context variable created by the bindings.NewConnection() call in the first example - The image name - Options for image pull"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Append the following lines to your function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Go"},'        // Pull Busybox image (Sample 1)\n        fmt.Println("Pulling Busybox image...")\n        _, err = images.Pull(connText, "docker.io/busybox", entities.ImagePullOptions{})\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n\n        // Pull Fedora image (Sample 2)\n        rawImage := "registry.fedoraproject.org/fedora:latest"\n        fmt.Println("Pulling Fedora image...")\n        _, err = images.Pull(connText, rawImage, entities.ImagePullOptions{})\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ go run main.go\nWelcome to the Podman Go bindings tutorial\nPulling Busybox image...\nPulling Fedora image...\n$\n")),(0,o.kt)("p",null,"The system service side should echo messages like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Trying to pull docker.io/busybox...\nGetting image source signatures\nCopying blob 61c5ed1cbdf8 [--------------------------------------] 0.0b / 0.0b\nCopying config 018c9d7b79 done\nWriting manifest to image destination\nStoring signatures\nTrying to pull registry.fedoraproject.org/fedora:latest...\nGetting image source signatures\nCopying blob dd9f43919ba0 [--------------------------------------] 0.0b / 0.0b\nCopying config 00ff39a8bf done\nWriting manifest to image destination\nStoring signatures\n")),(0,o.kt)("h3",{id:"list-images-"},"List images ",(0,o.kt)("a",{name:"list-images"})),(0,o.kt)("p",null,"Next, we will pull an image using the images.List() binding.\nThis binding takes three arguments:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The context variable created earlier"),(0,o.kt)("li",{parentName:"ul"},"An optional bool 'all'"),(0,o.kt)("li",{parentName:"ul"},"An optional map of filters")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Append the following lines to your function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Go"},'        // List images\n        imageSummary, err := images.List(connText, nil, nil)\n        if err != nil {\n            fmt.Println(err)\n            os.Exit(1)\n        }\n        var names []string\n        for _, i := range imageSummary {\n            names = append(names, i.RepoTags...)\n        }\n        fmt.Println("Listing images...")\n        fmt.Println(names)\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ go run main.go\nWelcome to the Podman Go bindings tutorial\nPulling Busybox image...\nPulling Fedora image...\nListing images...\n[docker.io/library/busybox:latest registry.fedoraproject.org/fedora:latest]\n$\n")),(0,o.kt)("h3",{id:"create-and-start-a-container-from-an-image-"},"Create and Start a Container from an Image ",(0,o.kt)("a",{name:"create-start-container"})),(0,o.kt)("p",null,"To create the container spec, we use specgen.NewSpecGenerator() followed by\ncalling containers.CreateWithSpec() to actually create a new container.\nspecgen.NewSpecGenerator() takes 2 arguments: - name of the image - whether it's a rootfs"),(0,o.kt)("p",null,"containers.CreateWithSpec() takes 2 arguments: - the context created earlier - the spec created by NewSpecGenerator"),(0,o.kt)("p",null,"Next, the container is actually started using the containers.Start() binding.\ncontainers.Start() takes three arguments: - the context - the name or ID of the container created - an optional parameter for detach keys"),(0,o.kt)("p",null,"After the container is started, it's a good idea to ensure the container is\nin a running state before you proceed with further operations.\nThe containers.Wait() takes care of that.\ncontainers.Wait() takes three arguments: - the context - the name or ID of the container created - container state (running/paused/stopped)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Append the following lines to your function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Go"},'        // Container create\n        s := specgen.NewSpecGenerator(rawImage, false)\n        s.Terminal = true\n        r, err := containers.CreateWithSpec(connText, s)\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n\n        // Container start\n        fmt.Println("Starting Fedora container...")\n        err = containers.Start(connText, r.ID, nil)\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n\n        running := define.ContainerStateRunning\n        _, err = containers.Wait(connText, r.ID, &running)\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ go run main.go\nWelcome to the Podman Go bindings tutorial\nPulling image...\nStarting Fedora container...\n$\n")),(0,o.kt)("p",null,"Check if the container is running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ podman ps\nCONTAINER ID  IMAGE                                     COMMAND    CREATED                 STATUS                     PORTS   NAMES\n665831d31e90  registry.fedoraproject.org/fedora:latest  /bin/bash  Less than a second ago  Up Less than a second ago          dazzling_mclean\n$\n")),(0,o.kt)("h3",{id:"list-containers-"},"List Containers ",(0,o.kt)("a",{name:"list-containers"})),(0,o.kt)("p",null,"Containers can be listed using the containers.List() binding.\ncontainers.List() takes seven arguments: - the context - output filters - boolean to show all containers, by default only running containers are listed - number of latest created containers, all states (running/paused/stopped) - boolean to print pod information - boolean to print rootfs size - boolean to print oci runtime and container state"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Append the following lines to your function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Go"},'        // Container list\n        var latestContainers = 1\n        containerLatestList, err := containers.List(connText, nil, nil, &latestContainers, nil, nil, nil)\n        if err != nil {\n            fmt.Println(err)\n            os.Exit(1)\n        }\n        fmt.Printf("Latest container is %s\\n", containerLatestList[0].Names[0])\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ go run main.go\nWelcome to the Podman Go bindings tutorial\nPulling Busybox image...\nPulling Fedora image...\nListing images...\n[docker.io/library/busybox:latest registry.fedoraproject.org/fedora:latest]\nStarting Fedora container...\nLatest container is dazzling_mclean\n$\n")),(0,o.kt)("h3",{id:"inspect-container-"},"Inspect Container ",(0,o.kt)("a",{name:"inspect-container"})),(0,o.kt)("p",null,"Containers can be inspected using the containers.Inspect() binding.\ncontainers.Inspect() takes 3 arguments: - context - image name or ID - optional boolean to check for container size"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Append the following lines to your function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Go"},'        // Container inspect\n        ctrData, err := containers.Inspect(connText, r.ID, nil)\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n        fmt.Printf("Container uses image %s\\n", ctrData.ImageName)\n        fmt.Printf("Container running status is %s\\n", ctrData.State.Status)\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ go run main.go\nWelcome to the Podman Go bindings tutorial\nPulling Busybox image...\nPulling Fedora image...\nListing images...\n[docker.io/library/busybox:latest registry.fedoraproject.org/fedora:latest]\nStarting Fedora container...\nLatest container is peaceful_noether\nFedora Container uses image registry.fedoraproject.org/fedora:latest\nFedora Container running status is running\n$\n")),(0,o.kt)("h3",{id:"stop-container-"},"Stop Container ",(0,o.kt)("a",{name:"stop-container"})),(0,o.kt)("p",null,"A container can be stopped by the containers.Stop() binding.\ncontainers.Stop() takes 3 arguments: - context - image name or ID - optional timeout"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Append the following lines to your function:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Go"},'        // Container stop\n        fmt.Println("Stopping the container...")\n        err = containers.Stop(connText, r.ID, nil)\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n        ctrData, err = containers.Inspect(connText, r.ID, nil)\n        if err != nil {\n                fmt.Println(err)\n                os.Exit(1)\n        }\n        fmt.Printf("Container running status is now %s\\n", ctrData.State.Status)\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Run it:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ go run main.go\nWelcome to the Podman Go bindings tutorial\nPulling Busybox image...\nPulling Fedora image...\nListing images...\n[docker.io/library/busybox:latest registry.fedoraproject.org/fedora:latest]\nStarting Fedora container...\nLatest container is peaceful_noether\nFedora Container uses image registry.fedoraproject.org/fedora:latest\nFedora Container running status is running\nStopping Fedora container...\nContainer running status is now exited\n")),(0,o.kt)("h3",{id:"debugging-tips-"},"Debugging tips ",(0,o.kt)("a",{name:"debugging-tips"})),(0,o.kt)("p",null,"To debug in a development setup, you can start the Podman system service\nin debug mode like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ podman --log-level=debug system service -t 0\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"--log-level=debug")," echoes all the logged requests and is useful to\ntrace the execution path at a finer granularity. A snippet of a sample run looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'INFO[0000] podman filtering at log level debug\nDEBU[0000] Called service.PersistentPreRunE(podman --log-level=debug system service -t0)\nDEBU[0000] Ignoring libpod.conf EventsLogger setting "/home/lsm5/.config/containers/containers.conf". Use "journald" if you want to change this setting and remove libpod.conf files.\nDEBU[0000] Reading configuration file "/usr/share/containers/containers.conf"\nDEBU[0000] Merged system config "/usr/share/containers/containers.conf": {Editors note: the remainder of this line was removed due to Jekyll formatting errors.}\nDEBU[0000] Using conmon: "/usr/bin/conmon"\nDEBU[0000] Initializing boltdb state at /home/lsm5/.local/share/containers/storage/libpod/bolt_state.db\nDEBU[0000] Overriding run root "/run/user/1000/containers" with "/run/user/1000" from database\nDEBU[0000] Using graph driver overlay\nDEBU[0000] Using graph root /home/lsm5/.local/share/containers/storage\nDEBU[0000] Using run root /run/user/1000\nDEBU[0000] Using static dir /home/lsm5/.local/share/containers/storage/libpod\nDEBU[0000] Using tmp dir /run/user/1000/libpod/tmp\nDEBU[0000] Using volume path /home/lsm5/.local/share/containers/storage/volumes\nDEBU[0000] Set libpod namespace to ""\nDEBU[0000] Not configuring container store\nDEBU[0000] Initializing event backend file\nDEBU[0000] using runtime "/usr/bin/runc"\nDEBU[0000] using runtime "/usr/bin/crun"\nWARN[0000] Error initializing configured OCI runtime kata: no valid executable found for OCI runtime kata: invalid argument\nDEBU[0000] using runtime "/usr/bin/crun"\nINFO[0000] Setting parallel job count to 25\nINFO[0000] podman filtering at log level debug\nDEBU[0000] Called service.PersistentPreRunE(podman --log-level=debug system service -t0)\nDEBU[0000] Ignoring libpod.conf EventsLogger setting "/home/lsm5/.config/containers/containers.conf". Use "journald" if you want to change this setting and remove libpod.conf files.\nDEBU[0000] Reading configuration file "/usr/share/containers/containers.conf"\n')),(0,o.kt)("p",null,"If the Podman system service has been started via systemd socket activation,\nyou can view the logs using journalctl. The logs after a sample run look like so:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ journalctl --user --no-pager -u podman.socket\n-- Reboot --\nJul 22 13:50:40 nagato.nanadai.me systemd[1048]: Listening on Podman API Socket.\n$\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ journalctl --user --no-pager -u podman.service\nJul 22 13:50:53 nagato.nanadai.me systemd[1048]: Starting Podman API Service...\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time="2020-07-22T13:50:54-04:00" level=error msg="Error refreshing volume 38480630a8bdaa3e1a0ebd34c94038591b0d7ad994b37be5b4f2072bb6ef0879: error acquiring lock 0 for volume 38480630a8bdaa3e1a0ebd34c94038591b0d7ad994b37be5b4f2072bb6ef0879: file exists"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time="2020-07-22T13:50:54-04:00" level=error msg="Error refreshing volume 47d410af4d762a0cc456a89e58f759937146fa3be32b5e95a698a1d4069f4024: error acquiring lock 0 for volume 47d410af4d762a0cc456a89e58f759937146fa3be32b5e95a698a1d4069f4024: file exists"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time="2020-07-22T13:50:54-04:00" level=error msg="Error refreshing volume 86e73f082e344dad38c8792fb86b2017c4f133f2a8db87f239d1d28a78cf0868: error acquiring lock 0 for volume 86e73f082e344dad38c8792fb86b2017c4f133f2a8db87f239d1d28a78cf0868: file exists"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time="2020-07-22T13:50:54-04:00" level=error msg="Error refreshing volume 9a16ea764be490a5563e384d9074ab0495e4d9119be380c664037d6cf1215631: error acquiring lock 0 for volume 9a16ea764be490a5563e384d9074ab0495e4d9119be380c664037d6cf1215631: file exists"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time="2020-07-22T13:50:54-04:00" level=error msg="Error refreshing volume bfd6b2a97217f8655add13e0ad3f6b8e1c79bc1519b7a1e15361a107ccf57fc0: error acquiring lock 0 for volume bfd6b2a97217f8655add13e0ad3f6b8e1c79bc1519b7a1e15361a107ccf57fc0: file exists"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: time="2020-07-22T13:50:54-04:00" level=error msg="Error refreshing volume f9b9f630982452ebcbed24bd229b142fbeecd5d4c85791fca440b21d56fef563: error acquiring lock 0 for volume f9b9f630982452ebcbed24bd229b142fbeecd5d4c85791fca440b21d56fef563: file exists"\nJul 22 13:50:54 nagato.nanadai.me podman[1527]: Trying to pull registry.fedoraproject.org/fedora:latest...\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Getting image source signatures\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Copying blob sha256:dd9f43919ba05f05d4f783c31e83e5e776c4f5d29dd72b9ec5056b9576c10053\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Copying config sha256:00ff39a8bf19f810a7e641f7eb3ddc47635913a19c4996debd91fafb6b379069\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Writing manifest to image destination\nJul 22 13:50:55 nagato.nanadai.me podman[1527]: Storing signatures\nJul 22 13:50:55 nagato.nanadai.me systemd[1048]: podman.service: unit configures an IP firewall, but not running as root.\nJul 22 13:50:55 nagato.nanadai.me systemd[1048]: (This warning is only shown for the first unit using IP firewalling.)\nJul 22 13:51:15 nagato.nanadai.me systemd[1048]: podman.service: Succeeded.\nJul 22 13:51:15 nagato.nanadai.me systemd[1048]: Finished Podman API Service.\nJul 22 13:51:15 nagato.nanadai.me systemd[1048]: podman.service: Consumed 1.339s CPU time.\n$\n')),(0,o.kt)("h2",{id:"wrap-up"},"Wrap Up"),(0,o.kt)("p",null,"Podman v2 provides a set of Go bindings to allow developers to integrate Podman\nfunctionality conveniently in their Go application. These Go bindings require\nthe Podman system service to be running in the background and this can easily\nbe achieved using systemd socket activation. Once set up, you are able to use a\nset of Go based bindings to create, maintain and monitor your container images,\ncontainers and pods in a way which fits very nicely in many production environments."),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Podman v2 is available for most major distributions along with MacOS and Windows.\nInstallation details are available on the ",(0,o.kt)("a",{parentName:"p",href:"https://podman.io/getting-started/"},"Podman official website"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Documentation can be found at the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.podman.io"},"Podman Docs page"),".\nIt also includes a section on the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.podman.io/en/latest/Reference.html"},"RESTful API"),"."))),(0,o.kt)("h2",{id:"contribute"},"Contribute"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Any issues with the bindings can be ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/containers/podman/issues/new/choose"},"reported upstream"),"."),(0,o.kt)("li",{parentName:"ul"},"Check out the ",(0,o.kt)("a",{parentName:"li",href:"https://podman.io/community/"},"Podman community page")," for more ways to get in touch with the community.")),(0,o.kt)("h2",{id:"acknowledgments"},"Acknowledgments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This blog post was co-authored by Parker Van Roy, currently interning at Red\nHat for summer 2020.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Thanks to Brent Baude for the initial blog post suggestion and reviews.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Thanks to Tom Sweeney, Valentin Rothberg, Dan Walsh and the entire Podman team for\ntheir reviews and insightful comments."))))}u.isMDXComponent=!0},1382:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/podman-ce586c2894883ad9c353492b5e1893a8.svg"}}]);