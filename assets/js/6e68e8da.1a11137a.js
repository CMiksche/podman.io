"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[7041],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(n),u=a,h=m["".concat(s,".").concat(u)]||m[u]||c[u]||r;return n?o.createElement(h,p(p({ref:t},d),{},{components:n})):o.createElement(h,p({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,p=new Array(r);p[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:a,p[1]=i;for(var l=2;l<r;l++)p[l]=n[l];return o.createElement.apply(null,p)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9835:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const r={},p=void 0,i={unversionedId:"commands/podman-pod/podman-pod-create",id:"commands/podman-pod/podman-pod-create",title:"podman-pod-create",description:"% podman-pod-create 1",source:"@site/docs/commands/podman-pod/podman-pod-create.md",sourceDirName:"commands/podman-pod",slug:"/commands/podman-pod/podman-pod-create",permalink:"/docs/commands/podman-pod/podman-pod-create",draft:!1,editUrl:"https://github.com/containers/website-new/docs/commands/podman-pod/podman-pod-create.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-pod-clone",permalink:"/docs/commands/podman-pod/podman-pod-clone"},next:{title:"podman-pod-exists",permalink:"/docs/commands/podman-pod/podman-pod-exists"}},s={},l=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--cpus</strong>=<em>amount</em>",id:"--cpusamount",level:4},{value:"<strong>--dns</strong>=<em>ipaddr</em>",id:"--dnsipaddr",level:4},{value:"<strong>--dns-option</strong>=<em>option</em>",id:"--dns-optionoption",level:4},{value:"<strong>--dns-search</strong>=<em>domain</em>",id:"--dns-searchdomain",level:4},{value:"<strong>--exit-policy</strong>=<strong>continue</strong> | <em>stop</em>",id:"--exit-policycontinue--stop",level:4},{value:"<strong>--help</strong>, <strong>-h</strong>",id:"--help--h",level:4},{value:"<strong>--infra</strong>",id:"--infra",level:4},{value:"<strong>--infra-image</strong>=<em>image</em>",id:"--infra-imageimage",level:4},{value:"<strong>--name</strong>, <strong>-n</strong>=<em>name</em>",id:"--name--nname",level:4},{value:"<strong>--pod-id-file</strong>=<em>path</em>",id:"--pod-id-filepath",level:4},{value:"<strong>--share</strong>=<em>namespace</em>",id:"--sharenamespace",level:4},{value:"<strong>--share-parent</strong>",id:"--share-parent",level:4},{value:"EXAMPLES",id:"examples",level:2},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2},{value:"FOOTNOTES",id:"footnotes",level:2}],d={toc:l},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"% podman-pod-create 1"),(0,a.kt)("h2",{id:"name"},"NAME"),(0,a.kt)("p",null,"podman","-","pod","-","create - Create a new pod"),(0,a.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"podman pod create")," ","[",(0,a.kt)("em",{parentName:"p"},"options"),"][*name*]"),(0,a.kt)("h2",{id:"description"},"DESCRIPTION"),(0,a.kt)("p",null,"Creates an empty pod, or unit of multiple containers, and prepares it to have\ncontainers added to it. The pod can be created with a specific name. If a name\nis not given a random name is generated. The pod ID is printed to STDOUT. You\ncan then use ",(0,a.kt)("strong",{parentName:"p"},"podman create --pod ",(0,a.kt)("inlineCode",{parentName:"strong"},"<pod_id|pod_name>")," ...")," to add containers\nto the pod, and ",(0,a.kt)("strong",{parentName:"p"},"podman pod start ",(0,a.kt)("inlineCode",{parentName:"strong"},"<pod_id|pod_name>"))," to start the pod."),(0,a.kt)("p",null,"The operator can identify a pod in three ways:\nUUID long identifier (\u201cf78375b1c487e03c9438c729345e54db9d20cfa2ac1fc3494b6eb60872e74778\u201d)\nUUID short identifier (\u201cf78375b1c487\u201d)\nName (\u201cjonah\u201d)"),(0,a.kt)("p",null,"podman generates a UUID for each pod, and if a name is not assigned\nto the container with ",(0,a.kt)("strong",{parentName:"p"},"--name")," then a random string name will be generated\nfor it. This name is useful to identify a pod."),(0,a.kt)("p",null,"Note: resource limit related flags work by setting the limits explicitly in the pod's cgroup parent\nfor all containers joining the pod. A container can override the resource limits when joining a pod.\nFor example, if a pod was created via ",(0,a.kt)("strong",{parentName:"p"},"podman pod create --cpus=5"),", specifying ",(0,a.kt)("strong",{parentName:"p"},"podman container create --pod=",(0,a.kt)("inlineCode",{parentName:"strong"},"<pod_id|pod_name>")," --cpus=4")," causes the container to use the smaller limit. Also, containers which specify their own cgroup, such as ",(0,a.kt)("strong",{parentName:"p"},"--cgroupns=host"),", do NOT get the assigned pod level cgroup resources."),(0,a.kt)("h2",{id:"options"},"OPTIONS"),(0,a.kt)("p",null,"@@option add-host"),(0,a.kt)("p",null,"The /etc/hosts file is shared between all containers in the pod."),(0,a.kt)("p",null,"@@option blkio-weight"),(0,a.kt)("p",null,"@@option blkio-weight-device"),(0,a.kt)("p",null,"@@option cgroup-parent"),(0,a.kt)("p",null,"@@option cpu-shares"),(0,a.kt)("h4",{id:"--cpusamount"},(0,a.kt)("strong",{parentName:"h4"},"--cpus"),"=",(0,a.kt)("em",{parentName:"h4"},"amount")),(0,a.kt)("p",null,"Set the total number of CPUs delegated to the pod. Default is 0.000 which indicates that there is no limit on computation power."),(0,a.kt)("p",null,"@@option cpuset-cpus"),(0,a.kt)("p",null,"@@option cpuset-mems"),(0,a.kt)("p",null,"@@option device"),(0,a.kt)("p",null,"Note: the pod implements devices by storing the initial configuration passed by the user and recreating the device on each container added to the pod."),(0,a.kt)("p",null,"@@option device-read-bps"),(0,a.kt)("p",null,"@@option device-write-bps"),(0,a.kt)("h4",{id:"--dnsipaddr"},(0,a.kt)("strong",{parentName:"h4"},"--dns"),"=",(0,a.kt)("em",{parentName:"h4"},"ipaddr")),(0,a.kt)("p",null,'Set custom DNS servers in the /etc/resolv.conf file that will be shared between all containers in the pod. A special option, "none" is allowed which disables creation of /etc/resolv.conf for the pod.'),(0,a.kt)("h4",{id:"--dns-optionoption"},(0,a.kt)("strong",{parentName:"h4"},"--dns-option"),"=",(0,a.kt)("em",{parentName:"h4"},"option")),(0,a.kt)("p",null,"Set custom DNS options in the /etc/resolv.conf file that will be shared between all containers in the pod."),(0,a.kt)("h4",{id:"--dns-searchdomain"},(0,a.kt)("strong",{parentName:"h4"},"--dns-search"),"=",(0,a.kt)("em",{parentName:"h4"},"domain")),(0,a.kt)("p",null,"Set custom DNS search domains in the /etc/resolv.conf file that will be shared between all containers in the pod."),(0,a.kt)("h4",{id:"--exit-policycontinue--stop"},(0,a.kt)("strong",{parentName:"h4"},"--exit-policy"),"=",(0,a.kt)("strong",{parentName:"h4"},"continue")," | ",(0,a.kt)("em",{parentName:"h4"},"stop")),(0,a.kt)("p",null,"Set the exit policy of the pod when the last container exits. Supported policies are:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Exit Policy"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"continue")),(0,a.kt)("td",{parentName:"tr",align:null},"The pod continues running, by keeping its infra container alive, when the last container exits. Used by default.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("em",{parentName:"td"},"stop")),(0,a.kt)("td",{parentName:"tr",align:null},"The pod (including its infra container) is stopped when the last container exits. Used in ",(0,a.kt)("inlineCode",{parentName:"td"},"kube play"),".")))),(0,a.kt)("p",null,"@@option gidmap.pod"),(0,a.kt)("h4",{id:"--help--h"},(0,a.kt)("strong",{parentName:"h4"},"--help"),", ",(0,a.kt)("strong",{parentName:"h4"},"-h")),(0,a.kt)("p",null,"Print usage statement."),(0,a.kt)("p",null,"@@option hostname.pod"),(0,a.kt)("h4",{id:"--infra"},(0,a.kt)("strong",{parentName:"h4"},"--infra")),(0,a.kt)("p",null,"Create an infra container and associate it with the pod. An infra container is a lightweight container used to coordinate the shared kernel namespace of a pod. Default: true."),(0,a.kt)("p",null,"@@option infra-command"),(0,a.kt)("p",null,"@@option infra-conmon-pidfile"),(0,a.kt)("h4",{id:"--infra-imageimage"},(0,a.kt)("strong",{parentName:"h4"},"--infra-image"),"=",(0,a.kt)("em",{parentName:"h4"},"image")),(0,a.kt)("p",null,"The custom image that will be used for the infra container. Unless specified, Podman builds a custom local image which does not require pulling down an image."),(0,a.kt)("p",null,"@@option infra-name"),(0,a.kt)("p",null,"@@option ip"),(0,a.kt)("p",null,"@@option ip6"),(0,a.kt)("p",null,"@@option label"),(0,a.kt)("p",null,"@@option label-file"),(0,a.kt)("p",null,"@@option mac-address"),(0,a.kt)("p",null,"@@option memory"),(0,a.kt)("p",null,"@@option memory-swap"),(0,a.kt)("h4",{id:"--name--nname"},(0,a.kt)("strong",{parentName:"h4"},"--name"),", ",(0,a.kt)("strong",{parentName:"h4"},"-n"),"=",(0,a.kt)("em",{parentName:"h4"},"name")),(0,a.kt)("p",null,"Assign a name to the pod."),(0,a.kt)("p",null,"@@option network"),(0,a.kt)("p",null,"Invalid if using ",(0,a.kt)("strong",{parentName:"p"},"--dns"),", ",(0,a.kt)("strong",{parentName:"p"},"--dns-option"),", or ",(0,a.kt)("strong",{parentName:"p"},"--dns-search")," with ",(0,a.kt)("strong",{parentName:"p"},"--network")," set to ",(0,a.kt)("strong",{parentName:"p"},"none")," or ",(0,a.kt)("strong",{parentName:"p"},"container:"),(0,a.kt)("em",{parentName:"p"},"id"),"."),(0,a.kt)("p",null,"@@option network-alias"),(0,a.kt)("p",null,"@@option no-hosts"),(0,a.kt)("p",null,"This option conflicts with ",(0,a.kt)("strong",{parentName:"p"},"--add-host"),"."),(0,a.kt)("p",null,"@@option pid.pod"),(0,a.kt)("h4",{id:"--pod-id-filepath"},(0,a.kt)("strong",{parentName:"h4"},"--pod-id-file"),"=",(0,a.kt)("em",{parentName:"h4"},"path")),(0,a.kt)("p",null,"Write the pod ID to the file."),(0,a.kt)("p",null,"@@option publish"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," You must not publish ports of containers in the pod individually,\nbut only by the pod itself."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," This cannot be modified once the pod is created."),(0,a.kt)("p",null,"@@option replace"),(0,a.kt)("p",null,"@@option security-opt"),(0,a.kt)("h4",{id:"--sharenamespace"},(0,a.kt)("strong",{parentName:"h4"},"--share"),"=",(0,a.kt)("em",{parentName:"h4"},"namespace")),(0,a.kt)("p",null,'A comma-separated list of kernel namespaces to share. If none or "" is specified, no namespaces will be shared and the infra container will not be created unless expiclity specified via ',(0,a.kt)("strong",{parentName:"p"},"--infra=true"),'. The namespaces to choose from are cgroup, ipc, net, pid, uts. If the option is prefixed with a "+" then the namespace is appended to the default list, otherwise it replaces the default list. Defaults matches Kubernetes default (ipc, net, uts)'),(0,a.kt)("h4",{id:"--share-parent"},(0,a.kt)("strong",{parentName:"h4"},"--share-parent")),(0,a.kt)("p",null,"This boolean determines whether or not all containers entering the pod will use the pod as their cgroup parent. The default value of this flag is true. Use the ",(0,a.kt)("strong",{parentName:"p"},"--share")," option to share the cgroup namespace rather than a cgroup parent in a pod."),(0,a.kt)("p",null,"Note: This options conflict with ",(0,a.kt)("strong",{parentName:"p"},"--share=cgroup")," since that would set the pod as the cgroup parent but enter the container into the same cgroupNS as the infra container."),(0,a.kt)("p",null,"@@option shm-size"),(0,a.kt)("p",null,"@@option shm-size-systemd"),(0,a.kt)("p",null,"@@option subgidname"),(0,a.kt)("p",null,"@@option subuidname"),(0,a.kt)("p",null,"@@option sysctl"),(0,a.kt)("p",null,"@@option uidmap.pod"),(0,a.kt)("p",null,"@@option userns.pod"),(0,a.kt)("p",null,"@@option uts.pod"),(0,a.kt)("p",null,"@@option volume"),(0,a.kt)("p",null,"@@option volumes-from"),(0,a.kt)("h2",{id:"examples"},"EXAMPLES"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman pod create --name test\n\n$ podman pod create mypod\n\n$ podman pod create --infra=false\n\n$ podman pod create --infra-command /top toppod\n\n$ podman pod create --publish 8443:443\n\n$ podman pod create --network slirp4netns:outbound_addr=127.0.0,allow_host_loopback=true\n\n$ podman pod create --network slirp4netns:cidr=19268.0.0/24\n\n$ podman pod create --network pasta\n\n$ podman pod create --network net1:ip=10.89.5 --network net2:ip=10.8900\n")),(0,a.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/docs/podman"},"podman(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/docs/commands/podman-pod/"},"podman-pod(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/docs/commands/podman-kube/podman-kube-play"},"podman-kube-play(1)")),", ",(0,a.kt)("strong",{parentName:"p"},"containers.conf(1)"),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://man7.org/linux/man-pages/man7/cgroups.7.html"},"cgroups(7)"))),(0,a.kt)("h2",{id:"history"},"HISTORY"),(0,a.kt)("p",null,"July 2018, Originally compiled by Peter Hunt ",(0,a.kt)("a",{parentName:"p",href:"mailto:pehunt@redhat.com"},"pehunt@redhat.com")),(0,a.kt)("h2",{id:"footnotes"},"FOOTNOTES"),(0,a.kt)("a",{name:"Footnote1"},"1"),": The Podman project is committed to inclusivity, a core value of open source. The `master` and `slave` mount propagation terminology used here is problematic and divisive, and should be changed. However, these terms are currently used within the Linux kernel and must be used as-is at this time. When the kernel maintainers rectify this usage, Podman will follow suit immediately.")}c.isMDXComponent=!0}}]);