"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[8740],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=l(n),c=a,h=d["".concat(s,".").concat(c)]||d[c]||u[c]||r;return n?o.createElement(h,i(i({ref:t},m),{},{components:n})):o.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[d]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<r;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7710:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const r={},i=void 0,p={unversionedId:"podman-run",id:"podman-run",title:"podman-run",description:"% podman-run 1",source:"@site/docs/podman-run.md",sourceDirName:".",slug:"/podman-run",permalink:"/websites-new/docs/podman-run",draft:!1,editUrl:"https://github.com/containers/website-new/docs/podman-run.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-rmi",permalink:"/websites-new/docs/podman-rmi"},next:{title:"podman-save",permalink:"/websites-new/docs/podman-save"}},s={},l=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"IMAGE",id:"image",level:2},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--detach</strong>, <strong>-d</strong>",id:"--detach--d",level:4},{value:"<strong>--help</strong>",id:"--help",level:4},{value:"<strong>--passwd</strong>",id:"--passwd",level:4},{value:"<strong>--quiet</strong>, <strong>-q</strong>",id:"--quiet--q",level:4},{value:"<strong>--rm</strong>",id:"--rm",level:4},{value:"<strong>--rmi</strong>",id:"--rmi",level:4},{value:"Exit Status",id:"exit-status",level:2},{value:"EXAMPLES",id:"examples",level:2},{value:"Running container in read-only mode",id:"running-container-in-read-only-mode",level:3},{value:"Exposing log messages from the container to the host&#39;s log",id:"exposing-log-messages-from-the-container-to-the-hosts-log",level:3},{value:"Attaching to one or more from STDIN, STDOUT, STDERR",id:"attaching-to-one-or-more-from-stdin-stdout-stderr",level:3},{value:"Sharing IPC between containers",id:"sharing-ipc-between-containers",level:3},{value:"Mapping Ports for External Usage",id:"mapping-ports-for-external-usage",level:3},{value:"Mounting External Volumes",id:"mounting-external-volumes",level:3},{value:"Using alternative security labeling",id:"using-alternative-security-labeling",level:3},{value:"<strong>--permissive</strong> flag, use the following command:",id:"--permissive-flag-use-the-following-command",level:4},{value:"Setting device weight via <strong>--blkio-weight-device</strong> flag.",id:"setting-device-weight-via---blkio-weight-device-flag",level:3},{value:"Using a podman container with input from a pipe",id:"using-a-podman-container-with-input-from-a-pipe",level:3},{value:"Setting automatic user namespace separated containers",id:"setting-automatic-user-namespace-separated-containers",level:3},{value:"Setting Namespaced Kernel Parameters (Sysctls)",id:"setting-namespaced-kernel-parameters-sysctls",level:3},{value:"Set UID/GID mapping in a new user namespace",id:"set-uidgid-mapping-in-a-new-user-namespace",level:3},{value:"Configuring Storage Options from the command line",id:"configuring-storage-options-from-the-command-line",level:3},{value:"Configure timezone in a container",id:"configure-timezone-in-a-container",level:3},{value:"Adding dependency containers",id:"adding-dependency-containers",level:3},{value:"Configure keep supplemental groups for access to volume",id:"configure-keep-supplemental-groups-for-access-to-volume",level:3},{value:"Configure execution domain for containers using personality flag",id:"configure-execution-domain-for-containers-using-personality-flag",level:3},{value:"Run a container with external rootfs mounted as an overlay",id:"run-a-container-with-external-rootfs-mounted-as-an-overlay",level:3},{value:"Handling Timezones in java applications in a container.",id:"handling-timezones-in-java-applications-in-a-container",level:3},{value:"Run a container connected to two networks (called net1 and net2) with a static ip",id:"run-a-container-connected-to-two-networks-called-net1-and-net2-with-a-static-ip",level:3},{value:"Rootless Containers",id:"rootless-containers",level:3},{value:"ENVIRONMENT",id:"environment",level:2},{value:"CONMON",id:"conmon",level:2},{value:"FILES",id:"files",level:2},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2},{value:"FOOTNOTES",id:"footnotes",level:2}],m={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"% podman-run 1"),(0,a.kt)("h2",{id:"name"},"NAME"),(0,a.kt)("p",null,"podman","-","run - Run a command in a new container"),(0,a.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"podman run")," ","[",(0,a.kt)("em",{parentName:"p"},"options"),"]"," ",(0,a.kt)("em",{parentName:"p"},"image")," [",(0,a.kt)("em",{parentName:"p"},"command")," ","[",(0,a.kt)("em",{parentName:"p"},"arg")," ...]","]"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"podman container run")," ","[",(0,a.kt)("em",{parentName:"p"},"options"),"]"," ",(0,a.kt)("em",{parentName:"p"},"image")," [",(0,a.kt)("em",{parentName:"p"},"command")," ","[",(0,a.kt)("em",{parentName:"p"},"arg")," ...]","]"),(0,a.kt)("h2",{id:"description"},"DESCRIPTION"),(0,a.kt)("p",null,"Run a process in a new container. ",(0,a.kt)("strong",{parentName:"p"},"podman run")," starts a process with its own\nfile system, its own networking, and its own isolated process tree. The ",(0,a.kt)("em",{parentName:"p"},"image"),"\nwhich starts the process may define defaults related to the process that will be\nrun in the container, the networking to expose, and more, but ",(0,a.kt)("strong",{parentName:"p"},"podman run"),"\ngives final control to the operator or administrator who starts the container\nfrom the image. For that reason ",(0,a.kt)("strong",{parentName:"p"},"podman run")," has more options than any other\nPodman command."),(0,a.kt)("p",null,"If the ",(0,a.kt)("em",{parentName:"p"},"image")," is not already loaded then ",(0,a.kt)("strong",{parentName:"p"},"podman run")," will pull the ",(0,a.kt)("em",{parentName:"p"},"image"),", and\nall image dependencies, from the repository in the same way running ",(0,a.kt)("strong",{parentName:"p"},"podman\npull")," ",(0,a.kt)("em",{parentName:"p"},"image")," , before it starts the container from that image."),(0,a.kt)("p",null,"Several files will be automatically created within the container. These include\n",(0,a.kt)("em",{parentName:"p"},"/etc/hosts"),", ",(0,a.kt)("em",{parentName:"p"},"/etc/hostname"),", and ",(0,a.kt)("em",{parentName:"p"},"/etc/resolv.conf")," to manage networking.\nThese will be based on the host's version of the files, though they can be\ncustomized with options (for example, ",(0,a.kt)("strong",{parentName:"p"},"--dns")," will override the host's DNS\nservers in the created ",(0,a.kt)("em",{parentName:"p"},"resolv.conf"),"). Additionally, a container environment\nfile is created in each container to indicate to programs they are running in a\ncontainer. This file is located at ",(0,a.kt)("em",{parentName:"p"},"/run/.containerenv"),". When using the\n--privileged flag the .containerenv contains name/value pairs indicating the\ncontainer engine version, whether the engine is running in rootless mode, the\ncontainer name and ID, as well as the image name and ID that the container is based on."),(0,a.kt)("p",null,"When running from a user defined network namespace, the ",(0,a.kt)("em",{parentName:"p"},"/etc/netns/NSNAME/resolv.conf"),"\nwill be used if it exists, otherwise ",(0,a.kt)("em",{parentName:"p"},"/etc/resolv.conf")," will be used."),(0,a.kt)("p",null,"Default settings are defined in ",(0,a.kt)("inlineCode",{parentName:"p"},"containers.conf"),". Most settings for remote\nconnections use the servers containers.conf, except when documented in man\npages."),(0,a.kt)("h2",{id:"image"},"IMAGE"),(0,a.kt)("p",null,"The image is specified using transport:path format. If no transport is specified, the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker")," (container registry)\ntransport will be used by default. For remote Podman, including Mac and Windows (excluding WSL2) machines, ",(0,a.kt)("inlineCode",{parentName:"p"},"docker")," is the only allowed transport."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"dir:"),(0,a.kt)("em",{parentName:"p"},"path"),"\nAn existing local directory ",(0,a.kt)("em",{parentName:"p"},"path")," storing the manifest, layer tarballs and signatures as individual files. This\nis a non-standardized format, primarily useful for debugging or noninvasive container inspection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman save --format docker-dir fedora -o /tmp/fedora\n$ podman run dir:/tmp/fedora echo hello\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"docker://"),(0,a.kt)("em",{parentName:"p"},"docker-reference"),' (Default)\nAn image reference stored in a remote container image registry. Example: "quay.io/podman/stable:latest".\nThe reference can include a path to a specific registry; if it does not, the\nregistries listed in registries.conf will be queried to find a matching image.\nBy default, credentials from ',(0,a.kt)("inlineCode",{parentName:"p"},"podman login")," (stored at\n$XDG_RUNTIME_DIR/containers/auth.json by default) will be used to authenticate;\notherwise it falls back to using credentials in $HOME/.docker/config.json."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run registry.fedoraproject.org/fedora:latest echo hello\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"docker-archive:"),(0,a.kt)("em",{parentName:"p"},"path"),"[",(0,a.kt)("strong",{parentName:"p"},":"),(0,a.kt)("em",{parentName:"p"},"docker-reference"),"]","\nAn image stored in the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker save")," formatted file. ",(0,a.kt)("em",{parentName:"p"},"docker-reference")," is only used when creating such a\nfile, and it must not contain a digest."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman save --format docker-archive fedora -o /tmp/fedora\n$ podman run docker-archive:/tmp/fedora echo hello\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"docker-daemon:"),(0,a.kt)("em",{parentName:"p"},"docker-reference"),"\nAn image in ",(0,a.kt)("em",{parentName:"p"},"docker-reference")," format stored in the docker daemon internal storage. The ",(0,a.kt)("em",{parentName:"p"},"docker-reference")," can also be an image ID (docker-daemon:algo:digest)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo docker pull fedora\n$ sudo podman run docker-daemon:docker.io/library/fedora echo hello\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"oci-archive:"),(0,a.kt)("em",{parentName:"p"},"path"),(0,a.kt)("strong",{parentName:"p"},":"),(0,a.kt)("em",{parentName:"p"},"tag"),'\nAn image in a directory compliant with the "Open Container Image Layout Specification" at the specified ',(0,a.kt)("em",{parentName:"p"},"path"),"\nand specified with a ",(0,a.kt)("em",{parentName:"p"},"tag"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman save --format oci-archive fedora -o /tmp/fedora\n$ podman run oci-archive:/tmp/fedora echo hello\n")),(0,a.kt)("h2",{id:"options"},"OPTIONS"),(0,a.kt)("p",null,"@@option add-host"),(0,a.kt)("p",null,"@@option annotation.container"),(0,a.kt)("p",null,"@@option arch"),(0,a.kt)("p",null,"@@option attach"),(0,a.kt)("p",null,"@@option authfile"),(0,a.kt)("p",null,"@@option blkio-weight"),(0,a.kt)("p",null,"@@option blkio-weight-device"),(0,a.kt)("p",null,"@@option cap-add"),(0,a.kt)("p",null,"@@option cap-drop"),(0,a.kt)("p",null,"@@option cgroup-conf"),(0,a.kt)("p",null,"@@option cgroup-parent"),(0,a.kt)("p",null,"@@option cgroupns"),(0,a.kt)("p",null,"@@option cgroups"),(0,a.kt)("p",null,"@@option chrootdirs"),(0,a.kt)("p",null,"@@option cidfile.write"),(0,a.kt)("p",null,"@@option conmon-pidfile"),(0,a.kt)("p",null,"@@option cpu-period"),(0,a.kt)("p",null,"@@option cpu-quota"),(0,a.kt)("p",null,"@@option cpu-rt-period"),(0,a.kt)("p",null,"@@option cpu-rt-runtime"),(0,a.kt)("p",null,"@@option cpu-shares"),(0,a.kt)("p",null,"@@option cpus.container"),(0,a.kt)("p",null,"@@option cpuset-cpus"),(0,a.kt)("p",null,"@@option cpuset-mems"),(0,a.kt)("p",null,"@@option decryption-key"),(0,a.kt)("h4",{id:"--detach--d"},(0,a.kt)("strong",{parentName:"h4"},"--detach"),", ",(0,a.kt)("strong",{parentName:"h4"},"-d")),(0,a.kt)("p",null,"Detached mode: run the container in the background and print the new container ID. The default is ",(0,a.kt)("em",{parentName:"p"},"false"),"."),(0,a.kt)("p",null,"At any time run ",(0,a.kt)("strong",{parentName:"p"},"podman ps")," in\nthe other shell to view a list of the running containers. Reattach to a\ndetached container with ",(0,a.kt)("strong",{parentName:"p"},"podman attach")," command."),(0,a.kt)("p",null,"When attached via tty mode, detach from the container (and leave it\nrunning) using a configurable key sequence. The default sequence is ",(0,a.kt)("inlineCode",{parentName:"p"},"ctrl-p,ctrl-q"),".\nSpecify the key sequence using the ",(0,a.kt)("strong",{parentName:"p"},"--detach-keys")," option, or configure\nit in the ",(0,a.kt)("strong",{parentName:"p"},"containers.conf")," file: see ",(0,a.kt)("strong",{parentName:"p"},"containers.conf(5)")," for more information."),(0,a.kt)("p",null,"@@option detach-keys"),(0,a.kt)("p",null,"@@option device"),(0,a.kt)("p",null,"Note: if the user only has access rights via a group, accessing the device\nfrom inside a rootless container will fail. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"--group-add keep-groups"),"\nflag to pass the user's supplementary group access into the container."),(0,a.kt)("p",null,"@@option device-cgroup-rule"),(0,a.kt)("p",null,"@@option device-read-bps"),(0,a.kt)("p",null,"@@option device-read-iops"),(0,a.kt)("p",null,"@@option device-write-bps"),(0,a.kt)("p",null,"@@option device-write-iops"),(0,a.kt)("p",null,"@@option disable-content-trust"),(0,a.kt)("p",null,"@@option dns"),(0,a.kt)("p",null,"This option cannot be combined with ",(0,a.kt)("strong",{parentName:"p"},"--network")," that is set to ",(0,a.kt)("strong",{parentName:"p"},"none")," or ",(0,a.kt)("strong",{parentName:"p"},"container:"),(0,a.kt)("em",{parentName:"p"},"id"),"."),(0,a.kt)("p",null,"@@option dns-option.container"),(0,a.kt)("p",null,"@@option dns-search.container"),(0,a.kt)("p",null,"@@option entrypoint"),(0,a.kt)("p",null,"@@option env"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"#environment"},(0,a.kt)("strong",{parentName:"a"},"Environment"))," note below for precedence and examples."),(0,a.kt)("p",null,"@@option env-file"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"#environment"},(0,a.kt)("strong",{parentName:"a"},"Environment"))," note below for precedence and examples."),(0,a.kt)("p",null,"@@option env-host"),(0,a.kt)("p",null,"@@option env-merge"),(0,a.kt)("p",null,"@@option expose"),(0,a.kt)("p",null,"@@option gidmap.container"),(0,a.kt)("p",null,"@@option group-add"),(0,a.kt)("p",null,"@@option group-entry"),(0,a.kt)("p",null,"@@option health-cmd"),(0,a.kt)("p",null,"@@option health-interval"),(0,a.kt)("p",null,"@@option health-on-failure"),(0,a.kt)("p",null,"@@option health-retries"),(0,a.kt)("p",null,"@@option health-start-period"),(0,a.kt)("p",null,"@@option health-startup-cmd"),(0,a.kt)("p",null,"@@option health-startup-interval"),(0,a.kt)("p",null,"@@option health-startup-retries"),(0,a.kt)("p",null,"@@option health-startup-success"),(0,a.kt)("p",null,"@@option health-startup-timeout"),(0,a.kt)("p",null,"@@option health-timeout"),(0,a.kt)("h4",{id:"--help"},(0,a.kt)("strong",{parentName:"h4"},"--help")),(0,a.kt)("p",null,"Print usage statement"),(0,a.kt)("p",null,"@@option hostname.container"),(0,a.kt)("p",null,"@@option hostuser"),(0,a.kt)("p",null,"@@option http-proxy"),(0,a.kt)("p",null,"@@option image-volume"),(0,a.kt)("p",null,"@@option init"),(0,a.kt)("p",null,"@@option init-path"),(0,a.kt)("p",null,"@@option interactive"),(0,a.kt)("p",null,"@@option ip"),(0,a.kt)("p",null,"@@option ip6"),(0,a.kt)("p",null,"@@option ipc"),(0,a.kt)("p",null,"@@option label"),(0,a.kt)("p",null,"@@option label-file"),(0,a.kt)("p",null,"@@option link-local-ip"),(0,a.kt)("p",null,"@@option log-driver"),(0,a.kt)("p",null,"@@option log-opt"),(0,a.kt)("p",null,"@@option mac-address"),(0,a.kt)("p",null,"@@option memory"),(0,a.kt)("p",null,"@@option memory-reservation"),(0,a.kt)("p",null,"@@option memory-swap"),(0,a.kt)("p",null,"@@option memory-swappiness"),(0,a.kt)("p",null,"@@option mount"),(0,a.kt)("p",null,"@@option name.container"),(0,a.kt)("p",null,"@@option network"),(0,a.kt)("p",null,"Invalid if using ",(0,a.kt)("strong",{parentName:"p"},"--dns"),", ",(0,a.kt)("strong",{parentName:"p"},"--dns-option"),", or ",(0,a.kt)("strong",{parentName:"p"},"--dns-search")," with ",(0,a.kt)("strong",{parentName:"p"},"--network")," set to ",(0,a.kt)("strong",{parentName:"p"},"none")," or ",(0,a.kt)("strong",{parentName:"p"},"container:"),(0,a.kt)("em",{parentName:"p"},"id"),"."),(0,a.kt)("p",null,"If used together with ",(0,a.kt)("strong",{parentName:"p"},"--pod"),", the container will not join the pod's network namespace."),(0,a.kt)("p",null,"@@option network-alias"),(0,a.kt)("p",null,"@@option no-healthcheck"),(0,a.kt)("p",null,"@@option no-hosts"),(0,a.kt)("p",null,"This option conflicts with ",(0,a.kt)("strong",{parentName:"p"},"--add-host"),"."),(0,a.kt)("p",null,"@@option oom-kill-disable"),(0,a.kt)("p",null,"@@option oom-score-adj"),(0,a.kt)("p",null,"@@option os.pull"),(0,a.kt)("h4",{id:"--passwd"},(0,a.kt)("strong",{parentName:"h4"},"--passwd")),(0,a.kt)("p",null,"Allow Podman to add entries to /etc/passwd and /etc/group when used in conjunction with the --user option.\nThis is used to override the Podman provided user setup in favor of entrypoint configurations such as libnss-extrausers."),(0,a.kt)("p",null,"@@option passwd-entry"),(0,a.kt)("p",null,"@@option personality"),(0,a.kt)("p",null,"@@option pid.container"),(0,a.kt)("p",null,"@@option pidfile"),(0,a.kt)("p",null,"@@option pids-limit"),(0,a.kt)("p",null,"@@option platform"),(0,a.kt)("p",null,"@@option pod.run"),(0,a.kt)("p",null,"@@option pod-id-file.container"),(0,a.kt)("p",null,"@@option preserve-fds"),(0,a.kt)("p",null,"@@option privileged"),(0,a.kt)("p",null,"@@option publish"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:")," If a container will be run within a pod, it is not necessary to publish the port for\nthe containers in the pod. The port must only be published by the pod itself. Pod network\nstacks act like the network stack on the host - meaning a variety of containers in the pod\nand programs in the container all share a single interface, IP address, and\nassociated ports. If one container binds to a port, no other container can use that port\nwithin the pod while it is in use. Containers in the pod can also communicate over localhost\nby having one container bind to localhost in the pod, and another connect to that port."),(0,a.kt)("p",null,"@@option publish-all"),(0,a.kt)("p",null,"@@option pull"),(0,a.kt)("h4",{id:"--quiet--q"},(0,a.kt)("strong",{parentName:"h4"},"--quiet"),", ",(0,a.kt)("strong",{parentName:"h4"},"-q")),(0,a.kt)("p",null,"Suppress output information when pulling images"),(0,a.kt)("p",null,"@@option read-only"),(0,a.kt)("p",null,"@@option read-only-tmpfs"),(0,a.kt)("p",null,"@@option replace"),(0,a.kt)("p",null,"@@option requires"),(0,a.kt)("p",null,"@@option restart"),(0,a.kt)("h4",{id:"--rm"},(0,a.kt)("strong",{parentName:"h4"},"--rm")),(0,a.kt)("p",null,"Automatically remove the container and any anonymous unnamed volume associated with\nthe container when it exits. The default is ",(0,a.kt)("strong",{parentName:"p"},"false"),"."),(0,a.kt)("h4",{id:"--rmi"},(0,a.kt)("strong",{parentName:"h4"},"--rmi")),(0,a.kt)("p",null,"After exit of the container, remove the image unless another\ncontainer is using it. The default is ",(0,a.kt)("em",{parentName:"p"},"false"),"."),(0,a.kt)("p",null,"@@option rootfs"),(0,a.kt)("p",null,"@@option sdnotify"),(0,a.kt)("p",null,"@@option seccomp-policy"),(0,a.kt)("p",null,"@@option secret"),(0,a.kt)("p",null,"@@option security-opt"),(0,a.kt)("p",null,"@@option shm-size"),(0,a.kt)("p",null,"@@option shm-size-systemd"),(0,a.kt)("p",null,"@@option sig-proxy"),(0,a.kt)("p",null,"The default is ",(0,a.kt)("strong",{parentName:"p"},"true"),"."),(0,a.kt)("p",null,"@@option stop-signal"),(0,a.kt)("p",null,"@@option stop-timeout"),(0,a.kt)("p",null,"@@option subgidname"),(0,a.kt)("p",null,"@@option subuidname"),(0,a.kt)("p",null,"@@option sysctl"),(0,a.kt)("p",null,"@@option systemd"),(0,a.kt)("p",null,"@@option timeout"),(0,a.kt)("p",null,"@@option tls-verify"),(0,a.kt)("p",null,"@@option tmpfs"),(0,a.kt)("p",null,"@@option tty"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'echo "asdf" | podman run --rm -i someimage /bin/cat\n')),(0,a.kt)("p",null,"@@option tz"),(0,a.kt)("p",null,"@@option uidmap.container"),(0,a.kt)("p",null,"@@option ulimit"),(0,a.kt)("p",null,"@@option umask"),(0,a.kt)("p",null,"@@option unsetenv"),(0,a.kt)("p",null,"@@option unsetenv-all"),(0,a.kt)("p",null,"@@option user"),(0,a.kt)("p",null,"@@option userns.container"),(0,a.kt)("p",null,"@@option uts.container"),(0,a.kt)("p",null,"@@option variant.container"),(0,a.kt)("p",null,"@@option volume"),(0,a.kt)("p",null,"Use the ",(0,a.kt)("strong",{parentName:"p"},"--group-add keep-groups")," option to pass the user's supplementary group access into the container."),(0,a.kt)("p",null,"@@option volumes-from"),(0,a.kt)("p",null,"@@option workdir"),(0,a.kt)("h2",{id:"exit-status"},"Exit Status"),(0,a.kt)("p",null,"The exit code from ",(0,a.kt)("strong",{parentName:"p"},"podman run")," gives information about why the container\nfailed to run or why it exited. When ",(0,a.kt)("strong",{parentName:"p"},"podman run")," exits with a non-zero code,\nthe exit codes follow the ",(0,a.kt)("strong",{parentName:"p"},"chroot"),"(1) standard, see below:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"125")," The error is with Podman itself"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --foo busybox; echo $?\nError: unknown flag: --foo\n125\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"126")," The ",(0,a.kt)("em",{parentName:"p"},"contained command")," cannot be invoked"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ podman run busybox /etc; echo $?\nError: container_linux.go:346: starting container process caused "exec: \\"/etc\\": permission denied": OCI runtime error\n126\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"127")," The ",(0,a.kt)("em",{parentName:"p"},"contained command")," cannot be found"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ podman run busybox foo; echo $?\nError: container_linux.go:346: starting container process caused "exec: \\"foo\\": executable file not found in $PATH": OCI runtime error\n127\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Exit code")," ",(0,a.kt)("em",{parentName:"p"},"contained command")," exit code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run busybox /bin/sh -c 'exit 3'; echo $?\n3\n")),(0,a.kt)("h2",{id:"examples"},"EXAMPLES"),(0,a.kt)("h3",{id:"running-container-in-read-only-mode"},"Running container in read-only mode"),(0,a.kt)("p",null,"During container image development, containers often need to write to the image\ncontent. Installing packages into ",(0,a.kt)("em",{parentName:"p"},"/usr"),", for example. In production,\napplications seldom need to write to the image. Container applications write\nto volumes if they need to write to file systems at all. Applications can be\nmade more secure by running them in read-only mode using the ",(0,a.kt)("strong",{parentName:"p"},"--read-only")," switch.\nThis protects the container's image from modification. By default read-only\ncontainers can write to temporary data. Podman mounts a tmpfs on ",(0,a.kt)("em",{parentName:"p"},"/run")," and\n",(0,a.kt)("em",{parentName:"p"},"/tmp")," within the container. If the container should not write to any file\nsystem within the container, including tmpfs, set --read-only-tmpfs=false."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --read-only -i -t fedora /bin/bash\n\n$ podman run --read-only --read-only-tmpfs=false --tmpfs /run -i -t fedora /bin/bash\n")),(0,a.kt)("h3",{id:"exposing-log-messages-from-the-container-to-the-hosts-log"},"Exposing log messages from the container to the host's log"),(0,a.kt)("p",null,"Bind mount the ",(0,a.kt)("em",{parentName:"p"},"/dev/log")," directory to have messages that are logged in the container show up in the host's\nsyslog/journal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -v /dev/log:/dev/log -i -t fedora /bin/bash\n")),(0,a.kt)("p",null,"From inside the container test this by sending a message to the log."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'(bash)# logger "Hello from my container"\n')),(0,a.kt)("p",null,"Then exit and check the journal."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(bash)# exit\n\n$ journalctl -b | grep Hello\n")),(0,a.kt)("p",null,"This should list the message sent to logger."),(0,a.kt)("h3",{id:"attaching-to-one-or-more-from-stdin-stdout-stderr"},"Attaching to one or more from STDIN, STDOUT, STDERR"),(0,a.kt)("p",null,"Without specifying the ",(0,a.kt)("strong",{parentName:"p"},"-a")," option, Podman will attach everything (stdin, stdout, stderr).\nOverride the default by specifying -a (stdin, stdout, stderr), as in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -a stdin -a stdout -i -t fedora /bin/bash\n")),(0,a.kt)("h3",{id:"sharing-ipc-between-containers"},"Sharing IPC between containers"),(0,a.kt)("p",null,"Using ",(0,a.kt)("strong",{parentName:"p"},"shm_server.c")," available here: ",(0,a.kt)("a",{parentName:"p",href:"https://www.cs.cf.ac.uk/Dave/C/node27.html"},"https://www.cs.cf.ac.uk/Dave/C/node27.html")),(0,a.kt)("p",null,"Testing ",(0,a.kt)("strong",{parentName:"p"},"--ipc=host")," mode:"),(0,a.kt)("p",null,"Host shows a shared memory segment with 7 pids attached, happens to be from httpd:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo ipcs -m\n\n------ Shared Memory Segments --------\nkey        shmid      owner      perms      bytes      nattch     status\n0x01128e25 0          root       600        1000       7\n")),(0,a.kt)("p",null,"Now run a regular container, and it correctly does NOT see the shared memory segment from the host:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -it shm ipcs -m\n\n------ Shared Memory Segments --------\nkey        shmid      owner      perms      bytes      nattch     status\n")),(0,a.kt)("p",null,"Run a container with the new ",(0,a.kt)("strong",{parentName:"p"},"--ipc=host")," option, and it now sees the shared memory segment from the host httpd:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -it --ipc=host shm ipcs -m\n\n------ Shared Memory Segments --------\nkey        shmid      owner      perms      bytes      nattch     status\n0x01128e25 0          root       600        1000       7\n")),(0,a.kt)("p",null,"Testing ",(0,a.kt)("strong",{parentName:"p"},"--ipc=container:"),(0,a.kt)("em",{parentName:"p"},"id")," mode:"),(0,a.kt)("p",null,"Start a container with a program to create a shared memory segment:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -it shm bash\n$ sudo shm/shm_server &\n$ sudo ipcs -m\n\n------ Shared Memory Segments --------\nkey        shmid      owner      perms      bytes      nattch     status\n0x0000162e 0          root       666        27         1\n")),(0,a.kt)("p",null,"Create a 2nd container correctly shows no shared memory segment from 1st container:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run shm ipcs -m\n\n------ Shared Memory Segments --------\nkey        shmid      owner      perms      bytes      nattch     status\n")),(0,a.kt)("p",null,"Create a 3rd container using the ",(0,a.kt)("strong",{parentName:"p"},"--ipc=container:"),(0,a.kt)("em",{parentName:"p"},"id")," option, now it shows the shared memory segment from the first:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -it --ipc=container:ed735b2264ac shm ipcs -m\n$ sudo ipcs -m\n\n------ Shared Memory Segments --------\nkey        shmid      owner      perms      bytes      nattch     status\n0x0000162e 0          root       666        27         1\n")),(0,a.kt)("h3",{id:"mapping-ports-for-external-usage"},"Mapping Ports for External Usage"),(0,a.kt)("p",null,"The exposed port of an application can be mapped to a host port using the ",(0,a.kt)("strong",{parentName:"p"},"-p"),"\nflag. For example, an httpd port 80 can be mapped to the host port 8080 using the\nfollowing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -p 8080:80 -d -i -t fedora/httpd\n")),(0,a.kt)("h3",{id:"mounting-external-volumes"},"Mounting External Volumes"),(0,a.kt)("p",null,"To mount a host directory as a container volume, specify the absolute path to\nthe directory and the absolute path for the container directory separated by a\ncolon. If the source is a named volume maintained by Podman, it is recommended to\nuse its name rather than the path to the volume. Otherwise the volume will be\nconsidered as an orphan and wiped by the ",(0,a.kt)("strong",{parentName:"p"},"podman volume prune")," command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -v /var/db:/data1 -i -t fedora bash\n\n$ podman run -v data:/data2 -i -t fedora bash\n\n$ podman run -v /var/cache/dnf:/var/cache/dnf:O -ti fedora dnf -y update\n")),(0,a.kt)("p",null,"If the container needs a writeable mounted volume by a non root user inside the container, use the ",(0,a.kt)("strong",{parentName:"p"},"U")," option. This option tells Podman to chown the source volume to match the default UID and GID used within the container."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -d -e MYSQL_ROOT_PASSWORD=root --user mysql --userns=keep-id -v ~/data:/var/lib/mysql:z,U mariadb\n")),(0,a.kt)("p",null,"Alternatively if the container needs a writable volume by a non root\nuser inside of the container, the --userns=keep-id option allows users to\nspecify the UID and GID of the user executing Podman to specific UIDs and GIDs\nwithin the container. Since the processes running in the container run as the user's UID, they can read/write files owned by the user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -d -e MYSQL_ROOT_PASSWORD=root --user mysql --userns=keep-id:uid=999,gid=999 -v ~/data:/var/lib/mysql:z mariadb\n")),(0,a.kt)("p",null,"Using ",(0,a.kt)("strong",{parentName:"p"},"--mount")," flags to mount a host directory as a container folder, specify\nthe absolute path to the directory or the volume name, and the absolute path\nwithin the container directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --mount type=bind,src=/var/db,target=/data1 busybox sh\n\n$ podman run --mount type=bind,src=volume-name,target=/data1 busybox sh\n")),(0,a.kt)("p",null,"When using SELinux, be aware that the host has no knowledge of container SELinux\npolicy. Therefore, in the above example, if SELinux policy is enforced, the\n",(0,a.kt)("em",{parentName:"p"},"/var/db"),' directory is not writable to the container. A "Permission Denied"\nmessage will occur and an ',(0,a.kt)("strong",{parentName:"p"},"avc:")," message in the host's syslog."),(0,a.kt)("p",null,"To work around this, at time of writing this man page, the following command\nneeds to be run in order for the proper SELinux policy type label to be attached\nto the host directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ chcon -Rt svirt_sandbox_file_t /var/db\n")),(0,a.kt)("p",null,"Now, writing to the ",(0,a.kt)("em",{parentName:"p"},"/data1")," volume in the container will be allowed and the\nchanges will also be reflected on the host in ",(0,a.kt)("em",{parentName:"p"},"/var/db"),"."),(0,a.kt)("h3",{id:"using-alternative-security-labeling"},"Using alternative security labeling"),(0,a.kt)("p",null,"Override the default labeling scheme for each container by specifying\nthe ",(0,a.kt)("strong",{parentName:"p"},"--security-opt")," flag. For example, specify the MCS/MLS level, a\nrequirement for MLS systems. Specifying the level in the following command\nallows the same content to be shared between containers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"podman run --security-opt label=level:s0:c100,c200 -i -t fedora bash\n")),(0,a.kt)("p",null,"An MLS example might be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --security-opt label=level:TopSecret -i -t rhel7 bash\n")),(0,a.kt)("p",null,"To disable the security labeling for this container versus running with the"),(0,a.kt)("h4",{id:"--permissive-flag-use-the-following-command"},(0,a.kt)("strong",{parentName:"h4"},"--permissive")," flag, use the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --security-opt label=disable -i -t fedora bash\n")),(0,a.kt)("p",null,"Tighten the security policy on the processes within a container by specifying an\nalternate type for the container. For example, run a container\nthat is only allowed to listen on Apache ports by executing the following\ncommand:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --security-opt label=type:svirt_apache_t -i -t centos bash\n")),(0,a.kt)("p",null,"Note an SELinux policy defining a ",(0,a.kt)("strong",{parentName:"p"},"svirt_apache_t")," type would need to be written."),(0,a.kt)("p",null,"To mask additional specific paths in the container, specify the paths\nseparated by a colon using the ",(0,a.kt)("strong",{parentName:"p"},"mask")," option with the ",(0,a.kt)("strong",{parentName:"p"},"--security-opt"),"\nflag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --security-opt mask=/foo/bar:/second/path fedora bash\n")),(0,a.kt)("p",null,"To unmask all the paths that are masked by default, set the ",(0,a.kt)("strong",{parentName:"p"},"unmask")," option to\n",(0,a.kt)("strong",{parentName:"p"},"ALL"),". Or to only unmask specific paths, specify the paths as shown above with\nthe ",(0,a.kt)("strong",{parentName:"p"},"mask")," option."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --security-opt unmask=ALL fedora bash\n")),(0,a.kt)("p",null,"To unmask all the paths that start with /proc, set the ",(0,a.kt)("strong",{parentName:"p"},"unmask")," option to\n",(0,a.kt)("strong",{parentName:"p"},"/proc/","*"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --security-opt unmask=/proc/* fedora bash\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --security-opt unmask=/foo/bar:/sys/firmware fedora bash\n")),(0,a.kt)("h3",{id:"setting-device-weight-via---blkio-weight-device-flag"},"Setting device weight via ",(0,a.kt)("strong",{parentName:"h3"},"--blkio-weight-device")," flag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ podman run -it --blkio-weight-device "/dev/sda:200" ubuntu\n')),(0,a.kt)("h3",{id:"using-a-podman-container-with-input-from-a-pipe"},"Using a podman container with input from a pipe"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ echo "asdf" | podman run --rm -i --entrypoint /bin/cat someimage\nasdf\n')),(0,a.kt)("h3",{id:"setting-automatic-user-namespace-separated-containers"},"Setting automatic user namespace separated containers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# podman run --userns=auto:size=65536 ubi8-micro cat /proc/self/uid_map\n0 2147483647      65536\n# podman run --userns=auto:size=65536 ubi8-micro cat /proc/self/uid_map\n0 2147549183      65536\n")),(0,a.kt)("h3",{id:"setting-namespaced-kernel-parameters-sysctls"},"Setting Namespaced Kernel Parameters (Sysctls)"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"--sysctl")," sets namespaced kernel parameters (sysctls) in the\ncontainer. For example, to turn on IP forwarding in the containers\nnetwork namespace, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --sysctl net.ipv4.ip_forward=1 someimage\n")),(0,a.kt)("p",null,"Note that not all sysctls are namespaced. Podman does not support changing sysctls\ninside of a container that also modify the host system. As the kernel\nevolves we expect to see more sysctls become namespaced."),(0,a.kt)("p",null,"See the definition of the ",(0,a.kt)("strong",{parentName:"p"},"--sysctl")," option above for the current list of\nsupported sysctls."),(0,a.kt)("h3",{id:"set-uidgid-mapping-in-a-new-user-namespace"},"Set UID/GID mapping in a new user namespace"),(0,a.kt)("p",null,"Running a container in a new user namespace requires a mapping of\nthe UIDs and GIDs from the host."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --uidmap 0:30000:7000 --gidmap 0:30000:7000 fedora echo hello\n")),(0,a.kt)("h3",{id:"configuring-storage-options-from-the-command-line"},"Configuring Storage Options from the command line"),(0,a.kt)("p",null,"Podman allows for the configuration of storage by changing the values\nin the ",(0,a.kt)("em",{parentName:"p"},"/etc/container/storage.conf")," or by using global options. This\nshows how to set up and use fuse-overlayfs for a one-time run of busybox\nusing global options."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'podman --log-level=debug --storage-driver overlay --storage-opt "overlay.mount_program=/usr/bin/fuse-overlayfs" run busybox /bin/sh\n')),(0,a.kt)("h3",{id:"configure-timezone-in-a-container"},"Configure timezone in a container"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --tz=local alpine date\n$ podman run --tz=Asia/Shanghai alpine date\n$ podman run --tz=US/Eastern alpine date\n")),(0,a.kt)("h3",{id:"adding-dependency-containers"},"Adding dependency containers"),(0,a.kt)("p",null,"The first container, container1, is not started initially, but must be running before container2 will start.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"podman run")," command will start the container automatically before starting container2."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman create --name container1 -t -i fedora bash\n$ podman run --name container2 --requires container1 -t -i fedora bash\n")),(0,a.kt)("p",null,"Multiple containers can be required."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman create --name container1 -t -i fedora bash\n$ podman create --name container2 -t -i fedora bash\n$ podman run --name container3 --requires container1,container2 -t -i fedora bash\n")),(0,a.kt)("h3",{id:"configure-keep-supplemental-groups-for-access-to-volume"},"Configure keep supplemental groups for access to volume"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run -v /var/lib/design:/var/lib/design --group-add keep-groups ubi8\n")),(0,a.kt)("h3",{id:"configure-execution-domain-for-containers-using-personality-flag"},"Configure execution domain for containers using personality flag"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --name container1 --personality=LINUX32 fedora bash\n")),(0,a.kt)("h3",{id:"run-a-container-with-external-rootfs-mounted-as-an-overlay"},"Run a container with external rootfs mounted as an overlay"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --name container1 --rootfs /path/to/rootfs:O bash\n")),(0,a.kt)("h3",{id:"handling-timezones-in-java-applications-in-a-container"},"Handling Timezones in java applications in a container."),(0,a.kt)("p",null,"In order to use a timezone other than UTC when running a\nJava application within a container, the ",(0,a.kt)("inlineCode",{parentName:"p"},"TZ")," environment variable must be\nset within the container. Java applications will ignore the value set with the\n",(0,a.kt)("inlineCode",{parentName:"p"},"--tz")," option."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Example run\npodman run -ti --rm  -e TZ=EST mytzimage\nlrwxrwxrwx. 1 root root 29 Nov  3 08:51 /etc/localtime -> ../usr/share/zoneinfo/Etc/UTC\nNow with default timezone:\nFri Nov 19 18:10:55 EST 2021\nJava default sees the following timezone:\n2021-11-19T18:10:55.651130-05:00\nForcing UTC:\nFri Nov 19 23:10:55 UTC 2021\n")),(0,a.kt)("h3",{id:"run-a-container-connected-to-two-networks-called-net1-and-net2-with-a-static-ip"},"Run a container connected to two networks (called net1 and net2) with a static ip"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ podman run --network net1:ip=10.89.5 --network net2:ip=10.8900 alpine ip addr\n")),(0,a.kt)("h3",{id:"rootless-containers"},"Rootless Containers"),(0,a.kt)("p",null,"Podman runs as a non-root user on most systems. This feature requires that a new enough version of ",(0,a.kt)("strong",{parentName:"p"},"shadow-utils"),"\nbe installed. The ",(0,a.kt)("strong",{parentName:"p"},"shadow-utils")," package must include the ",(0,a.kt)("strong",{parentName:"p"},"newuidmap"),"(1) and ",(0,a.kt)("strong",{parentName:"p"},"newgidmap"),"(1) executables."),(0,a.kt)("p",null,"In order for users to run rootless, there must be an entry for their username in ",(0,a.kt)("em",{parentName:"p"},"/etc/subuid")," and ",(0,a.kt)("em",{parentName:"p"},"/etc/subgid")," which lists the UIDs for their user namespace."),(0,a.kt)("p",null,"Rootless Podman works better if the fuse-overlayfs and slirp4netns packages are installed.\nThe ",(0,a.kt)("strong",{parentName:"p"},"fuse-overlayfs")," package provides a userspace overlay storage driver, otherwise users need to use\nthe ",(0,a.kt)("strong",{parentName:"p"},"vfs")," storage driver, which can be disk space expensive and less\nperformant than other drivers."),(0,a.kt)("p",null,"To enable VPN on the container, slirp4netns or pasta needs to be specified;\nwithout either, containers need to be run with the --network=host flag."),(0,a.kt)("h2",{id:"environment"},"ENVIRONMENT"),(0,a.kt)("p",null,"Environment variables within containers can be set using multiple different options,\nin the following order of precedence (later entries override earlier entries):"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Container image: Any environment variables specified in the container image."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"--http-proxy"),": By default, several environment variables will be passed in from the host, such as ",(0,a.kt)("strong",{parentName:"li"},"http_proxy")," and ",(0,a.kt)("strong",{parentName:"li"},"no_proxy"),". See ",(0,a.kt)("strong",{parentName:"li"},"--http-proxy")," for details."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"--env-host"),": Host environment of the process executing Podman is added."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"--env-file"),": Any environment variables specified via env-files. If multiple files are specified, then they override each other in order of entry."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"--env"),": Any environment variables specified will override previous settings.")),(0,a.kt)("p",null,"Run containers and set the environment ending with a ",(0,a.kt)("strong",{parentName:"p"},"*"),".\nThe trailing ",(0,a.kt)("strong",{parentName:"p"},"*")," glob functionality is only active when no value is specified:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ export ENV1=a\n$ podman run --env 'ENV*' alpine env | grep ENV\nENV1=a\n$ podman run --env 'ENV*=b' alpine env | grep ENV\nENV*=b\n")),(0,a.kt)("h2",{id:"conmon"},"CONMON"),(0,a.kt)("p",null,"When Podman starts a container it actually executes the conmon program, which\nthen executes the OCI Runtime. Conmon is the container monitor. It is a small\nprogram whose job is to watch the primary process of the container, and if the\ncontainer dies, save the exit code. It also holds open the tty of the\ncontainer, so that it can be attached to later. This is what allows Podman to\nrun in detached mode (backgrounded), so Podman can exit but conmon continues to\nrun. Each container has their own instance of conmon. Conmon waits for the\ncontainer to exit, gathers and saves the exit code, and then launches a Podman\nprocess to complete the container cleanup, by shutting down the network and\nstorage. For more information on conmon, please reference the conmon(8) man\npage."),(0,a.kt)("h2",{id:"files"},"FILES"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"/etc/subuid")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"/etc/subgid")),(0,a.kt)("p",null,"NOTE: Use the environment variable ",(0,a.kt)("inlineCode",{parentName:"p"},"TMPDIR")," to change the temporary storage location of downloaded container images. Podman defaults to use ",(0,a.kt)("inlineCode",{parentName:"p"},"/var/tmp"),"."),(0,a.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman"},"podman(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-save"},"podman-save(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-ps"},"podman-ps(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-attach"},"podman-attach(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-pod/podman-pod-create"},"podman-pod-create(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-port"},"podman-port(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-start"},"podman-start(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-kill"},"podman-kill(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-stop"},"podman-stop(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-generate/podman-generate-systemd"},"podman-generate-systemd(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"/websites-new/docs/podman-rm"},"podman-rm(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://www.unix.com/man-page/linux/5/subgid"},"subgid(5)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://www.unix.com/man-page/linux/5/subuid"},"subuid(5)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/containers/common/blob/main/docs/containers.conf.5.md"},"containers.conf(5)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://www.freedesktop.org/software/systemd/man/systemd.unit.html"},"systemd.unit(5)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://man7.org/linux/man-pages/man8/setsebool.8.html"},"setsebool(8)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/rootless-containers/slirp4netns/blob/master/slirp4netns.md"},"slirp4netns(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://passt.top/builds/latest/web/passt.html"},"pasta(1)")),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/containers/fuse-overlayfs/blob/main/fuse-overlayfs.md"},"fuse-overlayfs(1)")),", ",(0,a.kt)("strong",{parentName:"p"},"proc(5)"),", ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"https://github.com/containers/conmon/blob/main/docs/conmon.8.md"},"conmon(8)")),", ",(0,a.kt)("strong",{parentName:"p"},"personality(2)")),(0,a.kt)("h2",{id:"history"},"HISTORY"),(0,a.kt)("p",null,"September 2018, updated by Kunal Kushwaha ",(0,a.kt)("inlineCode",{parentName:"p"},"<kushwaha_kunal_v7@lab.ntt.co.jp>")),(0,a.kt)("p",null,"October 2017, converted from Docker documentation to Podman by Dan Walsh for Podman ",(0,a.kt)("inlineCode",{parentName:"p"},"<dwalsh@redhat.com>")),(0,a.kt)("p",null,"November 2015, updated by Sally O'Malley ",(0,a.kt)("inlineCode",{parentName:"p"},"<somalley@redhat.com>")),(0,a.kt)("p",null,"June 2014, updated by Sven Dowideit ",(0,a.kt)("inlineCode",{parentName:"p"},"<SvenDowideit@home.org.au>")),(0,a.kt)("p",null,"April 2014, Originally compiled by William Henry ",(0,a.kt)("inlineCode",{parentName:"p"},"<whenry@redhat.com>")," based on docker.com source material and internal work."),(0,a.kt)("h2",{id:"footnotes"},"FOOTNOTES"),(0,a.kt)("a",{name:"Footnote1"},"1"),": The Podman project is committed to inclusivity, a core value of open source. The `master` and `slave` mount propagation terminology used here is problematic and divisive, and should be changed. However, these terms are currently used within the Linux kernel and must be used as-is at this time. When the kernel maintainers rectify this usage, Podman will follow suit immediately.")}u.isMDXComponent=!0}}]);