"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[52916],{3905:(n,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>h});var t=a(67294);function o(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function r(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function i(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){o(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function l(n,e){if(null==n)return{};var a,t,o=function(n,e){if(null==n)return{};var a,t,o={},r=Object.keys(n);for(t=0;t<r.length;t++)a=r[t],e.indexOf(a)>=0||(o[a]=n[a]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)a=r[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(o[a]=n[a])}return o}var s=t.createContext({}),p=function(n){var e=t.useContext(s),a=e;return n&&(a="function"==typeof n?n(e):i(i({},e),n)),a},m=function(n){var e=p(n.components);return t.createElement(s.Provider,{value:e},n.children)},d="mdxType",c={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},u=t.forwardRef((function(n,e){var a=n.components,o=n.mdxType,r=n.originalType,s=n.parentName,m=l(n,["components","mdxType","originalType","parentName"]),d=p(a),u=o,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||r;return a?t.createElement(h,i(i({ref:e},m),{},{components:a})):t.createElement(h,i({ref:e},m))}));function h(n,e){var a=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=a.length,i=new Array(r);i[0]=u;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[d]="string"==typeof n?n:o,i[1]=l;for(var p=2;p<r;p++)i[p]=a[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},23184:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var t=a(87462),o=(a(67294),a(3905));const r={title:"Programmatic remote access to Podman via the varlink protocol",layout:"default",author:"haraldh",categories:["blogs"],tags:["podman","varlink","rust","python","go","golang"]},i=void 0,l={permalink:"/blog/2019/01/16/podman-varlink",source:"@site/blog/2019-01-16-podman-varlink.md",title:"Programmatic remote access to Podman via the varlink protocol",description:"podman logo",date:"2019-01-16T00:00:00.000Z",formattedDate:"January 16, 2019",tags:[{label:"podman",permalink:"/blog/tags/podman"},{label:"varlink",permalink:"/blog/tags/varlink"},{label:"rust",permalink:"/blog/tags/rust"},{label:"python",permalink:"/blog/tags/python"},{label:"go",permalink:"/blog/tags/go"},{label:"golang",permalink:"/blog/tags/golang"}],readingTime:7.015,hasTruncateMarker:!0,authors:[{name:"haraldh"}],frontMatter:{title:"Programmatic remote access to Podman via the varlink protocol",layout:"default",author:"haraldh",categories:["blogs"],tags:["podman","varlink","rust","python","go","golang"]},prevItem:{title:"Podman v1.0.0 Released",permalink:"/blog/2019/01/16/podman-release-v1.0.0"},nextItem:{title:"Managing pods and containers in a local container runtime",permalink:"/blog/2019/01/15/podman-pods"}},s={authorsImageUrls:[void 0]},p=[{value:"By Harald Hoyer GitHub",id:"by-harald-hoyer-github",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Windows ssh",id:"windows-ssh",level:3},{value:"Generate ssh keys",id:"generate-ssh-keys",level:3},{value:"Set up Podman on the Fedora/RHEL machine",id:"set-up-podman-on-the-fedorarhel-machine",level:2},{value:"ssh config",id:"ssh-config",level:3},{value:"Optional Lock Down",id:"optional-lock-down",level:3},{value:"Python",id:"python",level:2},{value:"Install Python",id:"install-python",level:3},{value:"Install varlink for Python",id:"install-varlink-for-python",level:3},{value:"Test if the varlink cli module works",id:"test-if-the-varlink-cli-module-works",level:3},{value:"Interfacing Podman with the python cli module",id:"interfacing-podman-with-the-python-cli-module",level:3},{value:"Python Client Example",id:"python-client-example",level:3},{value:"Go",id:"go",level:2},{value:"Installation",id:"installation",level:3},{value:"Running the varlink CLI command",id:"running-the-varlink-cli-command",level:3},{value:"Go Client Example",id:"go-client-example",level:3},{value:"Rust",id:"rust",level:2},{value:"Install the rust toolchain",id:"install-the-rust-toolchain",level:3},{value:"Windows",id:"windows",level:4},{value:"All",id:"all",level:4},{value:"Install varlink-cli",id:"install-varlink-cli",level:3},{value:"For non-Linux systems:",id:"for-non-linux-systems",level:4},{value:"For Linux systems:",id:"for-linux-systems",level:4},{value:"Running the varlink CLI command",id:"running-the-varlink-cli-command-1",level:3},{value:"Rust Client Example",id:"rust-client-example",level:3}],m={toc:p},d="wrapper";function c(n){let{components:e,...r}=n;return(0,o.kt)(d,(0,t.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"podman logo",src:a(1382).Z,width:"228",height:"61"})),(0,o.kt)("h1",{id:"programmatic-remote-access-to-podman-via-the-varlink-protocol"},"Programmatic remote access to Podman via the varlink protocol"),(0,o.kt)("h2",{id:"by-harald-hoyer-github"},"By Harald Hoyer ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/haraldh"},"GitHub")),(0,o.kt)("p",null,"This guide shows how to access Podman remotely via the ",(0,o.kt)("a",{parentName:"p",href:"https://varlink.org"},"varlink interface"),"\nwith CLI tools and programmatically with python, go and rust."),(0,o.kt)("p",null,"This should work on Linux, MacOS and Windows 10."),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"https://varlink.org/Language-Bindings"},"compatibility matrix")," shows which feature is supported on which OS in which language."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: replace ",(0,o.kt)("inlineCode",{parentName:"p"},"<podman-machine>")," in this guide with the IP or hostname of your\nPodman machine")),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("h3",{id:"windows-ssh"},"Windows ssh"),(0,o.kt)("p",null,"If you are on a windows client machine, install the OpenSSH Client built by Microsoft in a cmd.exe in\nadmin mode:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cmd"},"> dism /online /Add-Capability /CapabilityName:OpenSSH.Client~~~~0.0.1.0\n")),(0,o.kt)("p",null,"Close cmd.exe window."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: Works also with other ssh clients, e.g. ssh from ",(0,o.kt)("a",{parentName:"p",href:"https://gitforwindows.org/"},"Git Bash"),".")),(0,o.kt)("h3",{id:"generate-ssh-keys"},"Generate ssh keys"),(0,o.kt)("p",null,"If you don't want to type your password all the time, or not use an ssh agent, set an empty password."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ ssh-keygen -f ~/.ssh/podmanuser\n")),(0,o.kt)("h2",{id:"set-up-podman-on-the-fedorarhel-machine"},"Set up Podman on the Fedora/RHEL machine"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo yum install podman libvarlink-util\n$ sudo groupadd podman\n")),(0,o.kt)("p",null,"Copy ",(0,o.kt)("inlineCode",{parentName:"p"},"/lib/tmpfiles.d/podman.conf")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/tmpfiles.d/podman.conf"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo cp /lib/tmpfiles.d/podman.conf /etc/tmpfiles.d/podman.conf\n")),(0,o.kt)("p",null,"Edit ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/tmpfiles.d/podman.conf"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"d /run/podman 0750 root podman\n")),(0,o.kt)("p",null,"Copy ",(0,o.kt)("inlineCode",{parentName:"p"},"/lib/systemd/system/io.podman.socket")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/io.podman.socket"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo cp /lib/systemd/system/io.podman.socket /etc/systemd/system/io.podman.socket\n")),(0,o.kt)("p",null,"Edit section ",(0,o.kt)("inlineCode",{parentName:"p"},"[Socket]")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/systemd/system/io.podman.socket"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"[Socket]\nListenStream=/run/podman/io.podman\nSocketMode=0660\nSocketGroup=podman\n")),(0,o.kt)("p",null,"Then activate the changes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo systemctl daemon-reload\n$ sudo systemd-tmpfiles --create\n$ sudo systemctl enable --now io.podman.socket\n")),(0,o.kt)("p",null,"The directory and socket now belongs to the podman group"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo ls -al /run/podman\ndrwxr-x---.  2 root podman   60 14. Jan 14:50 .\ndrwxr-xr-x. 51 root root   1420 14. Jan 14:36 ..\nsrw-rw----.  1 root podman    0 14. Jan 14:50 io.podman\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: Wouldn't it be nice, if there was a Podman group owning the socket already? ;-)")),(0,o.kt)("p",null,"Now we are adding a user ",(0,o.kt)("inlineCode",{parentName:"p"},"podmanuser")," and set a password:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo useradd podmanuser -G podman\n$ sudo passwd podmanuser\n")),(0,o.kt)("p",null,"From your client machine do"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ ssh-copy-id -f ~/.ssh/podmanuser podmanuser@<podman-machine>\n")),(0,o.kt)("h3",{id:"ssh-config"},"ssh config"),(0,o.kt)("p",null,"Edit ",(0,o.kt)("inlineCode",{parentName:"p"},".ssh/config")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Host <podman-machine>\n    RequestTTY no\n    IdentityFile ~/.ssh/podmanuser\n    User podmanuser\n    VisualHostKey no\n    RemoteCommand /usr/bin/varlink bridge --connect unix:/run/podman/io.podman\n    GSSAPIAuthentication no\n    ForwardX11 no\n")),(0,o.kt)("h3",{id:"optional-lock-down"},"Optional Lock Down"),(0,o.kt)("p",null,"Log into ",(0,o.kt)("inlineCode",{parentName:"p"},"<podman-machine>")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ ssh podmanuser@<podman-machine>\n")),(0,o.kt)("p",null,"Now we lock down ",(0,o.kt)("inlineCode",{parentName:"p"},"podmanuser")," to only be used with the varlink bridge from your client machine:"),(0,o.kt)("p",null,"Edit ",(0,o.kt)("inlineCode",{parentName:"p"},".ssh/authorized-keys")," so that the line begins with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'command="/usr/bin/varlink bridge --connect unix:/run/podman/io.podman",no-agent-forwarding,no-port-forwarding,no-pty,no-user-rc,no-X11-forwarding ssh-rsa [\u2026]\n')),(0,o.kt)("p",null,"Log out of ",(0,o.kt)("inlineCode",{parentName:"p"},"<podman-machine>")),(0,o.kt)("h2",{id:"python"},"Python"),(0,o.kt)("h3",{id:"install-python"},"Install Python"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/downloads/"},"https://www.python.org/downloads/")),(0,o.kt)("h3",{id:"install-varlink-for-python"},"Install varlink for Python"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ pip install --user "varlink>=30.0.2"\n')),(0,o.kt)("h3",{id:"test-if-the-varlink-cli-module-works"},"Test if the varlink cli module works"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ python -m varlink.cli --help\nusage: cli.py [-h] [-r RESOLVER] [-A ACTIVATE] [-b BRIDGE]\n              {info,help,bridge,call} ...\n\u2026\n")),(0,o.kt)("h3",{id:"interfacing-podman-with-the-python-cli-module"},"Interfacing Podman with the python cli module"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ python -m varlink.cli --bridge "ssh <podman-machine>" info\ninfo\n.1:1234\nVendor: Atomic\nProduct: podman\nVersion: 0.10.1\nURL: https://github.com/containers/podman\nInterfaces:\n   org.varlink.service\n   io.podman\n\n$ python -m varlink.cli --bridge "ssh <podman-machine>" call io.podman.Ping {}\n{\n  "ping": {\n    "message": "OK"\n  }\n}\n')),(0,o.kt)("h3",{id:"python-client-example"},"Python Client Example"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"podmanclient.py"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import varlink\n\nwith varlink.Client.new_with_bridge(["ssh", "<podman-machine>"]) as client:\n    with client.open("io.podman") as podman:\n        print(podman.Ping())\n        print(podman.GetInfo())\n        print(podman.GetVersion())\n\n        info = podman.GetInfo()\n        print("Uptime:", info["info"]["host"]["uptime"])\n        print("Os:", info["info"]["host"]["os"])\n\n        try:\n            podman.MountContainer("container-id")\n        except varlink.error.VarlinkError as e:\n            print(e.error(), e.parameters())\n            print(e.as_dict())\n')),(0,o.kt)("p",null,"To find out more about the Podman varlink interface read the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/cmd/podman/varlink/io.podman.varlink"},"io.podman.varlink")," file or\nthe rendered ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/API.md"},"API.md"),"."),(0,o.kt)("p",null,"Or you can inspect, what methods your Podman version on ",(0,o.kt)("inlineCode",{parentName:"p"},"<podman-machine>")," provides:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ python -m varlink.cli --bridge "ssh <podman-machine>" help io.podman\n')),(0,o.kt)("h2",{id:"go"},"Go"),(0,o.kt)("h3",{id:"installation"},"Installation"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ go get -u github.com/varlink/go/varlink\n$ go install github.com/varlink/go/cmd/varlink\n$ go install github.com/varlink/go/cmd/varlink-go-interface-generator\n")),(0,o.kt)("h3",{id:"running-the-varlink-cli-command"},"Running the varlink CLI command"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"varlink")," CLI command in ",(0,o.kt)("inlineCode",{parentName:"p"},"$GOPATH/bin")," should output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ varlink --bridge "ssh <podman-machine>" info\nVendor: Atomic\nProduct: podman\nVersion: 0.10.1\nURL: https://github.com/containers/podman\nInterfaces:\n  org.varlink.service\n  io.podman\n$ varlink --bridge "ssh <podman-machine>" call io.podman.Ping\n{\n  "ping": {\n    "message": "OK"\n  }\n}\n\n$ varlink --bridge "ssh <podman-machine>" call io.podman.MountContainer "{\\"name\\": \\"container-id\\"}"\nError: Call failed with error: io.podman.ErrorOccurred\n{\n  "reason": "no container with name or ID container-id found: no such container"\n}\n')),(0,o.kt)("p",null,"To find out more about the Podman varlink interface read the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/cmd/podman/varlink/io.podman.varlink"},"io.podman.varlink")," file or\nthe rendered ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/API.md"},"API.md"),"."),(0,o.kt)("p",null,"Or you can inspect, what methods your Podman version on ",(0,o.kt)("inlineCode",{parentName:"p"},"<podman-machine>")," provides:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ varlink --bridge "ssh <podman-machine>" help io.podman\n')),(0,o.kt)("h3",{id:"go-client-example"},"Go Client Example"),(0,o.kt)("p",null,"Either clone this ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/haraldh/podmangoexampleclient"},"repository")," or:"),(0,o.kt)("p",null,"Create a new go project.\nCreate a sub directory ",(0,o.kt)("inlineCode",{parentName:"p"},"iopodman")," in the project."),(0,o.kt)("p",null,"Create the ",(0,o.kt)("inlineCode",{parentName:"p"},"io.podman.varlink")," either from the podman github sources or dynamically with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ varlink --bridge "ssh <podman-machine>" help io.podman > iopodman/io.podman.varlink\n')),(0,o.kt)("p",null,"Create iopodman/generate.go:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"package iopodman\n\n//go:generate $GOPATH/bin/varlink-go-interface-generator io.podman.varlink\n")),(0,o.kt)("p",null,"Run ",(0,o.kt)("inlineCode",{parentName:"p"},"go generate"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ go generate ./...\n")),(0,o.kt)("p",null,"Create your main.go:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "flag"\n    "fmt"\n    "github.com/haraldh/podmangoexampleclient/iopodman"\n    "github.com/varlink/go/varlink"\n    "io"\n    "os"\n)\n\nfunc printError(methodname string, err error) {\n    fmt.Fprintf(os.Stderr, "Error calling %s: ", methodname)\n    switch e := err.(type) {\n    case *iopodman.ImageNotFound:\n        //error ImageNotFound (name: string)\n        fmt.Fprintf(os.Stderr, "\'%v\' name=\'%s\'\\n", e, e.Name)\n\n    case *iopodman.ContainerNotFound:\n        //error ContainerNotFound (name: string)\n        fmt.Fprintf(os.Stderr, "\'%v\' name=\'%s\'\\n", e, e.Name)\n\n    case *iopodman.NoContainerRunning:\n        //error NoContainerRunning ()\n        fmt.Fprintf(os.Stderr, "\'%v\'\\n", e)\n\n    case *iopodman.PodNotFound:\n        //error PodNotFound (name: string)\n        fmt.Fprintf(os.Stderr, "\'%v\' name=\'%s\'\\n", e, e.Name)\n\n    case *iopodman.PodContainerError:\n        //error PodContainerError (podname: string, errors: []PodContainerErrorData)\n        fmt.Fprintf(os.Stderr, "\'%v\' podname=\'%s\' errors=\'%v\'\\n", e, e.Podname, e.Errors)\n\n    case *iopodman.NoContainersInPod:\n        //error NoContainersInPod (name: string)\n        fmt.Fprintf(os.Stderr, "\'%v\' name=\'%s\'\\n", e, e.Name)\n\n    case *iopodman.ErrorOccurred:\n        //error ErrorOccurred (reason: string)\n        fmt.Fprintf(os.Stderr, "\'%v\' reason=\'%s\'\\n", e, e.Reason)\n\n    case *iopodman.RuntimeError:\n        //error RuntimeError (reason: string)\n        fmt.Fprintf(os.Stderr, "\'%v\' reason=\'%s\'\\n", e, e.Reason)\n\n    case *varlink.InvalidParameter:\n        fmt.Fprintf(os.Stderr, "\'%v\' parameter=\'%s\'\\n", e, e.Parameter)\n\n    case *varlink.MethodNotFound:\n        fmt.Fprintf(os.Stderr, "\'%v\' method=\'%s\'\\n", e, e.Method)\n\n    case *varlink.MethodNotImplemented:\n        fmt.Fprintf(os.Stderr, "\'%v\' method=\'%s\'\\n", e, e.Method)\n\n    case *varlink.InterfaceNotFound:\n        fmt.Fprintf(os.Stderr, "\'%v\' interface=\'%s\'\\n", e, e.Interface)\n\n    case *varlink.Error:\n        fmt.Fprintf(os.Stderr, "\'%v\' parameters=\'%v\'\\n", e, e.Parameters)\n\n    default:\n        if err == io.EOF {\n            fmt.Fprintf(os.Stderr, "Connection closed\\n", )\n        } else if err == io.ErrUnexpectedEOF {\n            fmt.Fprintf(os.Stderr, "Connection aborted\\n", )\n        } else {\n            fmt.Fprintf(os.Stderr, "%T - \'%v\'\\n", err, err)\n        }\n    }\n}\n\nfunc main() {\n    var c *varlink.Connection\n    var err error\n\n    c, err = varlink.NewBridge("ssh <podman-machine>")\n    if err != nil {\n        fmt.Fprintf(os.Stderr, "Error connecting: %T - \'%v\'\\n", err, err)\n        os.Exit(1)\n    }\n\n    // Be nice and cleanup\n    defer c.Close()\n\n    info, err := iopodman.GetInfo().Call(c)\n\n    if err != nil {\n        printError("GetInfo()", err)\n        os.Exit(1)\n    }\n\n    fmt.Printf("Info: %+v\\n\\n", info)\n\n    fmt.Printf("Podman Version: %+v\\n\\n", info.Podman.Podman_version)\n\n    containers, err := iopodman.ListContainers().Call(c)\n\n    if err != nil {\n        printError("ListContainers()", err)\n        os.Exit(1)\n    }\n\n    for container := range containers {\n        print(container)\n    }\n\n    mount, err := iopodman.MountContainer().Call(c, "foo")\n    if err != nil {\n        printError("MountContainer()", err)\n    } else {\n        print(mount)\n    }\n}\n')),(0,o.kt)("h2",{id:"rust"},"Rust"),(0,o.kt)("h3",{id:"install-the-rust-toolchain"},"Install the rust toolchain"),(0,o.kt)("h4",{id:"windows"},"Windows"),(0,o.kt)("p",null,"First install the C++ part of ",(0,o.kt)("a",{parentName:"p",href:"https://visualstudio.microsoft.com/downloads/"},"https://visualstudio.microsoft.com/downloads/")),(0,o.kt)("h4",{id:"all"},"All"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://rustup.rs/"},"https://rustup.rs/")),(0,o.kt)("h3",{id:"install-varlink-cli"},"Install varlink-cli"),(0,o.kt)("h4",{id:"for-non-linux-systems"},"For non-Linux systems:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ cargo install varlink-cli\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: Ensure that $HOME/.cargo/bin is in your PATH or copy $HOME/.cargo/bin/varlink\nin one of your path directories")),(0,o.kt)("h4",{id:"for-linux-systems"},"For Linux systems:"),(0,o.kt)("p",null,"You can also use ",(0,o.kt)("inlineCode",{parentName:"p"},"varlink")," util from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/varlink/libvarlink"},"libvarlink"),"\nor install ",(0,o.kt)("inlineCode",{parentName:"p"},"libvarlink-util")," on Fedora/RHEL machines."),(0,o.kt)("h3",{id:"running-the-varlink-cli-command-1"},"Running the varlink CLI command"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"varlink")," CLI command in ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.cargo/bin")," should output:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ varlink --bridge "ssh <podman-machine>" info\nVendor: Atomic\nProduct: podman\nVersion: 0.10.1\nURL: https://github.com/containers/podman\nInterfaces:\n  org.varlink.service\n  io.podman\n$ varlink --bridge "ssh <podman-machine>" call io.podman.Ping\n{\n  "ping": {\n    "message": "OK"\n  }\n}\n\n$ varlink --bridge "ssh <podman-machine>" call io.podman.MountContainer "{\\"name\\": \\"container-id\\"}"\nError: Call failed with error: io.podman.ErrorOccurred\n{\n  "reason": "no container with name or ID container-id found: no such container"\n}\n')),(0,o.kt)("p",null,"To find out more about the Podman varlink interface read the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/cmd/podman/varlink/io.podman.varlink"},"io.podman.varlink")," file or\nthe rendered ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/containers/podman/blob/main/API.md"},"API.md"),"."),(0,o.kt)("p",null,"Or you can inspect, what methods your Podman version on ",(0,o.kt)("inlineCode",{parentName:"p"},"<podman-machine>")," provides:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ varlink --bridge "ssh <podman-machine>" help io.podman\n')),(0,o.kt)("h3",{id:"rust-client-example"},"Rust Client Example"),(0,o.kt)("p",null,"Either clone this ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/haraldh/podmanrs"},"repository")," or:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ cargo new --bin podmanrs\n$ cd podmanrs\n")),(0,o.kt)("p",null,"Download the varlink interface from the running Podman varlink service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ varlink --bridge "ssh <podman-machine>" help io.podman > src/io.podman.varlink\n')),(0,o.kt)("p",null,"create ",(0,o.kt)("inlineCode",{parentName:"p"},"build.rs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'extern crate varlink_generator;\n\nfn main() {\n   varlink_generator::cargo_build_tosource("src/io.podman.varlink", true);\n}\n')),(0,o.kt)("p",null,"create ",(0,o.kt)("inlineCode",{parentName:"p"},"Cargo.toml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[package]\nname = "podmanrs"\nversion = "0.1.0"\nauthors = ["Harald Hoyer <harald@redhat.com>"]\nbuild = "build.rs"\nedition = "2018"\n\n[dependencies]\nvarlink = "7"\nserde = "1"\nserde_derive = "1"\nserde_json = "1"\nchainerror = "0.4"\n[build-dependencies]\nvarlink_generator = "7"\n')),(0,o.kt)("p",null,"create ",(0,o.kt)("inlineCode",{parentName:"p"},"src/main.rs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'mod io_podman;\n\nuse crate::io_podman::*;\nuse varlink::Connection;\nuse std::result::Result;\nuse std::error::Error;\n\nfn main() -> Result<(), Box<Error>> {\n    let connection = Connection::with_bridge(\n        "ssh <podman-machine>",\n    )?;\n    let mut podman = VarlinkClient::new(connection.clone());\n    let reply = podman.ping().call()?;\n    println!("Ping() replied with \'{}\'", reply.ping.message);\n    let reply = podman.get_info().call()?;\n    println!("Hostname: {}", reply.info.host.hostname);\n    println!("Info: {:#?}", reply.info);\n    Ok(())\n}\n')),(0,o.kt)("p",null,"Now run it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ cargo run\n")))}c.isMDXComponent=!0},1382:(n,e,a)=>{a.d(e,{Z:()=>t});const t=a.p+"assets/images/podman-ce586c2894883ad9c353492b5e1893a8.svg"}}]);