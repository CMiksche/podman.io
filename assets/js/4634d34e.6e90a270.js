"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[6762],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,c=m["".concat(l,".").concat(u)]||m[u]||k[u]||o;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[m]="string"==typeof e?e:r,i[1]=p;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>k,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={},i=void 0,p={unversionedId:"podman-network/podman-network-create",id:"podman-network/podman-network-create",title:"podman-network-create",description:"% podman-network-create 1",source:"@site/docs/podman-network/podman-network-create.md",sourceDirName:"podman-network",slug:"/podman-network/podman-network-create",permalink:"/website-new/docs/podman-network/podman-network-create",draft:!1,editUrl:"https://github.com/containers/website-new/docs/podman-network/podman-network-create.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-network-connect",permalink:"/website-new/docs/podman-network/podman-network-connect"},next:{title:"podman-network-disconnect",permalink:"/website-new/docs/podman-network/podman-network-disconnect"}},l={},s=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--disable-dns</strong>",id:"--disable-dns",level:4},{value:"<strong>--dns</strong>=<em>ip</em>",id:"--dnsip",level:4},{value:"<strong>--driver</strong>, <strong>-d</strong>=<em>driver</em>",id:"--driver--ddriver",level:4},{value:"<strong>--gateway</strong>=<em>ip</em>",id:"--gatewayip",level:4},{value:"<strong>--ignore</strong>",id:"--ignore",level:4},{value:"<strong>--interface-name</strong>=<em>name</em>",id:"--interface-namename",level:4},{value:"<strong>--internal</strong>",id:"--internal",level:4},{value:"<strong>--ip-range</strong>=<em>range</em>",id:"--ip-rangerange",level:4},{value:"<strong>--ipam-driver</strong>=<em>driver</em>",id:"--ipam-driverdriver",level:4},{value:"<strong>--ipv6</strong>",id:"--ipv6",level:4},{value:"<strong>--label</strong>=<em>label</em>",id:"--labellabel",level:4},{value:"<strong>--opt</strong>, <strong>-o</strong>=<em>option</em>",id:"--opt--ooption",level:4},{value:"<strong>--subnet</strong>=<em>subnet</em>",id:"--subnetsubnet",level:4},{value:"EXAMPLE",id:"example",level:2},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2}],d={toc:s},m="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"% podman-network-create 1"),(0,r.kt)("h2",{id:"name"},"NAME"),(0,r.kt)("p",null,"podman","-","network-create - Create a Podman network"),(0,r.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"podman network create")," ","[",(0,r.kt)("em",{parentName:"p"},"options"),"][*name*]"),(0,r.kt)("h2",{id:"description"},"DESCRIPTION"),(0,r.kt)("p",null,"Create a network configuration for use with Podman. By default, Podman creates a bridge connection.\nA ",(0,r.kt)("em",{parentName:"p"},"Macvlan")," connection can be created with the ",(0,r.kt)("em",{parentName:"p"},"-d macvlan")," option. A parent device for macvlan or\nipvlan can be designated with the ",(0,r.kt)("em",{parentName:"p"},"-o parent=",(0,r.kt)("inlineCode",{parentName:"em"},"<device>"))," or ",(0,r.kt)("em",{parentName:"p"},"--network-interface=",(0,r.kt)("inlineCode",{parentName:"em"},"<device>"))," option."),(0,r.kt)("p",null,"If no options are provided, Podman will assign a free subnet and name for the network."),(0,r.kt)("p",null,"Upon completion of creating the network, Podman will display the name of the newly added network."),(0,r.kt)("p",null,"NOTE: The support for the network name pasta is deprecated and will be removed in the next major\nrelease because it is used as a special network mode in ",(0,r.kt)("strong",{parentName:"p"},"podman run/create --network"),"."),(0,r.kt)("h2",{id:"options"},"OPTIONS"),(0,r.kt)("h4",{id:"--disable-dns"},(0,r.kt)("strong",{parentName:"h4"},"--disable-dns")),(0,r.kt)("p",null,"Disables the DNS plugin for this network which if enabled, can perform container to container name\nresolution. It is only supported with the ",(0,r.kt)("inlineCode",{parentName:"p"},"bridge")," driver, for other drivers it will be always disabled."),(0,r.kt)("h4",{id:"--dnsip"},(0,r.kt)("strong",{parentName:"h4"},"--dns"),"=",(0,r.kt)("em",{parentName:"h4"},"ip")),(0,r.kt)("p",null,"Set network-scoped DNS resolver/nameserver for containers in this network. If not set, the host servers from ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/resolv.conf")," will be used. It can be overwritten on the container level with the ",(0,r.kt)("inlineCode",{parentName:"p"},"podman run/create --dns")," option. This option can be specified multiple times to set more than one IP."),(0,r.kt)("h4",{id:"--driver--ddriver"},(0,r.kt)("strong",{parentName:"h4"},"--driver"),", ",(0,r.kt)("strong",{parentName:"h4"},"-d"),"=",(0,r.kt)("em",{parentName:"h4"},"driver")),(0,r.kt)("p",null,"Driver to manage the network. Currently ",(0,r.kt)("inlineCode",{parentName:"p"},"bridge"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"macvlan")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ipvlan")," are supported. Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"bridge"),".\nAs rootless the ",(0,r.kt)("inlineCode",{parentName:"p"},"macvlan")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ipvlan")," driver have no access to the host network interfaces because rootless networking requires a separate network namespace."),(0,r.kt)("p",null,"The netavark backend allows the use of so called ",(0,r.kt)("em",{parentName:"p"},"netavark plugins"),", see the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/containers/netavark/blob/main/plugin-API.md"},"plugin-API.md"),"\ndocumentation in netavark. The binary must be placed in a specified directory\nso podman can discover it, this list is set in ",(0,r.kt)("inlineCode",{parentName:"p"},"netavark_plugin_dirs")," in\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/containers/common/blob/main/docs/containers.conf.5.md"},"containers.conf(5)")),"\nunder the ",(0,r.kt)("inlineCode",{parentName:"p"},"[network]")," section."),(0,r.kt)("p",null,"The name of the plugin can then be used as driver to create a network for your plugin.\nThe list of all supported drivers and plugins can be seen with ",(0,r.kt)("inlineCode",{parentName:"p"},"podman info --format {{.Plugins.Network}}"),"."),(0,r.kt)("h4",{id:"--gatewayip"},(0,r.kt)("strong",{parentName:"h4"},"--gateway"),"=",(0,r.kt)("em",{parentName:"h4"},"ip")),(0,r.kt)("p",null,"Define a gateway for the subnet. To provide a gateway address, a\n",(0,r.kt)("em",{parentName:"p"},"subnet")," option is required. Can be specified multiple times.\nThe argument order of the ",(0,r.kt)("strong",{parentName:"p"},"--subnet"),", ",(0,r.kt)("strong",{parentName:"p"},"--gateway")," and ",(0,r.kt)("strong",{parentName:"p"},"--ip-range")," options must match."),(0,r.kt)("h4",{id:"--ignore"},(0,r.kt)("strong",{parentName:"h4"},"--ignore")),(0,r.kt)("p",null,"Ignore the create request if a network with the same name already exists instead of failing.\nNote, trying to create a network with an existing name and different parameters, will not change the configuration of the existing one"),(0,r.kt)("h4",{id:"--interface-namename"},(0,r.kt)("strong",{parentName:"h4"},"--interface-name"),"=",(0,r.kt)("em",{parentName:"h4"},"name")),(0,r.kt)("p",null,"This option maps the the ",(0,r.kt)("em",{parentName:"p"},"network_interface")," option in the network config, see ",(0,r.kt)("strong",{parentName:"p"},"podman network inspect"),".\nDepending on the driver this can have different effects, for ",(0,r.kt)("inlineCode",{parentName:"p"},"bridge")," it will be the bridge interface name.\nFor ",(0,r.kt)("inlineCode",{parentName:"p"},"macvlan")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ipvlan")," this will be the parent device on the host. It is the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"--opt parent=..."),"."),(0,r.kt)("h4",{id:"--internal"},(0,r.kt)("strong",{parentName:"h4"},"--internal")),(0,r.kt)("p",null,"Restrict external access of this network. Note when using this option, the dnsname plugin will be\nautomatically disabled."),(0,r.kt)("h4",{id:"--ip-rangerange"},(0,r.kt)("strong",{parentName:"h4"},"--ip-range"),"=",(0,r.kt)("em",{parentName:"h4"},"range")),(0,r.kt)("p",null,"Allocate container IP from a range. The range must be a complete subnet and in CIDR notation. The ",(0,r.kt)("em",{parentName:"p"},"ip-range")," option\nmust be used with a ",(0,r.kt)("em",{parentName:"p"},"subnet")," option. Can be specified multiple times.\nThe argument order of the ",(0,r.kt)("strong",{parentName:"p"},"--subnet"),", ",(0,r.kt)("strong",{parentName:"p"},"--gateway")," and ",(0,r.kt)("strong",{parentName:"p"},"--ip-range")," options must match."),(0,r.kt)("h4",{id:"--ipam-driverdriver"},(0,r.kt)("strong",{parentName:"h4"},"--ipam-driver"),"=",(0,r.kt)("em",{parentName:"h4"},"driver")),(0,r.kt)("p",null,"Set the ipam driver (IP Address Management Driver) for the network. When unset podman will choose an\nipam driver automatically based on the network driver."),(0,r.kt)("p",null,"Valid values are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dhcp"),": IP addresses are assigned from a dhcp server on the network. This driver is not yet supported with netavark. For CNI the ",(0,r.kt)("em",{parentName:"li"},"dhcp")," plugin needs to be activated before."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"host-local"),": IP addresses are assigned locally."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"none"),": No ip addresses are assigned to the interfaces.")),(0,r.kt)("p",null,"View the driver in the ",(0,r.kt)("strong",{parentName:"p"},"podman network inspect")," output under the ",(0,r.kt)("inlineCode",{parentName:"p"},"ipam_options")," field."),(0,r.kt)("h4",{id:"--ipv6"},(0,r.kt)("strong",{parentName:"h4"},"--ipv6")),(0,r.kt)("p",null,"Enable IPv6 (Dual Stack) networking. If no subnets are given it will allocate an ipv4 and an ipv6 subnet."),(0,r.kt)("h4",{id:"--labellabel"},(0,r.kt)("strong",{parentName:"h4"},"--label"),"=",(0,r.kt)("em",{parentName:"h4"},"label")),(0,r.kt)("p",null,"Set metadata for a network (e.g., --label mykey=value)."),(0,r.kt)("h4",{id:"--opt--ooption"},(0,r.kt)("strong",{parentName:"h4"},"--opt"),", ",(0,r.kt)("strong",{parentName:"h4"},"-o"),"=",(0,r.kt)("em",{parentName:"h4"},"option")),(0,r.kt)("p",null,"Set driver specific options."),(0,r.kt)("p",null,"All drivers accept the ",(0,r.kt)("inlineCode",{parentName:"p"},"mtu")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"metric")," options."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mtu"),": Sets the Maximum Transmission Unit (MTU) and takes an integer value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"metric")," Sets the Route Metric for the default route created in every container joined to this network. Accepts a positive integer value. Can only be used with the Netavark network backend.")),(0,r.kt)("p",null,"Additionally the ",(0,r.kt)("inlineCode",{parentName:"p"},"bridge")," driver supports the following options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"vlan"),": This option assign VLAN tag and enables vlan_filtering. Defaults to none."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"isolate"),": This option isolates networks by blocking traffic between those that have this option enabled."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"com.docker.network.bridge.name"),": This option assigns the given name to the created Linux Bridge"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"com.docker.network.driver.mtu"),": Sets the Maximum Transmission Unit (MTU) and takes an integer value.")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"macvlan")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ipvlan")," driver support the following options:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parent"),": The host device which should be used for the macvlan interface. Defaults to the default route interface."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mode"),": This option sets the specified ip/macvlan mode on the interface.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Supported values for ",(0,r.kt)("inlineCode",{parentName:"li"},"macvlan")," are ",(0,r.kt)("inlineCode",{parentName:"li"},"bridge"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"private"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"vepa"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"passthru"),". Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"bridge"),"."),(0,r.kt)("li",{parentName:"ul"},"Supported values for ",(0,r.kt)("inlineCode",{parentName:"li"},"ipvlan")," are ",(0,r.kt)("inlineCode",{parentName:"li"},"l2"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"l3"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"l3s"),". Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"l2"),".")))),(0,r.kt)("h4",{id:"--subnetsubnet"},(0,r.kt)("strong",{parentName:"h4"},"--subnet"),"=",(0,r.kt)("em",{parentName:"h4"},"subnet")),(0,r.kt)("p",null,"The subnet in CIDR notation. Can be specified multiple times to allocate more than one subnet for this network.\nThe argument order of the ",(0,r.kt)("strong",{parentName:"p"},"--subnet"),", ",(0,r.kt)("strong",{parentName:"p"},"--gateway")," and ",(0,r.kt)("strong",{parentName:"p"},"--ip-range")," options must match.\nThis is useful to set a static ipv4 and ipv6 subnet."),(0,r.kt)("h2",{id:"example"},"EXAMPLE"),(0,r.kt)("p",null,"Create a network with no options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network create\npodman2\n")),(0,r.kt)("p",null,"Create a network named ",(0,r.kt)("em",{parentName:"p"},"newnet")," that uses ",(0,r.kt)("em",{parentName:"p"},"192.5.0.0/16")," for its subnet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network create --subnet 192.5.0.0/16 newnet\nnewnet\n")),(0,r.kt)("p",null,"Create an IPv6 network named ",(0,r.kt)("em",{parentName:"p"},"newnetv6")," with a subnet of ",(0,r.kt)("em",{parentName:"p"},"2001:db8::/64"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network create --subnet 2001:db8::/64 --ipv6 newnetv6\nnewnetv6\n")),(0,r.kt)("p",null,"Create a network named ",(0,r.kt)("em",{parentName:"p"},"newnet")," that uses ",(0,r.kt)("em",{parentName:"p"},"19268.33.0/24")," and defines a gateway as ",(0,r.kt)("em",{parentName:"p"},"1926833.3"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network create --subnet 19268.33.0/24 --gateway 19268.33.3 newnet\nnewnet\n")),(0,r.kt)("p",null,"Create a network that uses a ",(0,r.kt)("em",{parentName:"p"},"19268.55.0/24","*","*"," subnet and has an IP address range of "),"19268.5529 - 19268.55.254","*","."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network create --subnet 19268.55.0/24 --ip-range 19268.5528/25\npodman5\n")),(0,r.kt)("p",null,"Create a network with a static ipv4 and ipv6 subnet and set a gateway."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network create --subnet 19268.55.0/24 --gateway 19268.55.3 --subnet fd52:2a5a:747e:3acd::/64 --gateway fd52:2a5a:747e:3acd::10\npodman4\n")),(0,r.kt)("p",null,"Create a Macvlan based network using the host interface eth0. Macvlan networks can only be used as root."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ sudo podman network create -d macvlan -o parent=eth0 --subnet 192.5.0.0/16 newnet\nnewnet\n")),(0,r.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/website-new/docs/podman"},"podman(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/website-new/docs/podman-network/"},"podman-network(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/website-new/docs/podman-network/podman-network-inspect"},"podman-network-inspect(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/website-new/docs/podman-network/podman-network-ls"},"podman-network-ls(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/containers/common/blob/main/docs/containers.conf.5.md"},"containers.conf(5)"))),(0,r.kt)("h2",{id:"history"},"HISTORY"),(0,r.kt)("p",null,"August 2021, Updated with the new network format by Paul Holzinger ",(0,r.kt)("a",{parentName:"p",href:"mailto:pholzing@redhat.com"},"pholzing@redhat.com")),(0,r.kt)("p",null,"August 2019, Originally compiled by Brent Baude ",(0,r.kt)("a",{parentName:"p",href:"mailto:bbaude@redhat.com"},"bbaude@redhat.com")))}k.isMDXComponent=!0}}]);