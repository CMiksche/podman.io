"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[3899],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>N});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),i=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=i(e.components);return a.createElement(m.Provider,{value:t},e.children)},k="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),k=i(n),u=r,N=k["".concat(m,".").concat(u)]||k[u]||s[u]||l;return n?a.createElement(N,o(o({ref:t},d),{},{components:n})):a.createElement(N,o({ref:t},d))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[k]="string"==typeof e?e:r,o[1]=p;for(var i=2;i<l;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3810:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>s,frontMatter:()=>l,metadata:()=>p,toc:()=>i});var a=n(7462),r=(n(7294),n(3905));const l={},o=void 0,p={unversionedId:"commands/podman-network/podman-network-ls",id:"commands/podman-network/podman-network-ls",title:"podman-network-ls",description:"% podman-network-ls 1",source:"@site/docs/commands/podman-network/podman-network-ls.md",sourceDirName:"commands/podman-network",slug:"/commands/podman-network/podman-network-ls",permalink:"/docs/commands/podman-network/podman-network-ls",draft:!1,editUrl:"https://github.com/containers/website-new/docs/commands/podman-network/podman-network-ls.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-network-inspect",permalink:"/docs/commands/podman-network/podman-network-inspect"},next:{title:"podman-network-prune",permalink:"/docs/commands/podman-network/podman-network-prune"}},m={},i=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--filter</strong>, <strong>-f</strong>=<em>filter=value</em>",id:"--filter--ffiltervalue",level:4},{value:"<strong>--format</strong>=<em>format</em>",id:"--formatformat",level:4},{value:"<strong>--no-trunc</strong>",id:"--no-trunc",level:4},{value:"<strong>--quiet</strong>, <strong>-q</strong>",id:"--quiet--q",level:4},{value:"EXAMPLE",id:"example",level:2},{value:"SEE ALSO",id:"see-also",level:2},{value:"HISTORY",id:"history",level:2}],d={toc:i},k="wrapper";function s(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"% podman-network-ls 1"),(0,r.kt)("h2",{id:"name"},"NAME"),(0,r.kt)("p",null,"podman","-","network","-","ls - Display a summary of networks"),(0,r.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"podman network ls")," ","[",(0,r.kt)("em",{parentName:"p"},"options"),"]"),(0,r.kt)("h2",{id:"description"},"DESCRIPTION"),(0,r.kt)("p",null,"Displays a list of existing podman networks."),(0,r.kt)("h2",{id:"options"},"OPTIONS"),(0,r.kt)("h4",{id:"--filter--ffiltervalue"},(0,r.kt)("strong",{parentName:"h4"},"--filter"),", ",(0,r.kt)("strong",{parentName:"h4"},"-f"),"=",(0,r.kt)("em",{parentName:"h4"},"filter=value")),(0,r.kt)("p",null,"Provide filter values."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"filters")," argument format is of ",(0,r.kt)("inlineCode",{parentName:"p"},"key=value"),". If there is more than one ",(0,r.kt)("em",{parentName:"p"},"filter"),", then pass multiple OPTIONS: ",(0,r.kt)("strong",{parentName:"p"},"--filter")," ",(0,r.kt)("em",{parentName:"p"},"foo=bar")," ",(0,r.kt)("strong",{parentName:"p"},"--filter")," ",(0,r.kt)("em",{parentName:"p"},"bif=baz"),"."),(0,r.kt)("p",null,"Supported filters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Filter")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"driver"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter by driver type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter by full or partial network ID.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"label"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter by network with (or without, in the case of label!=","[...]"," is used) the specified labels.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter by network name (accepts ",(0,r.kt)("inlineCode",{parentName:"td"},"regex"),").")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"until"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter by networks created before given timestamp.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dangling"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter by networks with no containers attached.")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"driver")," filter accepts values: ",(0,r.kt)("inlineCode",{parentName:"p"},"bridge"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"macvlan"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ipvlan"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," ",(0,r.kt)("em",{parentName:"p"},"filter")," accepts two formats. One is the ",(0,r.kt)("inlineCode",{parentName:"p"},"label"),"=",(0,r.kt)("em",{parentName:"p"},"key")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"label"),"=",(0,r.kt)("em",{parentName:"p"},"key"),"=",(0,r.kt)("em",{parentName:"p"},"value"),", which shows images with the specified labels. The other format is the ",(0,r.kt)("inlineCode",{parentName:"p"},"label!"),"=",(0,r.kt)("em",{parentName:"p"},"key")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"label!"),"=",(0,r.kt)("em",{parentName:"p"},"key"),"=",(0,r.kt)("em",{parentName:"p"},"value"),", which shows images without the specified labels."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"until")," ",(0,r.kt)("em",{parentName:"p"},"filter")," can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. 10m, 1h30m) computed relative to the machine\u2019s time."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"dangling")," ",(0,r.kt)("em",{parentName:"p"},"filter")," accepts values ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h4",{id:"--formatformat"},(0,r.kt)("strong",{parentName:"h4"},"--format"),"=",(0,r.kt)("em",{parentName:"h4"},"format")),(0,r.kt)("p",null,"Change the default output format. This can be of a supported type like 'json'\nor a Go template.\nValid placeholders for the Go template are listed below:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Placeholder")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"Description")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Created"),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp when the network was created")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".DNSEnabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Network has dns enabled (boolean)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Driver"),(0,r.kt)("td",{parentName:"tr",align:null},"Network driver")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".ID"),(0,r.kt)("td",{parentName:"tr",align:null},"Network ID")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Internal"),(0,r.kt)("td",{parentName:"tr",align:null},"Network is internal (boolean)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".IPAMOptions"),(0,r.kt)("td",{parentName:"tr",align:null},"Network ipam options")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".IPv6Enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Network has ipv6 subnet (boolean)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Labels"),(0,r.kt)("td",{parentName:"tr",align:null},"Network labels")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Name"),(0,r.kt)("td",{parentName:"tr",align:null},"Network name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".NetworkDNSServers"),(0,r.kt)("td",{parentName:"tr",align:null},"Array of DNS servers used in this network")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".NetworkInterface"),(0,r.kt)("td",{parentName:"tr",align:null},"Name of the network interface on the host")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Options"),(0,r.kt)("td",{parentName:"tr",align:null},"Network options")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},".Subnets"),(0,r.kt)("td",{parentName:"tr",align:null},"List of subnets on this network")))),(0,r.kt)("h4",{id:"--no-trunc"},(0,r.kt)("strong",{parentName:"h4"},"--no-trunc")),(0,r.kt)("p",null,"Do not truncate the network ID."),(0,r.kt)("p",null,"@@option noheading"),(0,r.kt)("h4",{id:"--quiet--q"},(0,r.kt)("strong",{parentName:"h4"},"--quiet"),", ",(0,r.kt)("strong",{parentName:"h4"},"-q")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"quiet")," option will restrict the output to only the network names."),(0,r.kt)("h2",{id:"example"},"EXAMPLE"),(0,r.kt)("p",null,"Display networks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network ls\nNETWORK ID    NAME         DRIVER\n88a7120ee19d  podman       bridge\n6dd508dbf8cd  podman6  bridge\n8e35c2cd3bf6  podman5  macvlan\n")),(0,r.kt)("p",null,"Display only network names"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network ls -q\npodman\npodman2\noutside\npodman9\n")),(0,r.kt)("p",null,"Display name of network which support bridge plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman network ls --filter driver=bridge --format {{.Name}}\npodman\npodman2\npodman9\n")),(0,r.kt)("p",null,"List networks with their subnets"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ podman network ls --format "{{.Name}}: {{range .Subnets}}{{.Subnet}} {{end}}"\npodman: 10.88.0.0/16\npodman3: 10.89.30.0/24 fde4:f86f:4aab:e68f::/64\nmacvlan:\n')),(0,r.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/docs/podman"},"podman(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/docs/commands/podman-network/"},"podman-network(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/docs/commands/podman-network/podman-network-inspect"},"podman-network-inspect(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/docs/commands/podman-network/podman-network-create"},"podman-network-create(1)"))),(0,r.kt)("h2",{id:"history"},"HISTORY"),(0,r.kt)("p",null,"August 2021, Updated with the new network format by Paul Holzinger ",(0,r.kt)("a",{parentName:"p",href:"mailto:pholzing@redhat.com"},"pholzing@redhat.com")),(0,r.kt)("p",null,"August 2019, Originally compiled by Brent Baude ",(0,r.kt)("a",{parentName:"p",href:"mailto:bbaude@redhat.com"},"bbaude@redhat.com")))}s.isMDXComponent=!0}}]);