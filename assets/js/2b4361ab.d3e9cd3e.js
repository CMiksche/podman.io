"use strict";(self.webpackChunkpodman=self.webpackChunkpodman||[]).push([[6498],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),l=d(n),f=r,u=l["".concat(p,".").concat(f)]||l[f]||c[f]||i;return n?a.createElement(u,o(o({ref:t},s),{},{components:n})):a.createElement(u,o({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var m={};for(var p in t)hasOwnProperty.call(t,p)&&(m[p]=t[p]);m.originalType=e,m[l]="string"==typeof e?e:r,o[1]=m;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5451:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>m,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={},o=void 0,m={unversionedId:"podman-manifest/podman-manifest-add",id:"podman-manifest/podman-manifest-add",title:"podman-manifest-add",description:"% podman-manifest-add 1",source:"@site/docs/podman-manifest/podman-manifest-add.md",sourceDirName:"podman-manifest",slug:"/podman-manifest/podman-manifest-add",permalink:"/website-new/docs/podman-manifest/podman-manifest-add",draft:!1,editUrl:"https://github.com/containers/website-new/docs/podman-manifest/podman-manifest-add.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"podman-manifest",permalink:"/website-new/docs/podman-manifest/"},next:{title:"podman-manifest-annotate",permalink:"/website-new/docs/podman-manifest/podman-manifest-annotate"}},p={},d=[{value:"NAME",id:"name",level:2},{value:"SYNOPSIS",id:"synopsis",level:2},{value:"DESCRIPTION",id:"description",level:2},{value:"RETURN VALUE",id:"return-value",level:2},{value:"OPTIONS",id:"options",level:2},{value:"<strong>--all</strong>",id:"--all",level:4},{value:"<strong>--arch</strong>",id:"--arch",level:4},{value:"<strong>--os</strong>",id:"--os",level:4},{value:"Transport",id:"transport",level:2},{value:"EXAMPLE",id:"example",level:2},{value:"SEE ALSO",id:"see-also",level:2}],s={toc:d},l="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(l,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"% podman-manifest-add 1"),(0,r.kt)("h2",{id:"name"},"NAME"),(0,r.kt)("p",null,"podman","-","manifest","-","add - Add an image to a manifest list or image index"),(0,r.kt)("h2",{id:"synopsis"},"SYNOPSIS"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"podman manifest add")," ","[",(0,r.kt)("em",{parentName:"p"},"options"),"]"," ",(0,r.kt)("em",{parentName:"p"},"listnameorindexname")," ","[",(0,r.kt)("em",{parentName:"p"},"transport"),"]",":",(0,r.kt)("em",{parentName:"p"},"imagename")),(0,r.kt)("h2",{id:"description"},"DESCRIPTION"),(0,r.kt)("p",null,"Adds the specified image to the specified manifest list or image index."),(0,r.kt)("h2",{id:"return-value"},"RETURN VALUE"),(0,r.kt)("p",null,"The list image's ID."),(0,r.kt)("h2",{id:"options"},"OPTIONS"),(0,r.kt)("h4",{id:"--all"},(0,r.kt)("strong",{parentName:"h4"},"--all")),(0,r.kt)("p",null,"If the image which should be added to the list or index is itself a list or\nindex, add all of the contents to the local list. By default, only one image\nfrom such a list or index will be added to the list or index. Combining\n",(0,r.kt)("em",{parentName:"p"},"--all")," with any of the other options described below is NOT recommended."),(0,r.kt)("p",null,"@@option annotation.manifest"),(0,r.kt)("h4",{id:"--arch"},(0,r.kt)("strong",{parentName:"h4"},"--arch")),(0,r.kt)("p",null,"Override the architecture which the list or index records as a requirement for\nthe image. If ",(0,r.kt)("em",{parentName:"p"},"imageName")," refers to a manifest list or image index, the\narchitecture information will be retrieved from it. Otherwise, it will be\nretrieved from the image's configuration information."),(0,r.kt)("p",null,"@@option authfile"),(0,r.kt)("p",null,"@@option cert-dir"),(0,r.kt)("p",null,"@@option creds"),(0,r.kt)("p",null,"@@option features"),(0,r.kt)("h4",{id:"--os"},(0,r.kt)("strong",{parentName:"h4"},"--os")),(0,r.kt)("p",null,"Override the OS which the list or index records as a requirement for the image.\nIf ",(0,r.kt)("em",{parentName:"p"},"imagename")," refers to a manifest list or image index, the OS information\nwill be retrieved from it. Otherwise, it will be retrieved from the image's\nconfiguration information."),(0,r.kt)("p",null,"@@option os-version"),(0,r.kt)("p",null,"@@option tls-verify"),(0,r.kt)("p",null,"@@option variant.manifest"),(0,r.kt)("h2",{id:"transport"},"Transport"),(0,r.kt)("p",null,"Multiple transports are supported:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker://"),(0,r.kt)("em",{parentName:"p"},"docker-reference")," ",(0,r.kt)("em",{parentName:"p"},"(default)"),'\nAn image in a registry implementing the "Docker Registry HTTP API V2". By default, uses the authorization state in ',(0,r.kt)("inlineCode",{parentName:"p"},"$XDG_RUNTIME_DIR/containers/auth.json"),", which is set using ",(0,r.kt)("inlineCode",{parentName:"p"},"(podman login)"),". If the authorization state is not found there, ",(0,r.kt)("inlineCode",{parentName:"p"},"$HOME/.docker/config.json")," is checked, which is set using ",(0,r.kt)("inlineCode",{parentName:"p"},"(docker login)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman manifest add mylist:v11 docker://quay.io/username/myimage\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"containers-storage:"),(0,r.kt)("em",{parentName:"p"},"oci-reference"),"\nAn image in ",(0,r.kt)("em",{parentName:"p"},"oci-reference")," format stored in the local container storage. ",(0,r.kt)("em",{parentName:"p"},"oci-reference")," must contain a tag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman manifest add mylist:v11 containers-storage:quay.io/username/myimage\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"dir:"),(0,r.kt)("em",{parentName:"p"},"path"),"\nAn existing local directory ",(0,r.kt)("em",{parentName:"p"},"path")," storing the manifest, layer tarballs, and signatures as individual files. This\nis a non-standardized format, primarily useful for debugging or noninvasive container inspection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman manifest add dir:/tmp/myimage\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker-archive:"),(0,r.kt)("em",{parentName:"p"},"path"),"[",(0,r.kt)("strong",{parentName:"p"},":"),(0,r.kt)("em",{parentName:"p"},"docker-reference"),"]","\nAn image is stored in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker save")," formatted file. ",(0,r.kt)("em",{parentName:"p"},"docker-reference")," is only used when creating such a\nfile, and it must not contain a digest."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman manifest add docker-archive:/tmp/myimage\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"docker-daemon:"),(0,r.kt)("em",{parentName:"p"},"docker-reference"),"\nAn image in ",(0,r.kt)("em",{parentName:"p"},"docker-reference")," format stored in the docker daemon internal storage. The ",(0,r.kt)("em",{parentName:"p"},"docker-reference")," can also be an image ID (docker-daemon:algo:digest)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ sudo podman manifest add docker-daemon:docker.io/library/myimage:33\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"oci-archive:"),(0,r.kt)("em",{parentName:"p"},"path"),(0,r.kt)("strong",{parentName:"p"},":"),(0,r.kt)("em",{parentName:"p"},"tag"),"\nAn image ",(0,r.kt)("em",{parentName:"p"},"tag"),' in a directory compliant with "Open Container Image Layout Specification" at ',(0,r.kt)("em",{parentName:"p"},"path"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ podman manifest add oci-archive:/tmp/myimage\n")),(0,r.kt)("h2",{id:"example"},"EXAMPLE"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman manifest add mylist:v11 docker://fedora\n71c201d10fffdcac52968a000d85a0a016ca1c7d5473948000d3131c1773d965\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman manifest add --all mylist:v11 docker://fedora\n71c201d10fffdcac52968a000d85a0a016ca1c7d5473948000d3131c1773d965\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"podman manifest add --arch arm64 --variant v8 mylist:v11 docker://71c201d10fffdcac52968a000d85a0a016ca1c7d5473948000d3131c1773d965\n")),(0,r.kt)("h2",{id:"see-also"},"SEE ALSO"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/website-new/docs/podman"},"podman(1)")),", ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/website-new/docs/podman-manifest/"},"podman-manifest(1)"))))}c.isMDXComponent=!0}}]);